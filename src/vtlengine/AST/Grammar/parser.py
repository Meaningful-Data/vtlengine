# Generated from c:\Users\Javier\Documents\MeaningfulData\Programacion\vtl-parser\grammar\VTL 2.0 (2020-07)\Vtl.g4 by ANTLR 4.8
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00ef")
        buf.write("\u06a3\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write('\4\37\t\37\4 \t \4!\t!\4"\t"\4#\t#\4$\t$\4%\t%\4&\t')
        buf.write("&\4'\t'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\3\2\3\2\3\2\7")
        buf.write("\2\u00e0\n\2\f\2\16\2\u00e3\13\2\3\2\3\2\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\5\3\u00f0\n\3\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4")
        buf.write("\u0103\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\5\4\u0121\n\4\7\4\u0123\n\4\f\4\16\4\u0126")
        buf.write("\13\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\5\5\u0139\n\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\5\5\u014f\n\5\7\5\u0151\n\5\f\5\16\5\u0154\13\5")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u015e\n\6\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u016c\n\7")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0175\n\b\3\t\3\t\3\t")
        buf.write("\3\t\7\t\u017b\n\t\f\t\16\t\u017e\13\t\3\n\3\n\3\n\3\n")
        buf.write("\5\n\u0184\n\n\5\n\u0186\n\n\3\13\3\13\3\13\3\f\3\f\3")
        buf.write("\f\3\f\7\f\u018f\n\f\f\f\16\f\u0192\13\f\3\r\3\r\3\r\3")
        buf.write("\r\7\r\u0198\n\r\f\r\16\r\u019b\13\r\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\17\3\17\3\17\3\17\7\17\u01a6\n\17\f\17\16\17")
        buf.write("\u01a9\13\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\5\20\u01b7\n\20\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\7\21\u01c0\n\21\f\21\16\21\u01c3\13\21")
        buf.write("\5\21\u01c5\n\21\3\21\3\21\3\21\5\21\u01ca\n\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u01eb\n")
        buf.write("\21\3\22\3\22\3\22\3\22\3\22\7\22\u01f2\n\22\f\22\16\22")
        buf.write("\u01f5\13\22\5\22\u01f7\n\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\5\22\u0201\n\22\3\22\3\22\3\22\5\22\u0206")
        buf.write("\n\22\7\22\u0208\n\22\f\22\16\22\u020b\13\22\3\22\3\22")
        buf.write("\3\22\5\22\u0210\n\22\3\22\3\22\5\22\u0214\n\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u021e\n\22\3\22")
        buf.write("\3\22\5\22\u0222\n\22\3\22\3\22\5\22\u0226\n\22\3\23\3")
        buf.write("\23\3\23\3\23\3\23\7\23\u022d\n\23\f\23\16\23\u0230\13")
        buf.write("\23\5\23\u0232\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\5\23\u023c\n\23\3\23\3\23\5\23\u0240\n\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u024a\n\23\3\23")
        buf.write("\3\23\3\23\5\23\u024f\n\23\7\23\u0251\n\23\f\23\16\23")
        buf.write("\u0254\13\23\3\23\3\23\3\23\5\23\u0259\n\23\3\23\3\23")
        buf.write("\5\23\u025d\n\23\3\23\3\23\5\23\u0261\n\23\3\24\3\24\5")
        buf.write("\24\u0265\n\24\3\25\3\25\5\25\u0269\n\25\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\5\26\u0279\n\26\3\26\3\26\5\26\u027d\n\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0288\n\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0293\n")
        buf.write("\26\3\26\3\26\5\26\u0297\n\26\3\26\3\26\5\26\u029b\n\26")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\5\27\u02ab\n\27\3\27\3\27\5\27\u02af\n")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27")
        buf.write("\u02ba\n\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\5\27\u02c5\n\27\3\27\3\27\5\27\u02c9\n\27\3\27\3\27")
        buf.write("\5\27\u02cd\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\5\30\u02d9\n\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\5\30\u02e4\n\30\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u02f0\n\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u02fb\n")
        buf.write("\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0319\n\32\3")
        buf.write("\32\3\32\5\32\u031d\n\32\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\5\33\u0334\n\33\3\34\3\34\3\34\5")
        buf.write("\34\u0339\n\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0341")
        buf.write("\n\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0356")
        buf.write("\n\34\3\34\3\34\5\34\u035a\n\34\3\34\3\34\5\34\u035e\n")
        buf.write("\34\3\34\3\34\3\34\3\34\5\34\u0364\n\34\3\35\3\35\3\35")
        buf.write("\5\35\u0369\n\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0371")
        buf.write("\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0386")
        buf.write("\n\35\3\35\3\35\5\35\u038a\n\35\3\35\3\35\5\35\u038e\n")
        buf.write("\35\3\35\3\35\3\35\3\35\5\35\u0394\n\35\3\36\3\36\3\36")
        buf.write("\3\36\3\36\6\36\u039b\n\36\r\36\16\36\u039c\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\6\36\u03a6\n\36\r\36\16\36\u03a7")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u03b3")
        buf.write("\n\36\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u03bb\n\37\3")
        buf.write("\37\3\37\5\37\u03bf\n\37\3\37\5\37\u03c2\n\37\3\37\5\37")
        buf.write("\u03c5\n\37\3\37\5\37\u03c8\n\37\3\37\3\37\3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \7 \u03d5\n \f \16 \u03d8\13 \5 \u03da")
        buf.write("\n \3 \5 \u03dd\n \3 \3 \3 \3 \3 \3 \3 \3 \5 \u03e7\n")
        buf.write(" \3 \3 \5 \u03eb\n \3 \5 \u03ee\n \3 \5 \u03f1\n \3 \5")
        buf.write(" \u03f4\n \3 \3 \3 \3 \3 \3 \5 \u03fc\n \3 \5 \u03ff\n")
        buf.write(" \3 \5 \u0402\n \3 \5 \u0405\n \3 \3 \5 \u0409\n \3!\3")
        buf.write('!\3!\3!\3!\3!\3!\3"\3"\3"\3"\3"\3"\3"\3#\3#\3#')
        buf.write("\3#\3#\3#\3#\3#\5#\u0421\n#\3$\3$\3$\3$\3$\5$\u0428\n")
        buf.write("$\5$\u042a\n$\3$\3$\3%\3%\3%\3%\3%\3%\5%\u0434\n%\3%\5")
        buf.write("%\u0437\n%\3%\5%\u043a\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\5%\u0446\n%\5%\u0448\n%\3%\3%\3%\5%\u044d\n%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u045d\n%\3&\3&\3")
        buf.write("&\3&\3&\3&\5&\u0465\n&\3&\5&\u0468\n&\3&\5&\u046b\n&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0476\n&\5&\u0478\n&\3&\3")
        buf.write("&\3&\5&\u047d\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0489")
        buf.write("\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0499")
        buf.write("\n&\3'\3'\3'\3'\3(\3(\3(\7(\u04a2\n(\f(\16(\u04a5")
        buf.write("\13(\3)\5)\u04a8\n)\3)\3)\3)\3)\3*\5*\u04af\n*\3*\3*\3")
        buf.write("*\3*\3+\3+\3+\3+\3,\3,\3,\3,\3,\3,\3,\3,\5,\u04c1\n,\3")
        buf.write(",\3,\5,\u04c5\n,\3-\3-\3-\7-\u04ca\n-\f-\16-\u04cd\13")
        buf.write("-\3.\3.\3.\7.\u04d2\n.\f.\16.\u04d5\13.\3.\3.\3.\3.\7")
        buf.write(".\u04db\n.\f.\16.\u04de\13.\5.\u04e0\n.\3/\3/\3/\5/\u04e5")
        buf.write("\n/\3\60\5\60\u04e8\n\60\3\60\3\60\3\60\5\60\u04ed\n\60")
        buf.write("\3\60\5\60\u04f0\n\60\3\60\5\60\u04f3\n\60\3\61\3\61\3")
        buf.write("\61\3\62\3\62\3\62\3\62\3\62\7\62\u04fd\n\62\f\62\16\62")
        buf.write("\u0500\13\62\3\63\3\63\3\63\3\63\3\63\7\63\u0507\n\63")
        buf.write("\f\63\16\63\u050a\13\63\3\64\3\64\5\64\u050e\n\64\3\65")
        buf.write("\3\65\3\65\5\65\u0513\n\65\3\65\3\65\3\65\3\65\3\65\3")
        buf.write("\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\5\67\u0527\n\67\38\38\38\38\38\78\u052e\n8")
        buf.write("\f8\168\u0531\138\38\38\38\58\u0536\n8\39\39\39\3:\3:")
        buf.write("\3:\3:\5:\u053f\n:\3;\3;\3;\5;\u0544\n;\3<\3<\5<\u0548")
        buf.write("\n<\3=\3=\3=\3=\3=\5=\u054f\n=\3>\3>\3>\5>\u0554\n>\3")
        buf.write("?\3?\5?\u0558\n?\3?\5?\u055b\n?\3?\5?\u055e\n?\3?\5?\u0561")
        buf.write("\n?\3@\3@\3@\3@\3@\5@\u0568\n@\3A\3A\3A\3A\3A\7A\u056f")
        buf.write("\nA\fA\16A\u0572\13A\3A\3A\5A\u0576\nA\3B\3B\5B\u057a")
        buf.write("\nB\3C\3C\3C\3C\3C\5C\u0581\nC\3D\3D\3D\3D\3D\3D\7D\u0589")
        buf.write("\nD\fD\16D\u058c\13D\3D\3D\5D\u0590\nD\3D\3D\3D\3D\3D")
        buf.write("\7D\u0597\nD\fD\16D\u059a\13D\3D\3D\5D\u059e\nD\5D\u05a0")
        buf.write("\nD\3E\3E\3E\3E\3E\3E\3E\3E\7E\u05aa\nE\fE\16E\u05ad\13")
        buf.write("E\3E\3E\5E\u05b1\nE\3E\5E\u05b4\nE\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\7E\u05bd\nE\fE\16E\u05c0\13E\3E\3E\5E\u05c4\nE\3E\3")
        buf.write("E\5E\u05c8\nE\5E\u05ca\nE\3F\3F\3G\3G\3H\3H\3H\3H\7H\u05d4")
        buf.write("\nH\fH\16H\u05d7\13H\3I\3I\3I\5I\u05dc\nI\3J\3J\3J\7J")
        buf.write("\u05e1\nJ\fJ\16J\u05e4\13J\3K\3K\5K\u05e8\nK\3K\3K\3K")
        buf.write("\3K\5K\u05ee\nK\3K\3K\5K\u05f2\nK\3K\5K\u05f5\nK\3L\3")
        buf.write("L\3L\7L\u05fa\nL\fL\16L\u05fd\13L\3M\3M\5M\u0601\nM\3")
        buf.write("M\3M\5M\u0605\nM\3M\5M\u0608\nM\3N\3N\3N\5N\u060d\nN\3")
        buf.write("N\3N\3N\3O\3O\3O\7O\u0615\nO\fO\16O\u0618\13O\3P\3P\3")
        buf.write("P\3P\5P\u061e\nP\3P\3P\5P\u0622\nP\3P\3P\7P\u0626\nP\f")
        buf.write("P\16P\u0629\13P\3Q\5Q\u062c\nQ\3Q\3Q\3Q\3Q\3Q\5Q\u0633")
        buf.write("\nQ\3R\3R\3S\3S\3S\3S\3S\3S\3S\3S\7S\u063f\nS\fS\16S\u0642")
        buf.write("\13S\3S\3S\5S\u0646\nS\3T\3T\3T\5T\u064b\nT\3U\3U\5U\u064f")
        buf.write("\nU\3V\3V\3W\3W\3X\3X\3X\3X\7X\u0659\nX\fX\16X\u065c\13")
        buf.write("X\3Y\3Y\3Z\3Z\3Z\3[\3[\3\\\3\\\3]\3]\3^\3^\3_\3_\3`\3")
        buf.write("`\3`\5`\u0670\n`\3a\3a\3a\3a\7a\u0676\na\fa\16a\u0679")
        buf.write("\13a\3a\3a\3b\3b\3b\3c\3c\3c\3d\3d\3e\3e\5e\u0687\ne\3")
        buf.write("f\3f\5f\u068b\nf\3g\3g\3g\3g\3g\5g\u0692\ng\3h\3h\3h\3")
        buf.write("i\3i\3j\3j\3k\3k\3l\3l\3m\3m\3n\3n\3n\2\4\6\bo\2\4\6\b")
        buf.write('\n\f\16\20\22\24\26\30\32\34\36 "$&(*,.\60\62\64\668')
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\2'\4\2\17")
        buf.write("\20))\3\2\21\22\4\2\17\20TT\3\2'(\3\2+,\3\2 !\4\2\u00c0")
        buf.write("\u00c0\u00c2\u00c2\3\2\u00b7\u00b8\3\2\u00b9\u00ba\5\2")
        buf.write("SSUWyz\6\2KKMMbb}\177\3\2OP\4\2NNQR\4\2>>\u00c7\u00c7")
        buf.write("\3\2\u0098\u0099\4\2ii\u00ea\u00ea\3\2HI\4\2\62\62\u0081")
        buf.write("\u0081\4\2>>jj\5\2FGY\\\u0082\u0085\6\2FGY\\\u0082\u0085")
        buf.write("\u0089\u008a\3\2\u008b\u008c\3\2DE\4\2BB\u0087\u0087\3")
        buf.write("\2kl\3\2\17\20\4\2\u00e7\u00e8\u00eb\u00eb\4\2\17\17\21")
        buf.write("\21\5\2>>jj\u00de\u00de\3\2\u00d7\u00dc\4\2oo\u00d2\u00d2")
        buf.write("\5\2oovv\u00d1\u00d1\4\2>>\u00d6\u00d6\3\2\t\16\4\2--")
        buf.write("\u00e7\u00ea\5\2\u009e\u00a4\u00c8\u00c8\u00df\u00df\4")
        buf.write("\2>>\u00e9\u00e9\2\u0746\2\u00e1\3\2\2\2\4\u00ef\3\2\2")
        buf.write("\2\6\u0102\3\2\2\2\b\u0138\3\2\2\2\n\u015d\3\2\2\2\f\u016b")
        buf.write("\3\2\2\2\16\u0174\3\2\2\2\20\u0176\3\2\2\2\22\u017f\3")
        buf.write("\2\2\2\24\u0187\3\2\2\2\26\u018a\3\2\2\2\30\u0193\3\2")
        buf.write("\2\2\32\u019c\3\2\2\2\34\u01a1\3\2\2\2\36\u01b6\3\2\2")
        buf.write('\2 \u01ea\3\2\2\2"\u0225\3\2\2\2$\u0260\3\2\2\2&\u0264')
        buf.write("\3\2\2\2(\u0268\3\2\2\2*\u029a\3\2\2\2,\u02cc\3\2\2\2")
        buf.write(".\u02e3\3\2\2\2\60\u02fa\3\2\2\2\62\u031c\3\2\2\2\64\u0333")
        buf.write("\3\2\2\2\66\u0363\3\2\2\28\u0393\3\2\2\2:\u03b2\3\2\2")
        buf.write("\2<\u03b4\3\2\2\2>\u0408\3\2\2\2@\u040a\3\2\2\2B\u0411")
        buf.write("\3\2\2\2D\u0420\3\2\2\2F\u0422\3\2\2\2H\u045c\3\2\2\2")
        buf.write("J\u0498\3\2\2\2L\u049a\3\2\2\2N\u049e\3\2\2\2P\u04a7\3")
        buf.write("\2\2\2R\u04ae\3\2\2\2T\u04b4\3\2\2\2V\u04c4\3\2\2\2X\u04c6")
        buf.write("\3\2\2\2Z\u04ce\3\2\2\2\\\u04e1\3\2\2\2^\u04e7\3\2\2\2")
        buf.write("`\u04f4\3\2\2\2b\u04f7\3\2\2\2d\u0501\3\2\2\2f\u050b\3")
        buf.write("\2\2\2h\u0512\3\2\2\2j\u0519\3\2\2\2l\u0526\3\2\2\2n\u0535")
        buf.write("\3\2\2\2p\u0537\3\2\2\2r\u053a\3\2\2\2t\u0543\3\2\2\2")
        buf.write("v\u0547\3\2\2\2x\u054e\3\2\2\2z\u0553\3\2\2\2|\u0557\3")
        buf.write("\2\2\2~\u0562\3\2\2\2\u0080\u0569\3\2\2\2\u0082\u0579")
        buf.write("\3\2\2\2\u0084\u057b\3\2\2\2\u0086\u059f\3\2\2\2\u0088")
        buf.write("\u05c9\3\2\2\2\u008a\u05cb\3\2\2\2\u008c\u05cd\3\2\2\2")
        buf.write("\u008e\u05cf\3\2\2\2\u0090\u05d8\3\2\2\2\u0092\u05dd\3")
        buf.write("\2\2\2\u0094\u05e7\3\2\2\2\u0096\u05f6\3\2\2\2\u0098\u0600")
        buf.write("\3\2\2\2\u009a\u0609\3\2\2\2\u009c\u0611\3\2\2\2\u009e")
        buf.write("\u061d\3\2\2\2\u00a0\u062b\3\2\2\2\u00a2\u0634\3\2\2\2")
        buf.write("\u00a4\u0645\3\2\2\2\u00a6\u0647\3\2\2\2\u00a8\u064c\3")
        buf.write("\2\2\2\u00aa\u0650\3\2\2\2\u00ac\u0652\3\2\2\2\u00ae\u0654")
        buf.write("\3\2\2\2\u00b0\u065d\3\2\2\2\u00b2\u065f\3\2\2\2\u00b4")
        buf.write("\u0662\3\2\2\2\u00b6\u0664\3\2\2\2\u00b8\u0666\3\2\2\2")
        buf.write("\u00ba\u0668\3\2\2\2\u00bc\u066a\3\2\2\2\u00be\u066c\3")
        buf.write("\2\2\2\u00c0\u0671\3\2\2\2\u00c2\u067c\3\2\2\2\u00c4\u067f")
        buf.write("\3\2\2\2\u00c6\u0682\3\2\2\2\u00c8\u0686\3\2\2\2\u00ca")
        buf.write("\u068a\3\2\2\2\u00cc\u0691\3\2\2\2\u00ce\u0693\3\2\2\2")
        buf.write("\u00d0\u0696\3\2\2\2\u00d2\u0698\3\2\2\2\u00d4\u069a\3")
        buf.write("\2\2\2\u00d6\u069c\3\2\2\2\u00d8\u069e\3\2\2\2\u00da\u06a0")
        buf.write("\3\2\2\2\u00dc\u00dd\5\4\3\2\u00dd\u00de\7\u00ed\2\2\u00de")
        buf.write("\u00e0\3\2\2\2\u00df\u00dc\3\2\2\2\u00e0\u00e3\3\2\2\2")
        buf.write("\u00e1\u00df\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00e4\3")
        buf.write("\2\2\2\u00e3\u00e1\3\2\2\2\u00e4\u00e5\7\2\2\3\u00e5\3")
        buf.write("\3\2\2\2\u00e6\u00e7\5\u00ba^\2\u00e7\u00e8\7\26\2\2\u00e8")
        buf.write("\u00e9\5\6\4\2\u00e9\u00f0\3\2\2\2\u00ea\u00eb\5\u00ba")
        buf.write("^\2\u00eb\u00ec\7r\2\2\u00ec\u00ed\5\6\4\2\u00ed\u00f0")
        buf.write("\3\2\2\2\u00ee\u00f0\5 \21\2\u00ef\u00e6\3\2\2\2\u00ef")
        buf.write("\u00ea\3\2\2\2\u00ef\u00ee\3\2\2\2\u00f0\5\3\2\2\2\u00f1")
        buf.write("\u00f2\b\4\1\2\u00f2\u00f3\7\3\2\2\u00f3\u00f4\5\6\4\2")
        buf.write("\u00f4\u00f5\7\4\2\2\u00f5\u0103\3\2\2\2\u00f6\u0103\5")
        buf.write("\f\7\2\u00f7\u00f8\t\2\2\2\u00f8\u0103\5\6\4\f\u00f9\u00fa")
        buf.write("\7\31\2\2\u00fa\u00fb\5\6\4\2\u00fb\u00fc\7\32\2\2\u00fc")
        buf.write("\u00fd\5\6\4\2\u00fd\u00fe\7\33\2\2\u00fe\u00ff\5\6\4")
        buf.write("\5\u00ff\u0103\3\2\2\2\u0100\u0103\5\u00d6l\2\u0101\u0103")
        buf.write("\5\u00ba^\2\u0102\u00f1\3\2\2\2\u0102\u00f6\3\2\2\2\u0102")
        buf.write("\u00f7\3\2\2\2\u0102\u00f9\3\2\2\2\u0102\u0100\3\2\2\2")
        buf.write("\u0102\u0101\3\2\2\2\u0103\u0124\3\2\2\2\u0104\u0105\f")
        buf.write("\13\2\2\u0105\u0106\t\3\2\2\u0106\u0123\5\6\4\f\u0107")
        buf.write("\u0108\f\n\2\2\u0108\u0109\t\4\2\2\u0109\u0123\5\6\4\13")
        buf.write("\u010a\u010b\f\t\2\2\u010b\u010c\5\u00c6d\2\u010c\u010d")
        buf.write("\5\6\4\n\u010d\u0123\3\2\2\2\u010e\u010f\f\7\2\2\u010f")
        buf.write("\u0110\7&\2\2\u0110\u0123\5\6\4\b\u0111\u0112\f\6\2\2")
        buf.write("\u0112\u0113\t\5\2\2\u0113\u0123\5\6\4\7\u0114\u0115\f")
        buf.write("\16\2\2\u0115\u0116\7\5\2\2\u0116\u0117\5\16\b\2\u0117")
        buf.write("\u0118\7\6\2\2\u0118\u0123\3\2\2\2\u0119\u011a\f\r\2\2")
        buf.write("\u011a\u011b\7\27\2\2\u011b\u0123\5\u00bc_\2\u011c\u011d")
        buf.write("\f\b\2\2\u011d\u0120\t\6\2\2\u011e\u0121\5\u00c0a\2\u011f")
        buf.write("\u0121\5\u00d0i\2\u0120\u011e\3\2\2\2\u0120\u011f\3\2")
        buf.write("\2\2\u0121\u0123\3\2\2\2\u0122\u0104\3\2\2\2\u0122\u0107")
        buf.write("\3\2\2\2\u0122\u010a\3\2\2\2\u0122\u010e\3\2\2\2\u0122")
        buf.write("\u0111\3\2\2\2\u0122\u0114\3\2\2\2\u0122\u0119\3\2\2\2")
        buf.write("\u0122\u011c\3\2\2\2\u0123\u0126\3\2\2\2\u0124\u0122\3")
        buf.write("\2\2\2\u0124\u0125\3\2\2\2\u0125\7\3\2\2\2\u0126\u0124")
        buf.write("\3\2\2\2\u0127\u0128\b\5\1\2\u0128\u0129\7\3\2\2\u0129")
        buf.write("\u012a\5\b\5\2\u012a\u012b\7\4\2\2\u012b\u0139\3\2\2\2")
        buf.write("\u012c\u0139\5\n\6\2\u012d\u012e\t\2\2\2\u012e\u0139\5")
        buf.write("\b\5\f\u012f\u0130\7\31\2\2\u0130\u0131\5\b\5\2\u0131")
        buf.write("\u0132\7\32\2\2\u0132\u0133\5\b\5\2\u0133\u0134\7\33\2")
        buf.write("\2\u0134\u0135\5\b\5\5\u0135\u0139\3\2\2\2\u0136\u0139")
        buf.write("\5\u00d6l\2\u0137\u0139\5\u00be`\2\u0138\u0127\3\2\2\2")
        buf.write("\u0138\u012c\3\2\2\2\u0138\u012d\3\2\2\2\u0138\u012f\3")
        buf.write("\2\2\2\u0138\u0136\3\2\2\2\u0138\u0137\3\2\2\2\u0139\u0152")
        buf.write("\3\2\2\2\u013a\u013b\f\13\2\2\u013b\u013c\t\3\2\2\u013c")
        buf.write("\u0151\5\b\5\f\u013d\u013e\f\n\2\2\u013e\u013f\t\4\2\2")
        buf.write("\u013f\u0151\5\b\5\13\u0140\u0141\f\t\2\2\u0141\u0142")
        buf.write("\5\u00c6d\2\u0142\u0143\5\b\5\n\u0143\u0151\3\2\2\2\u0144")
        buf.write("\u0145\f\7\2\2\u0145\u0146\7&\2\2\u0146\u0151\5\b\5\b")
        buf.write("\u0147\u0148\f\6\2\2\u0148\u0149\t\5\2\2\u0149\u0151\5")
        buf.write("\b\5\7\u014a\u014b\f\b\2\2\u014b\u014e\t\6\2\2\u014c\u014f")
        buf.write("\5\u00c0a\2\u014d\u014f\5\u00d0i\2\u014e\u014c\3\2\2\2")
        buf.write("\u014e\u014d\3\2\2\2\u014f\u0151\3\2\2\2\u0150\u013a\3")
        buf.write("\2\2\2\u0150\u013d\3\2\2\2\u0150\u0140\3\2\2\2\u0150\u0144")
        buf.write("\3\2\2\2\u0150\u0147\3\2\2\2\u0150\u014a\3\2\2\2\u0151")
        buf.write("\u0154\3\2\2\2\u0152\u0150\3\2\2\2\u0152\u0153\3\2\2\2")
        buf.write("\u0153\t\3\2\2\2\u0154\u0152\3\2\2\2\u0155\u015e\5$\23")
        buf.write("\2\u0156\u015e\5,\27\2\u0157\u015e\5\60\31\2\u0158\u015e")
        buf.write('\5\64\33\2\u0159\u015e\58\35\2\u015a\u015e\5B"\2\u015b')
        buf.write("\u015e\5D#\2\u015c\u015e\5J&\2\u015d\u0155\3\2\2\2\u015d")
        buf.write("\u0156\3\2\2\2\u015d\u0157\3\2\2\2\u015d\u0158\3\2\2\2")
        buf.write("\u015d\u0159\3\2\2\2\u015d\u015a\3\2\2\2\u015d\u015b\3")
        buf.write("\2\2\2\u015d\u015c\3\2\2\2\u015e\13\3\2\2\2\u015f\u016c")
        buf.write('\5\36\20\2\u0160\u016c\5"\22\2\u0161\u016c\5*\26\2\u0162')
        buf.write("\u016c\5.\30\2\u0163\u016c\5\62\32\2\u0164\u016c\5\66")
        buf.write("\34\2\u0165\u016c\5:\36\2\u0166\u016c\5<\37\2\u0167\u016c")
        buf.write("\5> \2\u0168\u016c\5@!\2\u0169\u016c\5F$\2\u016a\u016c")
        buf.write("\5H%\2\u016b\u015f\3\2\2\2\u016b\u0160\3\2\2\2\u016b\u0161")
        buf.write("\3\2\2\2\u016b\u0162\3\2\2\2\u016b\u0163\3\2\2\2\u016b")
        buf.write("\u0164\3\2\2\2\u016b\u0165\3\2\2\2\u016b\u0166\3\2\2\2")
        buf.write("\u016b\u0167\3\2\2\2\u016b\u0168\3\2\2\2\u016b\u0169\3")
        buf.write("\2\2\2\u016b\u016a\3\2\2\2\u016c\r\3\2\2\2\u016d\u0175")
        buf.write("\5\20\t\2\u016e\u0175\5\22\n\2\u016f\u0175\5\24\13\2\u0170")
        buf.write("\u0175\5\26\f\2\u0171\u0175\5\30\r\2\u0172\u0175\5\32")
        buf.write("\16\2\u0173\u0175\5\34\17\2\u0174\u016d\3\2\2\2\u0174")
        buf.write("\u016e\3\2\2\2\u0174\u016f\3\2\2\2\u0174\u0170\3\2\2\2")
        buf.write("\u0174\u0171\3\2\2\2\u0174\u0172\3\2\2\2\u0174\u0173\3")
        buf.write("\2\2\2\u0175\17\3\2\2\2\u0176\u0177\7$\2\2\u0177\u017c")
        buf.write("\5L'\2\u0178\u0179\7\23\2\2\u0179\u017b\5L'\2\u017a")
        buf.write("\u0178\3\2\2\2\u017b\u017e\3\2\2\2\u017c\u017a\3\2\2\2")
        buf.write("\u017c\u017d\3\2\2\2\u017d\21\3\2\2\2\u017e\u017c\3\2")
        buf.write("\2\2\u017f\u0180\7?\2\2\u0180\u0185\5N(\2\u0181\u0183")
        buf.write("\5n8\2\u0182\u0184\5p9\2\u0183\u0182\3\2\2\2\u0183\u0184")
        buf.write("\3\2\2\2\u0184\u0186\3\2\2\2\u0185\u0181\3\2\2\2\u0185")
        buf.write("\u0186\3\2\2\2\u0186\23\3\2\2\2\u0187\u0188\7`\2\2\u0188")
        buf.write('\u0189\5\b\5\2\u0189\25\3\2\2\2\u018a\u018b\7"\2\2\u018b')
        buf.write("\u0190\5R*\2\u018c\u018d\7\23\2\2\u018d\u018f\5R*\2\u018e")
        buf.write("\u018c\3\2\2\2\u018f\u0192\3\2\2\2\u0190\u018e\3\2\2\2")
        buf.write("\u0190\u0191\3\2\2\2\u0191\27\3\2\2\2\u0192\u0190\3\2")
        buf.write("\2\2\u0193\u0194\t\7\2\2\u0194\u0199\5\u00be`\2\u0195")
        buf.write("\u0196\7\23\2\2\u0196\u0198\5\u00be`\2\u0197\u0195\3\2")
        buf.write("\2\2\u0198\u019b\3\2\2\2\u0199\u0197\3\2\2\2\u0199\u019a")
        buf.write("\3\2\2\2\u019a\31\3\2\2\2\u019b\u0199\3\2\2\2\u019c\u019d")
        buf.write("\t\b\2\2\u019d\u019e\5\u00be`\2\u019e\u019f\7\23\2\2\u019f")
        buf.write("\u01a0\5\u00be`\2\u01a0\33\3\2\2\2\u01a1\u01a2\7\u00c3")
        buf.write("\2\2\u01a2\u01a7\5T+\2\u01a3\u01a4\7\23\2\2\u01a4\u01a6")
        buf.write("\5T+\2\u01a5\u01a3\3\2\2\2\u01a6\u01a9\3\2\2\2\u01a7\u01a5")
        buf.write("\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\35\3\2\2\2\u01a9\u01a7")
        buf.write("\3\2\2\2\u01aa\u01ab\t\t\2\2\u01ab\u01ac\7\3\2\2\u01ac")
        buf.write("\u01ad\5Z.\2\u01ad\u01ae\5^\60\2\u01ae\u01af\7\4\2\2\u01af")
        buf.write("\u01b7\3\2\2\2\u01b0\u01b1\t\n\2\2\u01b1\u01b2\7\3\2\2")
        buf.write("\u01b2\u01b3\5X-\2\u01b3\u01b4\5^\60\2\u01b4\u01b5\7\4")
        buf.write("\2\2\u01b5\u01b7\3\2\2\2\u01b6\u01aa\3\2\2\2\u01b6\u01b0")
        buf.write("\3\2\2\2\u01b7\37\3\2\2\2\u01b8\u01b9\7q\2\2\u01b9\u01ba")
        buf.write("\7p\2\2\u01ba\u01bb\5\u00d2j\2\u01bb\u01c4\7\3\2\2\u01bc")
        buf.write("\u01c1\5r:\2\u01bd\u01be\7\23\2\2\u01be\u01c0\5r:\2\u01bf")
        buf.write("\u01bd\3\2\2\2\u01c0\u01c3\3\2\2\2\u01c1\u01bf\3\2\2\2")
        buf.write("\u01c1\u01c2\3\2\2\2\u01c2\u01c5\3\2\2\2\u01c3\u01c1\3")
        buf.write("\2\2\2\u01c4\u01bc\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01c6")
        buf.write("\3\2\2\2\u01c6\u01c9\7\4\2\2\u01c7\u01c8\7\u00bf\2\2\u01c8")
        buf.write("\u01ca\5t;\2\u01c9\u01c7\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca")
        buf.write("\u01cb\3\2\2\2\u01cb\u01cc\7\u00ae\2\2\u01cc\u01cd\5\6")
        buf.write("\4\2\u01cd\u01ce\7w\2\2\u01ce\u01cf\7p\2\2\u01cf\u01eb")
        buf.write("\3\2\2\2\u01d0\u01d1\7q\2\2\u01d1\u01d2\7s\2\2\u01d2\u01d3")
        buf.write("\7u\2\2\u01d3\u01d4\5\u008cG\2\u01d4\u01d5\7\3\2\2\u01d5")
        buf.write("\u01d6\5\u008eH\2\u01d6\u01d7\7\4\2\2\u01d7\u01d8\7\u00ae")
        buf.write("\2\2\u01d8\u01d9\5\u0092J\2\u01d9\u01da\7w\2\2\u01da\u01db")
        buf.write("\7s\2\2\u01db\u01dc\7u\2\2\u01dc\u01eb\3\2\2\2\u01dd\u01de")
        buf.write("\7q\2\2\u01de\u01df\7t\2\2\u01df\u01e0\7u\2\2\u01e0\u01e1")
        buf.write("\5\u008cG\2\u01e1\u01e2\7\3\2\2\u01e2\u01e3\5\u009aN\2")
        buf.write("\u01e3\u01e4\7\4\2\2\u01e4\u01e5\7\u00ae\2\2\u01e5\u01e6")
        buf.write("\5\u0096L\2\u01e6\u01e7\7w\2\2\u01e7\u01e8\7t\2\2\u01e8")
        buf.write("\u01e9\7u\2\2\u01e9\u01eb\3\2\2\2\u01ea\u01b8\3\2\2\2")
        buf.write("\u01ea\u01d0\3\2\2\2\u01ea\u01dd\3\2\2\2\u01eb!\3\2\2")
        buf.write("\2\u01ec\u01ed\5\u00d2j\2\u01ed\u01f6\7\3\2\2\u01ee\u01f3")
        buf.write("\5(\25\2\u01ef\u01f0\7\23\2\2\u01f0\u01f2\5(\25\2\u01f1")
        buf.write("\u01ef\3\2\2\2\u01f2\u01f5\3\2\2\2\u01f3\u01f1\3\2\2\2")
        buf.write("\u01f3\u01f4\3\2\2\2\u01f4\u01f7\3\2\2\2\u01f5\u01f3\3")
        buf.write("\2\2\2\u01f6\u01ee\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f8")
        buf.write("\3\2\2\2\u01f8\u01f9\7\4\2\2\u01f9\u0226\3\2\2\2\u01fa")
        buf.write("\u01fb\7\30\2\2\u01fb\u01fc\7\3\2\2\u01fc\u01fd\5\u00d4")
        buf.write("k\2\u01fd\u0200\7\3\2\2\u01fe\u0201\5\u00ba^\2\u01ff\u0201")
        buf.write("\5V,\2\u0200\u01fe\3\2\2\2\u0200\u01ff\3\2\2\2\u0200\u0201")
        buf.write("\3\2\2\2\u0201\u0209\3\2\2\2\u0202\u0205\7\23\2\2\u0203")
        buf.write("\u0206\5\u00ba^\2\u0204\u0206\5V,\2\u0205\u0203\3\2\2")
        buf.write("\2\u0205\u0204\3\2\2\2\u0206\u0208\3\2\2\2\u0207\u0202")
        buf.write("\3\2\2\2\u0208\u020b\3\2\2\2\u0209\u0207\3\2\2\2\u0209")
        buf.write("\u020a\3\2\2\2\u020a\u020c\3\2\2\2\u020b\u0209\3\2\2\2")
        buf.write("\u020c\u020f\7\4\2\2\u020d\u020e\7\u00e6\2\2\u020e\u0210")
        buf.write("\7\u00ea\2\2\u020f\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210")
        buf.write("\u0213\3\2\2\2\u0211\u0212\7\u00bf\2\2\u0212\u0214\5\u0082")
        buf.write("B\2\u0213\u0211\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215")
        buf.write("\3\2\2\2\u0215\u0216\7\4\2\2\u0216\u0226\3\2\2\2\u0217")
        buf.write("\u0218\7\u00d0\2\2\u0218\u0219\7\3\2\2\u0219\u021a\5\6")
        buf.write("\4\2\u021a\u021d\7\23\2\2\u021b\u021e\5\u00d8m\2\u021c")
        buf.write("\u021e\5\u008aF\2\u021d\u021b\3\2\2\2\u021d\u021c\3\2")
        buf.write("\2\2\u021e\u0221\3\2\2\2\u021f\u0220\7\23\2\2\u0220\u0222")
        buf.write("\7\u00ea\2\2\u0221\u021f\3\2\2\2\u0221\u0222\3\2\2\2\u0222")
        buf.write("\u0223\3\2\2\2\u0223\u0224\7\4\2\2\u0224\u0226\3\2\2\2")
        buf.write("\u0225\u01ec\3\2\2\2\u0225\u01fa\3\2\2\2\u0225\u0217\3")
        buf.write("\2\2\2\u0226#\3\2\2\2\u0227\u0228\5\u00d2j\2\u0228\u0231")
        buf.write("\7\3\2\2\u0229\u022e\5&\24\2\u022a\u022b\7\23\2\2\u022b")
        buf.write("\u022d\5&\24\2\u022c\u022a\3\2\2\2\u022d\u0230\3\2\2\2")
        buf.write("\u022e\u022c\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u0232\3")
        buf.write("\2\2\2\u0230\u022e\3\2\2\2\u0231\u0229\3\2\2\2\u0231\u0232")
        buf.write("\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0234\7\4\2\2\u0234")
        buf.write("\u0261\3\2\2\2\u0235\u0236\7\u00d0\2\2\u0236\u0237\7\3")
        buf.write("\2\2\u0237\u0238\5\b\5\2\u0238\u023b\7\23\2\2\u0239\u023c")
        buf.write("\5\u00d8m\2\u023a\u023c\5\u008aF\2\u023b\u0239\3\2\2\2")
        buf.write("\u023b\u023a\3\2\2\2\u023c\u023f\3\2\2\2\u023d\u023e\7")
        buf.write("\23\2\2\u023e\u0240\7\u00ea\2\2\u023f\u023d\3\2\2\2\u023f")
        buf.write("\u0240\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u0242\7\4\2\2")
        buf.write("\u0242\u0261\3\2\2\2\u0243\u0244\7\30\2\2\u0244\u0245")
        buf.write("\7\3\2\2\u0245\u0246\5\u00d4k\2\u0246\u0249\7\3\2\2\u0247")
        buf.write("\u024a\5\u00be`\2\u0248\u024a\5V,\2\u0249\u0247\3\2\2")
        buf.write("\2\u0249\u0248\3\2\2\2\u0249\u024a\3\2\2\2\u024a\u0252")
        buf.write("\3\2\2\2\u024b\u024e\7\23\2\2\u024c\u024f\5\u00be`\2\u024d")
        buf.write("\u024f\5V,\2\u024e\u024c\3\2\2\2\u024e\u024d\3\2\2\2\u024f")
        buf.write("\u0251\3\2\2\2\u0250\u024b\3\2\2\2\u0251\u0254\3\2\2\2")
        buf.write("\u0252\u0250\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u0255\3")
        buf.write("\2\2\2\u0254\u0252\3\2\2\2\u0255\u0258\7\4\2\2\u0256\u0257")
        buf.write("\7\u00e6\2\2\u0257\u0259\7\u00ea\2\2\u0258\u0256\3\2\2")
        buf.write("\2\u0258\u0259\3\2\2\2\u0259\u025c\3\2\2\2\u025a\u025b")
        buf.write("\7\u00bf\2\2\u025b\u025d\5v<\2\u025c\u025a\3\2\2\2\u025c")
        buf.write("\u025d\3\2\2\2\u025d\u025e\3\2\2\2\u025e\u025f\7\4\2\2")
        buf.write("\u025f\u0261\3\2\2\2\u0260\u0227\3\2\2\2\u0260\u0235\3")
        buf.write("\2\2\2\u0260\u0243\3\2\2\2\u0261%\3\2\2\2\u0262\u0265")
        buf.write("\5\b\5\2\u0263\u0265\7i\2\2\u0264\u0262\3\2\2\2\u0264")
        buf.write("\u0263\3\2\2\2\u0265'\3\2\2\2\u0266\u0269\5\6\4\2\u0267")
        buf.write("\u0269\7i\2\2\u0268\u0266\3\2\2\2\u0268\u0267\3\2\2\2")
        buf.write("\u0269)\3\2\2\2\u026a\u026b\t\13\2\2\u026b\u026c\7\3\2")
        buf.write("\2\u026c\u026d\5\6\4\2\u026d\u026e\7\4\2\2\u026e\u029b")
        buf.write("\3\2\2\2\u026f\u0270\7X\2\2\u0270\u0271\7\3\2\2\u0271")
        buf.write("\u027c\5\6\4\2\u0272\u0273\7\23\2\2\u0273\u0274\5\u00c8")
        buf.write("e\2\u0274\u0275\3\2\2\2\u0275\u0276\7\23\2\2\u0276\u0277")
        buf.write("\5\u00c8e\2\u0277\u0279\3\2\2\2\u0278\u0272\3\2\2\2\u0278")
        buf.write("\u0279\3\2\2\2\u0279\u027d\3\2\2\2\u027a\u027b\7\23\2")
        buf.write("\2\u027b\u027d\5\u00c8e\2\u027c\u0278\3\2\2\2\u027c\u027a")
        buf.write("\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u027f\7\4\2\2\u027f")
        buf.write("\u029b\3\2\2\2\u0280\u0281\7|\2\2\u0281\u0282\7\3\2\2")
        buf.write("\u0282\u0283\5\6\4\2\u0283\u0284\7\23\2\2\u0284\u0287")
        buf.write("\5\6\4\2\u0285\u0286\7\23\2\2\u0286\u0288\5\u00c8e\2\u0287")
        buf.write("\u0285\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u0289\3\2\2\2")
        buf.write("\u0289\u028a\7\4\2\2\u028a\u029b\3\2\2\2\u028b\u028c\7")
        buf.write("{\2\2\u028c\u028d\7\3\2\2\u028d\u028e\5\6\4\2\u028e\u028f")
        buf.write("\7\23\2\2\u028f\u0292\5\6\4\2\u0290\u0291\7\23\2\2\u0291")
        buf.write("\u0293\5\u00c8e\2\u0292\u0290\3\2\2\2\u0292\u0293\3\2")
        buf.write("\2\2\u0293\u0296\3\2\2\2\u0294\u0295\7\23\2\2\u0295\u0297")
        buf.write("\5\u00c8e\2\u0296\u0294\3\2\2\2\u0296\u0297\3\2\2\2\u0297")
        buf.write("\u0298\3\2\2\2\u0298\u0299\7\4\2\2\u0299\u029b\3\2\2\2")
        buf.write("\u029a\u026a\3\2\2\2\u029a\u026f\3\2\2\2\u029a\u0280\3")
        buf.write("\2\2\2\u029a\u028b\3\2\2\2\u029b+\3\2\2\2\u029c\u029d")
        buf.write("\t\13\2\2\u029d\u029e\7\3\2\2\u029e\u029f\5\b\5\2\u029f")
        buf.write("\u02a0\7\4\2\2\u02a0\u02cd\3\2\2\2\u02a1\u02a2\7X\2\2")
        buf.write("\u02a2\u02a3\7\3\2\2\u02a3\u02ae\5\b\5\2\u02a4\u02a5\7")
        buf.write("\23\2\2\u02a5\u02a6\5\u00caf\2\u02a6\u02a7\3\2\2\2\u02a7")
        buf.write("\u02a8\7\23\2\2\u02a8\u02a9\5\u00caf\2\u02a9\u02ab\3\2")
        buf.write("\2\2\u02aa\u02a4\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02af")
        buf.write("\3\2\2\2\u02ac\u02ad\7\23\2\2\u02ad\u02af\5\u00caf\2\u02ae")
        buf.write("\u02aa\3\2\2\2\u02ae\u02ac\3\2\2\2\u02af\u02b0\3\2\2\2")
        buf.write("\u02b0\u02b1\7\4\2\2\u02b1\u02cd\3\2\2\2\u02b2\u02b3\7")
        buf.write("|\2\2\u02b3\u02b4\7\3\2\2\u02b4\u02b5\5\b\5\2\u02b5\u02b6")
        buf.write("\7\23\2\2\u02b6\u02b9\5\b\5\2\u02b7\u02b8\7\23\2\2\u02b8")
        buf.write("\u02ba\5\u00caf\2\u02b9\u02b7\3\2\2\2\u02b9\u02ba\3\2")
        buf.write("\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bc\7\4\2\2\u02bc\u02cd")
        buf.write("\3\2\2\2\u02bd\u02be\7{\2\2\u02be\u02bf\7\3\2\2\u02bf")
        buf.write("\u02c0\5\b\5\2\u02c0\u02c1\7\23\2\2\u02c1\u02c4\5\b\5")
        buf.write("\2\u02c2\u02c3\7\23\2\2\u02c3\u02c5\5\u00caf\2\u02c4\u02c2")
        buf.write("\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c8\3\2\2\2\u02c6")
        buf.write("\u02c7\7\23\2\2\u02c7\u02c9\5\u00caf\2\u02c8\u02c6\3\2")
        buf.write("\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02cb")
        buf.write("\7\4\2\2\u02cb\u02cd\3\2\2\2\u02cc\u029c\3\2\2\2\u02cc")
        buf.write("\u02a1\3\2\2\2\u02cc\u02b2\3\2\2\2\u02cc\u02bd\3\2\2\2")
        buf.write("\u02cd-\3\2\2\2\u02ce\u02cf\t\f\2\2\u02cf\u02d0\7\3\2")
        buf.write("\2\u02d0\u02d1\5\6\4\2\u02d1\u02d2\7\4\2\2\u02d2\u02e4")
        buf.write("\3\2\2\2\u02d3\u02d4\t\r\2\2\u02d4\u02d5\7\3\2\2\u02d5")
        buf.write("\u02d8\5\6\4\2\u02d6\u02d7\7\23\2\2\u02d7\u02d9\5\u00c8")
        buf.write("e\2\u02d8\u02d6\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02da")
        buf.write("\3\2\2\2\u02da\u02db\7\4\2\2\u02db\u02e4\3\2\2\2\u02dc")
        buf.write("\u02dd\t\16\2\2\u02dd\u02de\7\3\2\2\u02de\u02df\5\6\4")
        buf.write("\2\u02df\u02e0\7\23\2\2\u02e0\u02e1\5\6\4\2\u02e1\u02e2")
        buf.write("\7\4\2\2\u02e2\u02e4\3\2\2\2\u02e3\u02ce\3\2\2\2\u02e3")
        buf.write("\u02d3\3\2\2\2\u02e3\u02dc\3\2\2\2\u02e4/\3\2\2\2\u02e5")
        buf.write("\u02e6\t\f\2\2\u02e6\u02e7\7\3\2\2\u02e7\u02e8\5\b\5\2")
        buf.write("\u02e8\u02e9\7\4\2\2\u02e9\u02fb\3\2\2\2\u02ea\u02eb\t")
        buf.write("\r\2\2\u02eb\u02ec\7\3\2\2\u02ec\u02ef\5\b\5\2\u02ed\u02ee")
        buf.write("\7\23\2\2\u02ee\u02f0\5\u00caf\2\u02ef\u02ed\3\2\2\2\u02ef")
        buf.write("\u02f0\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f2\7\4\2\2")
        buf.write("\u02f2\u02fb\3\2\2\2\u02f3\u02f4\t\16\2\2\u02f4\u02f5")
        buf.write("\7\3\2\2\u02f5\u02f6\5\b\5\2\u02f6\u02f7\7\23\2\2\u02f7")
        buf.write("\u02f8\5\b\5\2\u02f8\u02f9\7\4\2\2\u02f9\u02fb\3\2\2\2")
        buf.write("\u02fa\u02e5\3\2\2\2\u02fa\u02ea\3\2\2\2\u02fa\u02f3\3")
        buf.write("\2\2\2\u02fb\61\3\2\2\2\u02fc\u02fd\7*\2\2\u02fd\u02fe")
        buf.write("\7\3\2\2\u02fe\u02ff\5\6\4\2\u02ff\u0300\7\23\2\2\u0300")
        buf.write("\u0301\5\6\4\2\u0301\u0302\7\23\2\2\u0302\u0303\5\6\4")
        buf.write("\2\u0303\u0304\7\4\2\2\u0304\u031d\3\2\2\2\u0305\u0306")
        buf.write("\7e\2\2\u0306\u0307\7\3\2\2\u0307\u0308\5\6\4\2\u0308")
        buf.write("\u0309\7\23\2\2\u0309\u030a\5\6\4\2\u030a\u030b\7\4\2")
        buf.write("\2\u030b\u031d\3\2\2\2\u030c\u030d\7.\2\2\u030d\u030e")
        buf.write("\7\3\2\2\u030e\u030f\5\6\4\2\u030f\u0310\7\4\2\2\u0310")
        buf.write("\u031d\3\2\2\2\u0311\u0312\79\2\2\u0312\u0313\7\3\2\2")
        buf.write("\u0313\u0314\5\6\4\2\u0314\u0315\7\23\2\2\u0315\u0318")
        buf.write("\5\6\4\2\u0316\u0317\7\23\2\2\u0317\u0319\5\u00dan\2\u0318")
        buf.write("\u0316\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u031a\3\2\2\2")
        buf.write("\u031a\u031b\7\4\2\2\u031b\u031d\3\2\2\2\u031c\u02fc\3")
        buf.write("\2\2\2\u031c\u0305\3\2\2\2\u031c\u030c\3\2\2\2\u031c\u0311")
        buf.write("\3\2\2\2\u031d\63\3\2\2\2\u031e\u031f\7*\2\2\u031f\u0320")
        buf.write("\7\3\2\2\u0320\u0321\5\b\5\2\u0321\u0322\7\23\2\2\u0322")
        buf.write("\u0323\5\b\5\2\u0323\u0324\7\23\2\2\u0324\u0325\5\b\5")
        buf.write("\2\u0325\u0326\7\4\2\2\u0326\u0334\3\2\2\2\u0327\u0328")
        buf.write("\7e\2\2\u0328\u0329\7\3\2\2\u0329\u032a\5\b\5\2\u032a")
        buf.write("\u032b\7\23\2\2\u032b\u032c\5\b\5\2\u032c\u032d\7\4\2")
        buf.write("\2\u032d\u0334\3\2\2\2\u032e\u032f\7.\2\2\u032f\u0330")
        buf.write("\7\3\2\2\u0330\u0331\5\b\5\2\u0331\u0332\7\4\2\2\u0332")
        buf.write("\u0334\3\2\2\2\u0333\u031e\3\2\2\2\u0333\u0327\3\2\2\2")
        buf.write("\u0333\u032e\3\2\2\2\u0334\65\3\2\2\2\u0335\u0336\7\u00c6")
        buf.write("\2\2\u0336\u0338\7\3\2\2\u0337\u0339\5\6\4\2\u0338\u0337")
        buf.write("\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u033a\3\2\2\2\u033a")
        buf.write("\u0364\7\4\2\2\u033b\u033c\7\u0097\2\2\u033c\u033d\7\3")
        buf.write("\2\2\u033d\u0340\5\6\4\2\u033e\u033f\7\23\2\2\u033f\u0341")
        buf.write("\t\17\2\2\u0340\u033e\3\2\2\2\u0340\u0341\3\2\2\2\u0341")
        buf.write("\u0342\3\2\2\2\u0342\u0343\7\4\2\2\u0343\u0364\3\2\2\2")
        buf.write("\u0344\u0345\t\20\2\2\u0345\u0346\7\3\2\2\u0346\u0347")
        buf.write("\5\6\4\2\u0347\u0348\7\4\2\2\u0348\u0364\3\2\2\2\u0349")
        buf.write("\u034a\7\u009a\2\2\u034a\u034b\7\3\2\2\u034b\u034c\5\6")
        buf.write("\4\2\u034c\u034d\7\23\2\2\u034d\u034e\5j\66\2\u034e\u034f")
        buf.write("\7\4\2\2\u034f\u0364\3\2\2\2\u0350\u0351\7\u00c9\2\2\u0351")
        buf.write("\u0352\7\3\2\2\u0352\u0355\7\u00ea\2\2\u0353\u0354\7\23")
        buf.write("\2\2\u0354\u0356\t\21\2\2\u0355\u0353\3\2\2\2\u0355\u0356")
        buf.write("\3\2\2\2\u0356\u0359\3\2\2\2\u0357\u0358\7\23\2\2\u0358")
        buf.write("\u035a\5\u00c8e\2\u0359\u0357\3\2\2\2\u0359\u035a\3\2")
        buf.write("\2\2\u035a\u035d\3\2\2\2\u035b\u035c\7\23\2\2\u035c\u035e")
        buf.write("\t\22\2\2\u035d\u035b\3\2\2\2\u035d\u035e\3\2\2\2\u035e")
        buf.write("\u035f\3\2\2\2\u035f\u0364\7\4\2\2\u0360\u0361\7\36\2")
        buf.write("\2\u0361\u0362\7\3\2\2\u0362\u0364\7\4\2\2\u0363\u0335")
        buf.write("\3\2\2\2\u0363\u033b\3\2\2\2\u0363\u0344\3\2\2\2\u0363")
        buf.write("\u0349\3\2\2\2\u0363\u0350\3\2\2\2\u0363\u0360\3\2\2\2")
        buf.write("\u0364\67\3\2\2\2\u0365\u0366\7\u00c6\2\2\u0366\u0368")
        buf.write("\7\3\2\2\u0367\u0369\5\b\5\2\u0368\u0367\3\2\2\2\u0368")
        buf.write("\u0369\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u0394\7\4\2\2")
        buf.write("\u036b\u036c\7\u0097\2\2\u036c\u036d\7\3\2\2\u036d\u0370")
        buf.write("\5\b\5\2\u036e\u036f\7\23\2\2\u036f\u0371\t\17\2\2\u0370")
        buf.write("\u036e\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0372\3\2\2\2")
        buf.write("\u0372\u0373\7\4\2\2\u0373\u0394\3\2\2\2\u0374\u0375\t")
        buf.write("\20\2\2\u0375\u0376\7\3\2\2\u0376\u0377\5\b\5\2\u0377")
        buf.write("\u0378\7\4\2\2\u0378\u0394\3\2\2\2\u0379\u037a\7\u009a")
        buf.write("\2\2\u037a\u037b\7\3\2\2\u037b\u037c\5\b\5\2\u037c\u037d")
        buf.write("\7\23\2\2\u037d\u037e\5j\66\2\u037e\u037f\7\4\2\2\u037f")
        buf.write("\u0394\3\2\2\2\u0380\u0381\7\u00c9\2\2\u0381\u0382\7\3")
        buf.write("\2\2\u0382\u0385\7\u00ea\2\2\u0383\u0384\7\23\2\2\u0384")
        buf.write("\u0386\t\21\2\2\u0385\u0383\3\2\2\2\u0385\u0386\3\2\2")
        buf.write("\2\u0386\u0389\3\2\2\2\u0387\u0388\7\23\2\2\u0388\u038a")
        buf.write("\5\u00caf\2\u0389\u0387\3\2\2\2\u0389\u038a\3\2\2\2\u038a")
        buf.write("\u038d\3\2\2\2\u038b\u038c\7\23\2\2\u038c\u038e\t\22\2")
        buf.write("\2\u038d\u038b\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u038f")
        buf.write("\3\2\2\2\u038f\u0394\7\4\2\2\u0390\u0391\7\36\2\2\u0391")
        buf.write("\u0392\7\3\2\2\u0392\u0394\7\4\2\2\u0393\u0365\3\2\2\2")
        buf.write("\u0393\u036b\3\2\2\2\u0393\u0374\3\2\2\2\u0393\u0379\3")
        buf.write("\2\2\2\u0393\u0380\3\2\2\2\u0393\u0390\3\2\2\2\u03949")
        buf.write("\3\2\2\2\u0395\u0396\7\60\2\2\u0396\u0397\7\3\2\2\u0397")
        buf.write("\u039a\5\6\4\2\u0398\u0399\7\23\2\2\u0399\u039b\5\6\4")
        buf.write("\2\u039a\u0398\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039a")
        buf.write("\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u039e\3\2\2\2\u039e")
        buf.write("\u039f\7\4\2\2\u039f\u03b3\3\2\2\2\u03a0\u03a1\7\63\2")
        buf.write("\2\u03a1\u03a2\7\3\2\2\u03a2\u03a5\5\6\4\2\u03a3\u03a4")
        buf.write("\7\23\2\2\u03a4\u03a6\5\6\4\2\u03a5\u03a3\3\2\2\2\u03a6")
        buf.write("\u03a7\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a7\u03a8\3\2\2\2")
        buf.write("\u03a8\u03a9\3\2\2\2\u03a9\u03aa\7\4\2\2\u03aa\u03b3\3")
        buf.write("\2\2\2\u03ab\u03ac\t\23\2\2\u03ac\u03ad\7\3\2\2\u03ad")
        buf.write("\u03ae\5\6\4\2\u03ae\u03af\7\23\2\2\u03af\u03b0\5\6\4")
        buf.write("\2\u03b0\u03b1\7\4\2\2\u03b1\u03b3\3\2\2\2\u03b2\u0395")
        buf.write("\3\2\2\2\u03b2\u03a0\3\2\2\2\u03b2\u03ab\3\2\2\2\u03b3")
        buf.write(";\3\2\2\2\u03b4\u03b5\7h\2\2\u03b5\u03b6\7\3\2\2\u03b6")
        buf.write("\u03b7\5\6\4\2\u03b7\u03b8\7\23\2\2\u03b8\u03ba\7\u00eb")
        buf.write("\2\2\u03b9\u03bb\5\u00aeX\2\u03ba\u03b9\3\2\2\2\u03ba")
        buf.write("\u03bb\3\2\2\2\u03bb\u03be\3\2\2\2\u03bc\u03bd\7v\2\2")
        buf.write("\u03bd\u03bf\5\u00be`\2\u03be\u03bc\3\2\2\2\u03be\u03bf")
        buf.write("\3\2\2\2\u03bf\u03c1\3\2\2\2\u03c0\u03c2\5\u00acW\2\u03c1")
        buf.write("\u03c0\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c4\3\2\2\2")
        buf.write("\u03c3\u03c5\5\u00b4[\2\u03c4\u03c3\3\2\2\2\u03c4\u03c5")
        buf.write("\3\2\2\2\u03c5\u03c7\3\2\2\2\u03c6\u03c8\5\u00b6\\\2\u03c7")
        buf.write("\u03c6\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03c9\3\2\2\2")
        buf.write("\u03c9\u03ca\7\4\2\2\u03ca=\3\2\2\2\u03cb\u03cc\7\u00d4")
        buf.write("\2\2\u03cc\u03cd\7\3\2\2\u03cd\u03ce\5\6\4\2\u03ce\u03cf")
        buf.write("\7\23\2\2\u03cf\u03d9\7\u00eb\2\2\u03d0\u03d1\7\u00dd")
        buf.write("\2\2\u03d1\u03d6\5\u00be`\2\u03d2\u03d3\7\23\2\2\u03d3")
        buf.write("\u03d5\5\u00be`\2\u03d4\u03d2\3\2\2\2\u03d5\u03d8\3\2")
        buf.write("\2\2\u03d6\u03d4\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03da")
        buf.write("\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d9\u03d0\3\2\2\2\u03d9")
        buf.write("\u03da\3\2\2\2\u03da\u03dc\3\2\2\2\u03db\u03dd\5\u00aa")
        buf.write("V\2\u03dc\u03db\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03de")
        buf.write("\3\2\2\2\u03de\u03df\7\4\2\2\u03df\u0409\3\2\2\2\u03e0")
        buf.write("\u03e1\7\u00d5\2\2\u03e1\u03e2\7\3\2\2\u03e2\u03e3\5\6")
        buf.write("\4\2\u03e3\u03e4\7\23\2\2\u03e4\u03e6\7\u00eb\2\2\u03e5")
        buf.write("\u03e7\5\u00aeX\2\u03e6\u03e5\3\2\2\2\u03e6\u03e7\3\2")
        buf.write("\2\2\u03e7\u03ea\3\2\2\2\u03e8\u03e9\7v\2\2\u03e9\u03eb")
        buf.write("\5\u00be`\2\u03ea\u03e8\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb")
        buf.write("\u03ed\3\2\2\2\u03ec\u03ee\5\u00acW\2\u03ed\u03ec\3\2")
        buf.write("\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03f0\3\2\2\2\u03ef\u03f1")
        buf.write("\5\u00b0Y\2\u03f0\u03ef\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1")
        buf.write("\u03f3\3\2\2\2\u03f2\u03f4\5\u00aaV\2\u03f3\u03f2\3\2")
        buf.write("\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f6")
        buf.write("\7\4\2\2\u03f6\u0409\3\2\2\2\u03f7\u03f8\78\2\2\u03f8")
        buf.write("\u03f9\7\3\2\2\u03f9\u03fb\5\6\4\2\u03fa\u03fc\5\u00c2")
        buf.write("b\2\u03fb\u03fa\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fe")
        buf.write("\3\2\2\2\u03fd\u03ff\5\u00c4c\2\u03fe\u03fd\3\2\2\2\u03fe")
        buf.write("\u03ff\3\2\2\2\u03ff\u0401\3\2\2\2\u0400\u0402\5\u00b2")
        buf.write("Z\2\u0401\u0400\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0404")
        buf.write("\3\2\2\2\u0403\u0405\t\24\2\2\u0404\u0403\3\2\2\2\u0404")
        buf.write("\u0405\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0407\7\4\2\2")
        buf.write("\u0407\u0409\3\2\2\2\u0408\u03cb\3\2\2\2\u0408\u03e0\3")
        buf.write("\2\2\2\u0408\u03f7\3\2\2\2\u0409?\3\2\2\2\u040a\u040b")
        buf.write("\7g\2\2\u040b\u040c\7\3\2\2\u040c\u040d\5\6\4\2\u040d")
        buf.write("\u040e\7\23\2\2\u040e\u040f\5\6\4\2\u040f\u0410\7\4\2")
        buf.write("\2\u0410A\3\2\2\2\u0411\u0412\7g\2\2\u0412\u0413\7\3\2")
        buf.write("\2\u0413\u0414\5\b\5\2\u0414\u0415\7\23\2\2\u0415\u0416")
        buf.write("\5\b\5\2\u0416\u0417\7\4\2\2\u0417C\3\2\2\2\u0418\u0419")
        buf.write("\t\25\2\2\u0419\u041a\7\3\2\2\u041a\u041b\5\b\5\2\u041b")
        buf.write("\u041c\7\4\2\2\u041c\u0421\3\2\2\2\u041d\u041e\7\\\2\2")
        buf.write("\u041e\u041f\7\3\2\2\u041f\u0421\7\4\2\2\u0420\u0418\3")
        buf.write("\2\2\2\u0420\u041d\3\2\2\2\u0421E\3\2\2\2\u0422\u0423")
        buf.write("\t\25\2\2\u0423\u0424\7\3\2\2\u0424\u0429\5\6\4\2\u0425")
        buf.write("\u0427\5n8\2\u0426\u0428\5p9\2\u0427\u0426\3\2\2\2\u0427")
        buf.write("\u0428\3\2\2\2\u0428\u042a\3\2\2\2\u0429\u0425\3\2\2\2")
        buf.write("\u0429\u042a\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042c\7")
        buf.write("\4\2\2\u042cG\3\2\2\2\u042d\u042e\t\26\2\2\u042e\u042f")
        buf.write("\7\3\2\2\u042f\u0430\5\6\4\2\u0430\u0431\7\u008e\2\2\u0431")
        buf.write("\u0433\7\3\2\2\u0432\u0434\5b\62\2\u0433\u0432\3\2\2\2")
        buf.write("\u0433\u0434\3\2\2\2\u0434\u0436\3\2\2\2\u0435\u0437\5")
        buf.write("d\63\2\u0436\u0435\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u0439")
        buf.write("\3\2\2\2\u0438\u043a\5h\65\2\u0439\u0438\3\2\2\2\u0439")
        buf.write("\u043a\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u043c\7\4\2\2")
        buf.write("\u043c\u043d\7\4\2\2\u043d\u045d\3\2\2\2\u043e\u043f\t")
        buf.write("\27\2\2\u043f\u0440\7\3\2\2\u0440\u0447\5\6\4\2\u0441")
        buf.write("\u0442\7\23\2\2\u0442\u0445\5j\66\2\u0443\u0444\7\23\2")
        buf.write("\2\u0444\u0446\5V,\2\u0445\u0443\3\2\2\2\u0445\u0446\3")
        buf.write("\2\2\2\u0446\u0448\3\2\2\2\u0447\u0441\3\2\2\2\u0447\u0448")
        buf.write("\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u044a\7\u008e\2\2\u044a")
        buf.write("\u044c\7\3\2\2\u044b\u044d\5b\62\2\u044c\u044b\3\2\2\2")
        buf.write("\u044c\u044d\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u044f\5")
        buf.write("d\63\2\u044f\u0450\3\2\2\2\u0450\u0451\7\4\2\2\u0451\u0452")
        buf.write("\7\4\2\2\u0452\u045d\3\2\2\2\u0453\u0454\7\u008d\2\2\u0454")
        buf.write("\u0455\7\3\2\2\u0455\u0456\5\6\4\2\u0456\u0457\7\u008e")
        buf.write("\2\2\u0457\u0458\7\3\2\2\u0458\u0459\5b\62\2\u0459\u045a")
        buf.write("\7\4\2\2\u045a\u045b\7\4\2\2\u045b\u045d\3\2\2\2\u045c")
        buf.write("\u042d\3\2\2\2\u045c\u043e\3\2\2\2\u045c\u0453\3\2\2\2")
        buf.write("\u045dI\3\2\2\2\u045e\u045f\t\26\2\2\u045f\u0460\7\3\2")
        buf.write("\2\u0460\u0461\5\b\5\2\u0461\u0462\7\u008e\2\2\u0462\u0464")
        buf.write("\7\3\2\2\u0463\u0465\5b\62\2\u0464\u0463\3\2\2\2\u0464")
        buf.write("\u0465\3\2\2\2\u0465\u0467\3\2\2\2\u0466\u0468\5d\63\2")
        buf.write("\u0467\u0466\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u046a\3")
        buf.write("\2\2\2\u0469\u046b\5h\65\2\u046a\u0469\3\2\2\2\u046a\u046b")
        buf.write("\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046d\7\4\2\2\u046d")
        buf.write("\u046e\7\4\2\2\u046e\u0499\3\2\2\2\u046f\u0470\t\27\2")
        buf.write("\2\u0470\u0471\7\3\2\2\u0471\u0477\5\b\5\2\u0472\u0473")
        buf.write("\7\23\2\2\u0473\u0475\5j\66\2\u0474\u0476\5V,\2\u0475")
        buf.write("\u0474\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u0478\3\2\2\2")
        buf.write("\u0477\u0472\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u0479\3")
        buf.write("\2\2\2\u0479\u047a\7\u008e\2\2\u047a\u047c\7\3\2\2\u047b")
        buf.write("\u047d\5b\62\2\u047c\u047b\3\2\2\2\u047c\u047d\3\2\2\2")
        buf.write("\u047d\u047e\3\2\2\2\u047e\u047f\5d\63\2\u047f\u0480\3")
        buf.write("\2\2\2\u0480\u0481\7\4\2\2\u0481\u0482\7\4\2\2\u0482\u0499")
        buf.write("\3\2\2\2\u0483\u0484\7C\2\2\u0484\u0485\7\3\2\2\u0485")
        buf.write("\u0486\7\u008e\2\2\u0486\u0488\7\3\2\2\u0487\u0489\5b")
        buf.write("\62\2\u0488\u0487\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u048a")
        buf.write("\3\2\2\2\u048a\u048b\5d\63\2\u048b\u048c\3\2\2\2\u048c")
        buf.write("\u048d\7\4\2\2\u048d\u048e\7\4\2\2\u048e\u0499\3\2\2\2")
        buf.write("\u048f\u0490\7\u008d\2\2\u0490\u0491\7\3\2\2\u0491\u0492")
        buf.write("\5\b\5\2\u0492\u0493\7\u008e\2\2\u0493\u0494\7\3\2\2\u0494")
        buf.write("\u0495\5b\62\2\u0495\u0496\7\4\2\2\u0496\u0497\7\4\2\2")
        buf.write("\u0497\u0499\3\2\2\2\u0498\u045e\3\2\2\2\u0498\u046f\3")
        buf.write("\2\2\2\u0498\u0483\3\2\2\2\u0498\u048f\3\2\2\2\u0499K")
        buf.write("\3\2\2\2\u049a\u049b\5\u00be`\2\u049b\u049c\7:\2\2\u049c")
        buf.write("\u049d\5\u00be`\2\u049dM\3\2\2\2\u049e\u04a3\5P)\2\u049f")
        buf.write("\u04a0\7\23\2\2\u04a0\u04a2\5P)\2\u04a1\u049f\3\2\2\2")
        buf.write("\u04a2\u04a5\3\2\2\2\u04a3\u04a1\3\2\2\2\u04a3\u04a4\3")
        buf.write("\2\2\2\u04a4O\3\2\2\2\u04a5\u04a3\3\2\2\2\u04a6\u04a8")
        buf.write("\5\u00ccg\2\u04a7\u04a6\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8")
        buf.write("\u04a9\3\2\2\2\u04a9\u04aa\5\u00be`\2\u04aa\u04ab\7\26")
        buf.write("\2\2\u04ab\u04ac\5D#\2\u04acQ\3\2\2\2\u04ad\u04af\5\u00cc")
        buf.write("g\2\u04ae\u04ad\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b0")
        buf.write("\3\2\2\2\u04b0\u04b1\5\u00be`\2\u04b1\u04b2\7\26\2\2\u04b2")
        buf.write("\u04b3\5\b\5\2\u04b3S\3\2\2\2\u04b4\u04b5\5\u00be`\2\u04b5")
        buf.write("\u04b6\7\t\2\2\u04b6\u04b7\5V,\2\u04b7U\3\2\2\2\u04b8")
        buf.write("\u04c5\5\u00d6l\2\u04b9\u04ba\7\u00d0\2\2\u04ba\u04bb")
        buf.write("\7\3\2\2\u04bb\u04bc\5\u00d6l\2\u04bc\u04bd\7\23\2\2\u04bd")
        buf.write("\u04c0\5\u00d8m\2\u04be\u04bf\7\23\2\2\u04bf\u04c1\7\u00ea")
        buf.write("\2\2\u04c0\u04be\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u04c2")
        buf.write("\3\2\2\2\u04c2\u04c3\7\4\2\2\u04c3\u04c5\3\2\2\2\u04c4")
        buf.write("\u04b8\3\2\2\2\u04c4\u04b9\3\2\2\2\u04c5W\3\2\2\2\u04c6")
        buf.write("\u04cb\5\\/\2\u04c7\u04c8\7\23\2\2\u04c8\u04ca\5\\/\2")
        buf.write("\u04c9\u04c7\3\2\2\2\u04ca\u04cd\3\2\2\2\u04cb\u04c9\3")
        buf.write("\2\2\2\u04cb\u04cc\3\2\2\2\u04ccY\3\2\2\2\u04cd\u04cb")
        buf.write("\3\2\2\2\u04ce\u04d3\5\\/\2\u04cf\u04d0\7\23\2\2\u04d0")
        buf.write("\u04d2\5\\/\2\u04d1\u04cf\3\2\2\2\u04d2\u04d5\3\2\2\2")
        buf.write("\u04d3\u04d1\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04df\3")
        buf.write("\2\2\2\u04d5\u04d3\3\2\2\2\u04d6\u04d7\7\34\2\2\u04d7")
        buf.write("\u04dc\5\u00be`\2\u04d8\u04d9\7\23\2\2\u04d9\u04db\5\u00be")
        buf.write("`\2\u04da\u04d8\3\2\2\2\u04db\u04de\3\2\2\2\u04dc\u04da")
        buf.write("\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04e0\3\2\2\2\u04de")
        buf.write("\u04dc\3\2\2\2\u04df\u04d6\3\2\2\2\u04df\u04e0\3\2\2\2")
        buf.write("\u04e0[\3\2\2\2\u04e1\u04e4\5\6\4\2\u04e2\u04e3\7%\2\2")
        buf.write("\u04e3\u04e5\5\u00b8]\2\u04e4\u04e2\3\2\2\2\u04e4\u04e5")
        buf.write("\3\2\2\2\u04e5]\3\2\2\2\u04e6\u04e8\5\24\13\2\u04e7\u04e6")
        buf.write("\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04ec\3\2\2\2\u04e9")
        buf.write("\u04ed\5\26\f\2\u04ea\u04ed\5`\61\2\u04eb\u04ed\5\22\n")
        buf.write("\2\u04ec\u04e9\3\2\2\2\u04ec\u04ea\3\2\2\2\u04ec\u04eb")
        buf.write("\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ef\3\2\2\2\u04ee")
        buf.write("\u04f0\5\30\r\2\u04ef\u04ee\3\2\2\2\u04ef\u04f0\3\2\2")
        buf.write("\2\u04f0\u04f2\3\2\2\2\u04f1\u04f3\5\20\t\2\u04f2\u04f1")
        buf.write("\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3_\3\2\2\2\u04f4\u04f5")
        buf.write("\7\u00c4\2\2\u04f5\u04f6\5\6\4\2\u04f6a\3\2\2\2\u04f7")
        buf.write("\u04f8\7\u0092\2\2\u04f8\u04f9\7B\2\2\u04f9\u04fe\5\u00be")
        buf.write("`\2\u04fa\u04fb\7\23\2\2\u04fb\u04fd\5\u00be`\2\u04fc")
        buf.write("\u04fa\3\2\2\2\u04fd\u0500\3\2\2\2\u04fe\u04fc\3\2\2\2")
        buf.write("\u04fe\u04ff\3\2\2\2\u04ffc\3\2\2\2\u0500\u04fe\3\2\2")
        buf.write("\2\u0501\u0502\7A\2\2\u0502\u0503\7B\2\2\u0503\u0508\5")
        buf.write("f\64\2\u0504\u0505\7\23\2\2\u0505\u0507\5f\64\2\u0506")
        buf.write("\u0504\3\2\2\2\u0507\u050a\3\2\2\2\u0508\u0506\3\2\2\2")
        buf.write("\u0508\u0509\3\2\2\2\u0509e\3\2\2\2\u050a\u0508\3\2\2")
        buf.write("\2\u050b\u050d\5\u00be`\2\u050c\u050e\t\30\2\2\u050d\u050c")
        buf.write("\3\2\2\2\u050d\u050e\3\2\2\2\u050eg\3\2\2\2\u050f\u0510")
        buf.write("\7m\2\2\u0510\u0513\7\u00b2\2\2\u0511\u0513\7\u0094\2")
        buf.write("\2\u0512\u050f\3\2\2\2\u0512\u0511\3\2\2\2\u0513\u0514")
        buf.write("\3\2\2\2\u0514\u0515\7*\2\2\u0515\u0516\5l\67\2\u0516")
        buf.write("\u0517\7&\2\2\u0517\u0518\5l\67\2\u0518i\3\2\2\2\u0519")
        buf.write("\u051a\7\u00e7\2\2\u051ak\3\2\2\2\u051b\u051c\7\u00e7")
        buf.write("\2\2\u051c\u0527\7\u008f\2\2\u051d\u051e\7\u00e7\2\2\u051e")
        buf.write("\u0527\7\u0090\2\2\u051f\u0520\7\u0095\2\2\u0520\u0521")
        buf.write("\7m\2\2\u0521\u0527\7\u00b3\2\2\u0522\u0523\7\u0091\2")
        buf.write("\2\u0523\u0527\7\u008f\2\2\u0524\u0525\7\u0091\2\2\u0525")
        buf.write("\u0527\7\u0090\2\2\u0526\u051b\3\2\2\2\u0526\u051d\3\2")
        buf.write("\2\2\u0526\u051f\3\2\2\2\u0526\u0522\3\2\2\2\u0526\u0524")
        buf.write("\3\2\2\2\u0527m\3\2\2\2\u0528\u0529\7\u0086\2\2\u0529")
        buf.write("\u052a\t\31\2\2\u052a\u052f\5\u00be`\2\u052b\u052c\7\23")
        buf.write("\2\2\u052c\u052e\5\u00be`\2\u052d\u052b\3\2\2\2\u052e")
        buf.write("\u0531\3\2\2\2\u052f\u052d\3\2\2\2\u052f\u0530\3\2\2\2")
        buf.write("\u0530\u0536\3\2\2\2\u0531\u052f\3\2\2\2\u0532\u0533\7")
        buf.write("\u0086\2\2\u0533\u0534\7>\2\2\u0534\u0536\5\b\5\2\u0535")
        buf.write("\u0528\3\2\2\2\u0535\u0532\3\2\2\2\u0536o\3\2\2\2\u0537")
        buf.write("\u0538\7\u0088\2\2\u0538\u0539\5\b\5\2\u0539q\3\2\2\2")
        buf.write("\u053a\u053b\5\u00ba^\2\u053b\u053e\5x=\2\u053c\u053d")
        buf.write("\7\u00d3\2\2\u053d\u053f\5V,\2\u053e\u053c\3\2\2\2\u053e")
        buf.write("\u053f\3\2\2\2\u053fs\3\2\2\2\u0540\u0544\5|?\2\u0541")
        buf.write("\u0544\5\u0080A\2\u0542\u0544\5~@\2\u0543\u0540\3\2\2")
        buf.write("\2\u0543\u0541\3\2\2\2\u0543\u0542\3\2\2\2\u0544u\3\2")
        buf.write("\2\2\u0545\u0548\5~@\2\u0546\u0548\5|?\2\u0547\u0545\3")
        buf.write("\2\2\2\u0547\u0546\3\2\2\2\u0548w\3\2\2\2\u0549\u054f")
        buf.write("\5|?\2\u054a\u054f\5\u0080A\2\u054b\u054f\5\u0084C\2\u054c")
        buf.write("\u054f\5z>\2\u054d\u054f\5~@\2\u054e\u0549\3\2\2\2\u054e")
        buf.write("\u054a\3\2\2\2\u054e\u054b\3\2\2\2\u054e\u054c\3\2\2\2")
        buf.write("\u054e\u054d\3\2\2\2\u054fy\3\2\2\2\u0550\u0554\7u\2\2")
        buf.write("\u0551\u0554\5\u0086D\2\u0552\u0554\5\u0088E\2\u0553\u0550")
        buf.write("\3\2\2\2\u0553\u0551\3\2\2\2\u0553\u0552\3\2\2\2\u0554")
        buf.write("{\3\2\2\2\u0555\u0558\5\u00d8m\2\u0556\u0558\5\u008aF")
        buf.write("\2\u0557\u0555\3\2\2\2\u0557\u0556\3\2\2\2\u0558\u055a")
        buf.write("\3\2\2\2\u0559\u055b\5\u00a4S\2\u055a\u0559\3\2\2\2\u055a")
        buf.write("\u055b\3\2\2\2\u055b\u0560\3\2\2\2\u055c\u055e\7)\2\2")
        buf.write("\u055d\u055c\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u055f\3")
        buf.write("\2\2\2\u055f\u0561\7-\2\2\u0560\u055d\3\2\2\2\u0560\u0561")
        buf.write("\3\2\2\2\u0561}\3\2\2\2\u0562\u0567\5\u00ccg\2\u0563\u0564")
        buf.write("\7\n\2\2\u0564\u0565\5|?\2\u0565\u0566\7\13\2\2\u0566")
        buf.write("\u0568\3\2\2\2\u0567\u0563\3\2\2\2\u0567\u0568\3\2\2\2")
        buf.write("\u0568\177\3\2\2\2\u0569\u0575\7o\2\2\u056a\u056b\7\7")
        buf.write("\2\2\u056b\u0570\5\u00a6T\2\u056c\u056d\7\23\2\2\u056d")
        buf.write("\u056f\5\u00a6T\2\u056e\u056c\3\2\2\2\u056f\u0572\3\2")
        buf.write("\2\2\u0570\u056e\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0573")
        buf.write("\3\2\2\2\u0572\u0570\3\2\2\2\u0573\u0574\7\b\2\2\u0574")
        buf.write("\u0576\3\2\2\2\u0575\u056a\3\2\2\2\u0575\u0576\3\2\2\2")
        buf.write("\u0576\u0081\3\2\2\2\u0577\u057a\5\u0080A\2\u0578\u057a")
        buf.write("\5|?\2\u0579\u0577\3\2\2\2\u0579\u0578\3\2\2\2\u057a\u0083")
        buf.write("\3\2\2\2\u057b\u0580\7\u00e5\2\2\u057c\u057d\7\n\2\2\u057d")
        buf.write("\u057e\5|?\2\u057e\u057f\7\13\2\2\u057f\u0581\3\2\2\2")
        buf.write("\u0580\u057c\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0085\3")
        buf.write("\2\2\2\u0582\u05a0\7s\2\2\u0583\u058f\7\u00e1\2\2\u0584")
        buf.write("\u0585\7\7\2\2\u0585\u058a\5\u008aF\2\u0586\u0587\7\21")
        buf.write("\2\2\u0587\u0589\5\u008aF\2\u0588\u0586\3\2\2\2\u0589")
        buf.write("\u058c\3\2\2\2\u058a\u0588\3\2\2\2\u058a\u058b\3\2\2\2")
        buf.write("\u058b\u058d\3\2\2\2\u058c\u058a\3\2\2\2\u058d\u058e\7")
        buf.write("\b\2\2\u058e\u0590\3\2\2\2\u058f\u0584\3\2\2\2\u058f\u0590")
        buf.write("\3\2\2\2\u0590\u05a0\3\2\2\2\u0591\u059d\7\u00e2\2\2\u0592")
        buf.write("\u0593\7\7\2\2\u0593\u0598\5\u00ba^\2\u0594\u0595\7\21")
        buf.write("\2\2\u0595\u0597\5\u00ba^\2\u0596\u0594\3\2\2\2\u0597")
        buf.write("\u059a\3\2\2\2\u0598\u0596\3\2\2\2\u0598\u0599\3\2\2\2")
        buf.write("\u0599\u059b\3\2\2\2\u059a\u0598\3\2\2\2\u059b\u059c\7")
        buf.write("\b\2\2\u059c\u059e\3\2\2\2\u059d\u0592\3\2\2\2\u059d\u059e")
        buf.write("\3\2\2\2\u059e\u05a0\3\2\2\2\u059f\u0582\3\2\2\2\u059f")
        buf.write("\u0583\3\2\2\2\u059f\u0591\3\2\2\2\u05a0\u0087\3\2\2\2")
        buf.write("\u05a1\u05ca\7t\2\2\u05a2\u05b3\7\u00e3\2\2\u05a3\u05a4")
        buf.write("\7\7\2\2\u05a4\u05b0\7\u00eb\2\2\u05a5\u05a6\7\3\2\2\u05a6")
        buf.write("\u05ab\5\u008aF\2\u05a7\u05a8\7\21\2\2\u05a8\u05aa\5\u008a")
        buf.write("F\2\u05a9\u05a7\3\2\2\2\u05aa\u05ad\3\2\2\2\u05ab\u05a9")
        buf.write("\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05ae\3\2\2\2\u05ad")
        buf.write("\u05ab\3\2\2\2\u05ae\u05af\7\4\2\2\u05af\u05b1\3\2\2\2")
        buf.write("\u05b0\u05a5\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u05b2\3")
        buf.write("\2\2\2\u05b2\u05b4\7\b\2\2\u05b3\u05a3\3\2\2\2\u05b3\u05b4")
        buf.write("\3\2\2\2\u05b4\u05ca\3\2\2\2\u05b5\u05c7\7\u00e4\2\2\u05b6")
        buf.write("\u05b7\7\7\2\2\u05b7\u05c3\5\u00ba^\2\u05b8\u05b9\7\3")
        buf.write("\2\2\u05b9\u05be\5\u00ba^\2\u05ba\u05bb\7\21\2\2\u05bb")
        buf.write("\u05bd\5\u00ba^\2\u05bc\u05ba\3\2\2\2\u05bd\u05c0\3\2")
        buf.write("\2\2\u05be\u05bc\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf\u05c1")
        buf.write("\3\2\2\2\u05c0\u05be\3\2\2\2\u05c1\u05c2\7\4\2\2\u05c2")
        buf.write("\u05c4\3\2\2\2\u05c3\u05b8\3\2\2\2\u05c3\u05c4\3\2\2\2")
        buf.write("\u05c4\u05c5\3\2\2\2\u05c5\u05c6\7\b\2\2\u05c6\u05c8\3")
        buf.write("\2\2\2\u05c7\u05b6\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05ca")
        buf.write("\3\2\2\2\u05c9\u05a1\3\2\2\2\u05c9\u05a2\3\2\2\2\u05c9")
        buf.write("\u05b5\3\2\2\2\u05ca\u0089\3\2\2\2\u05cb\u05cc\7\u00eb")
        buf.write("\2\2\u05cc\u008b\3\2\2\2\u05cd\u05ce\7\u00eb\2\2\u05ce")
        buf.write("\u008d\3\2\2\2\u05cf\u05d0\t\32\2\2\u05d0\u05d5\5\u0090")
        buf.write("I\2\u05d1\u05d2\7\23\2\2\u05d2\u05d4\5\u0090I\2\u05d3")
        buf.write("\u05d1\3\2\2\2\u05d4\u05d7\3\2\2\2\u05d5\u05d3\3\2\2\2")
        buf.write("\u05d5\u05d6\3\2\2\2\u05d6\u008f\3\2\2\2\u05d7\u05d5\3")
        buf.write("\2\2\2\u05d8\u05db\5\u00ba^\2\u05d9\u05da\7%\2\2\u05da")
        buf.write("\u05dc\5\u00b8]\2\u05db\u05d9\3\2\2\2\u05db\u05dc\3\2")
        buf.write("\2\2\u05dc\u0091\3\2\2\2\u05dd\u05e2\5\u0094K\2\u05de")
        buf.write("\u05df\7\u00ed\2\2\u05df\u05e1\5\u0094K\2\u05e0\u05de")
        buf.write("\3\2\2\2\u05e1\u05e4\3\2\2\2\u05e2\u05e0\3\2\2\2\u05e2")
        buf.write("\u05e3\3\2\2\2\u05e3\u0093\3\2\2\2\u05e4\u05e2\3\2\2\2")
        buf.write("\u05e5\u05e6\7\u00eb\2\2\u05e6\u05e8\7\25\2\2\u05e7\u05e5")
        buf.write("\3\2\2\2\u05e7\u05e8\3\2\2\2\u05e8\u05ed\3\2\2\2\u05e9")
        buf.write("\u05ea\7\u00af\2\2\u05ea\u05eb\5\b\5\2\u05eb\u05ec\7\32")
        buf.write("\2\2\u05ec\u05ee\3\2\2\2\u05ed\u05e9\3\2\2\2\u05ed\u05ee")
        buf.write("\3\2\2\2\u05ee\u05ef\3\2\2\2\u05ef\u05f1\5\b\5\2\u05f0")
        buf.write("\u05f2\5\u00c2b\2\u05f1\u05f0\3\2\2\2\u05f1\u05f2\3\2")
        buf.write("\2\2\u05f2\u05f4\3\2\2\2\u05f3\u05f5\5\u00c4c\2\u05f4")
        buf.write("\u05f3\3\2\2\2\u05f4\u05f5\3\2\2\2\u05f5\u0095\3\2\2\2")
        buf.write("\u05f6\u05fb\5\u0098M\2\u05f7\u05f8\7\u00ed\2\2\u05f8")
        buf.write("\u05fa\5\u0098M\2\u05f9\u05f7\3\2\2\2\u05fa\u05fd\3\2")
        buf.write("\2\2\u05fb\u05f9\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fc\u0097")
        buf.write("\3\2\2\2\u05fd\u05fb\3\2\2\2\u05fe\u05ff\7\u00eb\2\2\u05ff")
        buf.write("\u0601\7\25\2\2\u0600\u05fe\3\2\2\2\u0600\u0601\3\2\2")
        buf.write("\2\u0601\u0602\3\2\2\2\u0602\u0604\5\u009eP\2\u0603\u0605")
        buf.write("\5\u00c2b\2\u0604\u0603\3\2\2\2\u0604\u0605\3\2\2\2\u0605")
        buf.write("\u0607\3\2\2\2\u0606\u0608\5\u00c4c\2\u0607\u0606\3\2")
        buf.write("\2\2\u0607\u0608\3\2\2\2\u0608\u0099\3\2\2\2\u0609\u060c")
        buf.write("\t\32\2\2\u060a\u060b\7\u009d\2\2\u060b\u060d\5\u009c")
        buf.write("O\2\u060c\u060a\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u060e")
        buf.write("\3\2\2\2\u060e\u060f\7v\2\2\u060f\u0610\7\u00eb\2\2\u0610")
        buf.write("\u009b\3\2\2\2\u0611\u0616\5\u0090I\2\u0612\u0613\7\23")
        buf.write("\2\2\u0613\u0615\5\u0090I\2\u0614\u0612\3\2\2\2\u0615")
        buf.write("\u0618\3\2\2\2\u0616\u0614\3\2\2\2\u0616\u0617\3\2\2\2")
        buf.write("\u0617\u009d\3\2\2\2\u0618\u0616\3\2\2\2\u0619\u061a\7")
        buf.write("\u00af\2\2\u061a\u061b\5\b\5\2\u061b\u061c\7\32\2\2\u061c")
        buf.write("\u061e\3\2\2\2\u061d\u0619\3\2\2\2\u061d\u061e\3\2\2\2")
        buf.write("\u061e\u061f\3\2\2\2\u061f\u0621\5\u00a2R\2\u0620\u0622")
        buf.write("\5\u00c6d\2\u0621\u0620\3\2\2\2\u0621\u0622\3\2\2\2\u0622")
        buf.write("\u0623\3\2\2\2\u0623\u0627\5\u00a0Q\2\u0624\u0626\5\u00a0")
        buf.write("Q\2\u0625\u0624\3\2\2\2\u0626\u0629\3\2\2\2\u0627\u0625")
        buf.write("\3\2\2\2\u0627\u0628\3\2\2\2\u0628\u009f\3\2\2\2\u0629")
        buf.write("\u0627\3\2\2\2\u062a\u062c\t\33\2\2\u062b\u062a\3\2\2")
        buf.write("\2\u062b\u062c\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u0632")
        buf.write("\5\u00a2R\2\u062e\u062f\7\5\2\2\u062f\u0630\5\b\5\2\u0630")
        buf.write("\u0631\7\6\2\2\u0631\u0633\3\2\2\2\u0632\u062e\3\2\2\2")
        buf.write("\u0632\u0633\3\2\2\2\u0633\u00a1\3\2\2\2\u0634\u0635\t")
        buf.write("\34\2\2\u0635\u00a3\3\2\2\2\u0636\u0637\7\5\2\2\u0637")
        buf.write("\u0638\5\b\5\2\u0638\u0639\7\6\2\2\u0639\u0646\3\2\2\2")
        buf.write("\u063a\u063b\7\7\2\2\u063b\u0640\5V,\2\u063c\u063d\7\23")
        buf.write("\2\2\u063d\u063f\5V,\2\u063e\u063c\3\2\2\2\u063f\u0642")
        buf.write("\3\2\2\2\u0640\u063e\3\2\2\2\u0640\u0641\3\2\2\2\u0641")
        buf.write("\u0643\3\2\2\2\u0642\u0640\3\2\2\2\u0643\u0644\7\b\2\2")
        buf.write("\u0644\u0646\3\2\2\2\u0645\u0636\3\2\2\2\u0645\u063a\3")
        buf.write("\2\2\2\u0646\u00a5\3\2\2\2\u0647\u064a\5~@\2\u0648\u064b")
        buf.write("\5\u00be`\2\u0649\u064b\5\u00a8U\2\u064a\u0648\3\2\2\2")
        buf.write("\u064a\u0649\3\2\2\2\u064b\u00a7\3\2\2\2\u064c\u064e\7")
        buf.write("i\2\2\u064d\u064f\t\35\2\2\u064e\u064d\3\2\2\2\u064e\u064f")
        buf.write("\3\2\2\2\u064f\u00a9\3\2\2\2\u0650\u0651\t\36\2\2\u0651")
        buf.write("\u00ab\3\2\2\2\u0652\u0653\t\37\2\2\u0653\u00ad\3\2\2")
        buf.write("\2\u0654\u0655\7\u009d\2\2\u0655\u065a\5\u00be`\2\u0656")
        buf.write("\u0657\7\23\2\2\u0657\u0659\5\u00be`\2\u0658\u0656\3\2")
        buf.write("\2\2\u0659\u065c\3\2\2\2\u065a\u0658\3\2\2\2\u065a\u065b")
        buf.write("\3\2\2\2\u065b\u00af\3\2\2\2\u065c\u065a\3\2\2\2\u065d")
        buf.write("\u065e\t \2\2\u065e\u00b1\3\2\2\2\u065f\u0660\7<\2\2\u0660")
        buf.write("\u0661\5\6\4\2\u0661\u00b3\3\2\2\2\u0662\u0663\t!\2\2")
        buf.write('\u0663\u00b5\3\2\2\2\u0664\u0665\t"\2\2\u0665\u00b7\3')
        buf.write("\2\2\2\u0666\u0667\7\u00eb\2\2\u0667\u00b9\3\2\2\2\u0668")
        buf.write("\u0669\7\u00eb\2\2\u0669\u00bb\3\2\2\2\u066a\u066b\7\u00eb")
        buf.write("\2\2\u066b\u00bd\3\2\2\2\u066c\u066f\7\u00eb\2\2\u066d")
        buf.write("\u066e\7\27\2\2\u066e\u0670\7\u00eb\2\2\u066f\u066d\3")
        buf.write("\2\2\2\u066f\u0670\3\2\2\2\u0670\u00bf\3\2\2\2\u0671\u0672")
        buf.write("\7\7\2\2\u0672\u0677\5V,\2\u0673\u0674\7\23\2\2\u0674")
        buf.write("\u0676\5V,\2\u0675\u0673\3\2\2\2\u0676\u0679\3\2\2\2\u0677")
        buf.write("\u0675\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u067a\3\2\2\2")
        buf.write("\u0679\u0677\3\2\2\2\u067a\u067b\7\b\2\2\u067b\u00c1\3")
        buf.write("\2\2\2\u067c\u067d\7=\2\2\u067d\u067e\5\u00d6l\2\u067e")
        buf.write("\u00c3\3\2\2\2\u067f\u0680\7@\2\2\u0680\u0681\5\u00d6")
        buf.write("l\2\u0681\u00c5\3\2\2\2\u0682\u0683\t#\2\2\u0683\u00c7")
        buf.write("\3\2\2\2\u0684\u0687\5\6\4\2\u0685\u0687\7i\2\2\u0686")
        buf.write("\u0684\3\2\2\2\u0686\u0685\3\2\2\2\u0687\u00c9\3\2\2\2")
        buf.write("\u0688\u068b\5\b\5\2\u0689\u068b\7i\2\2\u068a\u0688\3")
        buf.write("\2\2\2\u068a\u0689\3\2\2\2\u068b\u00cb\3\2\2\2\u068c\u0692")
        buf.write("\7^\2\2\u068d\u0692\7\u00e0\2\2\u068e\u0692\7]\2\2\u068f")
        buf.write("\u0692\7_\2\2\u0690\u0692\5\u00ceh\2\u0691\u068c\3\2\2")
        buf.write("\2\u0691\u068d\3\2\2\2\u0691\u068e\3\2\2\2\u0691\u068f")
        buf.write("\3\2\2\2\u0691\u0690\3\2\2\2\u0692\u00cd\3\2\2\2\u0693")
        buf.write("\u0694\7d\2\2\u0694\u0695\7_\2\2\u0695\u00cf\3\2\2\2\u0696")
        buf.write("\u0697\7\u00eb\2\2\u0697\u00d1\3\2\2\2\u0698\u0699\7\u00eb")
        buf.write("\2\2\u0699\u00d3\3\2\2\2\u069a\u069b\7\u00eb\2\2\u069b")
        buf.write("\u00d5\3\2\2\2\u069c\u069d\t$\2\2\u069d\u00d7\3\2\2\2")
        buf.write("\u069e\u069f\t%\2\2\u069f\u00d9\3\2\2\2\u06a0\u06a1\t")
        buf.write("&\2\2\u06a1\u00db\3\2\2\2\u00c1\u00e1\u00ef\u0102\u0120")
        buf.write("\u0122\u0124\u0138\u014e\u0150\u0152\u015d\u016b\u0174")
        buf.write("\u017c\u0183\u0185\u0190\u0199\u01a7\u01b6\u01c1\u01c4")
        buf.write("\u01c9\u01ea\u01f3\u01f6\u0200\u0205\u0209\u020f\u0213")
        buf.write("\u021d\u0221\u0225\u022e\u0231\u023b\u023f\u0249\u024e")
        buf.write("\u0252\u0258\u025c\u0260\u0264\u0268\u0278\u027c\u0287")
        buf.write("\u0292\u0296\u029a\u02aa\u02ae\u02b9\u02c4\u02c8\u02cc")
        buf.write("\u02d8\u02e3\u02ef\u02fa\u0318\u031c\u0333\u0338\u0340")
        buf.write("\u0355\u0359\u035d\u0363\u0368\u0370\u0385\u0389\u038d")
        buf.write("\u0393\u039c\u03a7\u03b2\u03ba\u03be\u03c1\u03c4\u03c7")
        buf.write("\u03d6\u03d9\u03dc\u03e6\u03ea\u03ed\u03f0\u03f3\u03fb")
        buf.write("\u03fe\u0401\u0404\u0408\u0420\u0427\u0429\u0433\u0436")
        buf.write("\u0439\u0445\u0447\u044c\u045c\u0464\u0467\u046a\u0475")
        buf.write("\u0477\u047c\u0488\u0498\u04a3\u04a7\u04ae\u04c0\u04c4")
        buf.write("\u04cb\u04d3\u04dc\u04df\u04e4\u04e7\u04ec\u04ef\u04f2")
        buf.write("\u04fe\u0508\u050d\u0512\u0526\u052f\u0535\u053e\u0543")
        buf.write("\u0547\u054e\u0553\u0557\u055a\u055d\u0560\u0567\u0570")
        buf.write("\u0575\u0579\u0580\u058a\u058f\u0598\u059d\u059f\u05ab")
        buf.write("\u05b0\u05b3\u05be\u05c3\u05c7\u05c9\u05d5\u05db\u05e2")
        buf.write("\u05e7\u05ed\u05f1\u05f4\u05fb\u0600\u0604\u0607\u060c")
        buf.write("\u0616\u061d\u0621\u0627\u062b\u0632\u0640\u0645\u064a")
        buf.write("\u064e\u065a\u066f\u0677\u0686\u068a\u0691")
        return buf.getvalue()


class Parser(Parser):
    grammarFileName = "Vtl.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'('",
        "')'",
        "'['",
        "']'",
        "'{'",
        "'}'",
        "'='",
        "'<'",
        "'>'",
        "'>='",
        "'<>'",
        "'<='",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "','",
        "'->'",
        "':'",
        "':='",
        "'#'",
        "'eval'",
        "'if'",
        "'then'",
        "'else'",
        "'using'",
        "'with'",
        "'current_date'",
        "'on'",
        "'drop'",
        "'keep'",
        "'calc'",
        "'attrcalc'",
        "'rename'",
        "'as'",
        "'and'",
        "'or'",
        "'xor'",
        "'not'",
        "'between'",
        "'in'",
        "'not_in'",
        "'null'",
        "'isnull'",
        "'ex'",
        "'union'",
        "'diff'",
        "'symdiff'",
        "'intersect'",
        "'keys'",
        "'intyear'",
        "'intmonth'",
        "'intday'",
        "'check'",
        "'exists_in'",
        "'to'",
        "'return'",
        "'imbalance'",
        "'errorcode'",
        "'all'",
        "'aggr'",
        "'errorlevel'",
        "'order'",
        "'by'",
        "'rank'",
        "'asc'",
        "'desc'",
        "'min'",
        "'max'",
        "'first'",
        "'last'",
        "'indexof'",
        "'abs'",
        "'key'",
        "'ln'",
        "'log'",
        "'trunc'",
        "'round'",
        "'power'",
        "'mod'",
        "'length'",
        "'||'",
        "'trim'",
        "'upper'",
        "'lower'",
        "'substr'",
        "'sum'",
        "'avg'",
        "'median'",
        "'count'",
        "'identifier'",
        "'measure'",
        "'attribute'",
        "'filter'",
        "'merge'",
        "'exp'",
        "'componentRole'",
        "'viral'",
        "'match_characters'",
        "'type'",
        "'nvl'",
        "'hierarchy'",
        "'_'",
        "'invalid'",
        "'valuedomain'",
        "'variable'",
        "'data'",
        "'structure'",
        "'dataset'",
        "'operator'",
        "'define'",
        "'<-'",
        "'datapoint'",
        "'hierarchical'",
        "'ruleset'",
        "'rule'",
        "'end'",
        "'alterDataset'",
        "'ltrim'",
        "'rtrim'",
        "'instr'",
        "'replace'",
        "'ceil'",
        "'floor'",
        "'sqrt'",
        "'any'",
        "'setdiff'",
        "'stddev_pop'",
        "'stddev_samp'",
        "'var_pop'",
        "'var_samp'",
        "'group'",
        "'except'",
        "'having'",
        "'first_value'",
        "'last_value'",
        "'lag'",
        "'lead'",
        "'ratio_to_report'",
        "'over'",
        "'preceding'",
        "'following'",
        "'unbounded'",
        "'partition'",
        "'rows'",
        "'range'",
        "'current'",
        "'valid'",
        "'fill_time_series'",
        "'flow_to_stock'",
        "'stock_to_flow'",
        "'timeshift'",
        "'measures'",
        "'no_measures'",
        "'condition'",
        "'boolean'",
        "'date'",
        "'time_period'",
        "'number'",
        "'string'",
        "'time'",
        "'integer'",
        "'float'",
        "'list'",
        "'record'",
        "'restrict'",
        "'yyyy'",
        "'mm'",
        "'dd'",
        "'maxLength'",
        "'regexp'",
        "'is'",
        "'when'",
        "'from'",
        "'aggregates'",
        "'points'",
        "'point'",
        "'total'",
        "'partial'",
        "'always'",
        "'inner_join'",
        "'left_join'",
        "'cross_join'",
        "'full_join'",
        "'maps_from'",
        "'maps_to'",
        "'map_to'",
        "'map_from'",
        "'returns'",
        "'pivot'",
        "'customPivot'",
        "'unpivot'",
        "'sub'",
        "'apply'",
        "'conditioned'",
        "'period_indicator'",
        "'single'",
        "'duration'",
        "'time_agg'",
        "'unit'",
        "'Value'",
        "'valuedomains'",
        "'variables'",
        "'input'",
        "'output'",
        "'cast'",
        "'rule_priority'",
        "'dataset_priority'",
        "'default'",
        "'check_datapoint'",
        "'check_hierarchy'",
        "'computed'",
        "'non_null'",
        "'non_zero'",
        "'partial_null'",
        "'partial_zero'",
        "'always_null'",
        "'always_zero'",
        "'components'",
        "'all_measures'",
        "'scalar'",
        "'component'",
        "'datapoint_on_valuedomains'",
        "'datapoint_on_variables'",
        "'hierarchical_on_valuedomains'",
        "'hierarchical_on_variables'",
        "'set'",
        "'language'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "';'",
    ]

    symbolicNames = [
        "<INVALID>",
        "LPAREN",
        "RPAREN",
        "QLPAREN",
        "QRPAREN",
        "GLPAREN",
        "GRPAREN",
        "EQ",
        "LT",
        "MT",
        "ME",
        "NEQ",
        "LE",
        "PLUS",
        "MINUS",
        "MUL",
        "DIV",
        "COMMA",
        "POINTER",
        "COLON",
        "ASSIGN",
        "MEMBERSHIP",
        "EVAL",
        "IF",
        "THEN",
        "ELSE",
        "USING",
        "WITH",
        "CURRENT_DATE",
        "ON",
        "DROP",
        "KEEP",
        "CALC",
        "ATTRCALC",
        "RENAME",
        "AS",
        "AND",
        "OR",
        "XOR",
        "NOT",
        "BETWEEN",
        "IN",
        "NOT_IN",
        "NULL_CONSTANT",
        "ISNULL",
        "EX",
        "UNION",
        "DIFF",
        "SYMDIFF",
        "INTERSECT",
        "KEYS",
        "INTYEAR",
        "INTMONTH",
        "INTDAY",
        "CHECK",
        "EXISTS_IN",
        "TO",
        "RETURN",
        "IMBALANCE",
        "ERRORCODE",
        "ALL",
        "AGGREGATE",
        "ERRORLEVEL",
        "ORDER",
        "BY",
        "RANK",
        "ASC",
        "DESC",
        "MIN",
        "MAX",
        "FIRST",
        "LAST",
        "INDEXOF",
        "ABS",
        "KEY",
        "LN",
        "LOG",
        "TRUNC",
        "ROUND",
        "POWER",
        "MOD",
        "LEN",
        "CONCAT",
        "TRIM",
        "UCASE",
        "LCASE",
        "SUBSTR",
        "SUM",
        "AVG",
        "MEDIAN",
        "COUNT",
        "DIMENSION",
        "MEASURE",
        "ATTRIBUTE",
        "FILTER",
        "MERGE",
        "EXP",
        "ROLE",
        "VIRAL",
        "CHARSET_MATCH",
        "TYPE",
        "NVL",
        "HIERARCHY",
        "OPTIONAL",
        "INVALID",
        "VALUE_DOMAIN",
        "VARIABLE",
        "DATA",
        "STRUCTURE",
        "DATASET",
        "OPERATOR",
        "DEFINE",
        "PUT_SYMBOL",
        "DATAPOINT",
        "HIERARCHICAL",
        "RULESET",
        "RULE",
        "END",
        "ALTER_DATASET",
        "LTRIM",
        "RTRIM",
        "INSTR",
        "REPLACE",
        "CEIL",
        "FLOOR",
        "SQRT",
        "ANY",
        "SETDIFF",
        "STDDEV_POP",
        "STDDEV_SAMP",
        "VAR_POP",
        "VAR_SAMP",
        "GROUP",
        "EXCEPT",
        "HAVING",
        "FIRST_VALUE",
        "LAST_VALUE",
        "LAG",
        "LEAD",
        "RATIO_TO_REPORT",
        "OVER",
        "PRECEDING",
        "FOLLOWING",
        "UNBOUNDED",
        "PARTITION",
        "ROWS",
        "RANGE",
        "CURRENT",
        "VALID",
        "FILL_TIME_SERIES",
        "FLOW_TO_STOCK",
        "STOCK_TO_FLOW",
        "TIMESHIFT",
        "MEASURES",
        "NO_MEASURES",
        "CONDITION",
        "BOOLEAN",
        "DATE",
        "TIME_PERIOD",
        "NUMBER",
        "STRING",
        "TIME",
        "INTEGER",
        "FLOAT",
        "LIST",
        "RECORD",
        "RESTRICT",
        "YYYY",
        "MM",
        "DD",
        "MAX_LENGTH",
        "REGEXP",
        "IS",
        "WHEN",
        "FROM",
        "AGGREGATES",
        "POINTS",
        "POINT",
        "TOTAL",
        "PARTIAL",
        "ALWAYS",
        "INNER_JOIN",
        "LEFT_JOIN",
        "CROSS_JOIN",
        "FULL_JOIN",
        "MAPS_FROM",
        "MAPS_TO",
        "MAP_TO",
        "MAP_FROM",
        "RETURNS",
        "PIVOT",
        "CUSTOMPIVOT",
        "UNPIVOT",
        "SUBSPACE",
        "APPLY",
        "CONDITIONED",
        "PERIOD_INDICATOR",
        "SINGLE",
        "DURATION",
        "TIME_AGG",
        "UNIT",
        "VALUE",
        "VALUEDOMAINS",
        "VARIABLES",
        "INPUT",
        "OUTPUT",
        "CAST",
        "RULE_PRIORITY",
        "DATASET_PRIORITY",
        "DEFAULT",
        "CHECK_DATAPOINT",
        "CHECK_HIERARCHY",
        "COMPUTED",
        "NON_NULL",
        "NON_ZERO",
        "PARTIAL_NULL",
        "PARTIAL_ZERO",
        "ALWAYS_NULL",
        "ALWAYS_ZERO",
        "COMPONENTS",
        "ALL_MEASURES",
        "SCALAR",
        "COMPONENT",
        "DATAPOINT_ON_VD",
        "DATAPOINT_ON_VAR",
        "HIERARCHICAL_ON_VD",
        "HIERARCHICAL_ON_VAR",
        "SET",
        "LANGUAGE",
        "INTEGER_CONSTANT",
        "NUMBER_CONSTANT",
        "BOOLEAN_CONSTANT",
        "STRING_CONSTANT",
        "IDENTIFIER",
        "WS",
        "EOL",
        "ML_COMMENT",
        "SL_COMMENT",
    ]

    RULE_start = 0
    RULE_statement = 1
    RULE_expr = 2
    RULE_exprComponent = 3
    RULE_functionsComponents = 4
    RULE_functions = 5
    RULE_datasetClause = 6
    RULE_renameClause = 7
    RULE_aggrClause = 8
    RULE_filterClause = 9
    RULE_calcClause = 10
    RULE_keepOrDropClause = 11
    RULE_pivotOrUnpivotClause = 12
    RULE_subspaceClause = 13
    RULE_joinOperators = 14
    RULE_defOperators = 15
    RULE_genericOperators = 16
    RULE_genericOperatorsComponent = 17
    RULE_parameterComponent = 18
    RULE_parameter = 19
    RULE_stringOperators = 20
    RULE_stringOperatorsComponent = 21
    RULE_numericOperators = 22
    RULE_numericOperatorsComponent = 23
    RULE_comparisonOperators = 24
    RULE_comparisonOperatorsComponent = 25
    RULE_timeOperators = 26
    RULE_timeOperatorsComponent = 27
    RULE_setOperators = 28
    RULE_hierarchyOperators = 29
    RULE_validationOperators = 30
    RULE_conditionalOperators = 31
    RULE_conditionalOperatorsComponent = 32
    RULE_aggrOperators = 33
    RULE_aggrOperatorsGrouping = 34
    RULE_anFunction = 35
    RULE_anFunctionComponent = 36
    RULE_renameClauseItem = 37
    RULE_aggregateClause = 38
    RULE_aggrFunctionClause = 39
    RULE_calcClauseItem = 40
    RULE_subspaceClauseItem = 41
    RULE_scalarItem = 42
    RULE_joinClauseWithoutUsing = 43
    RULE_joinClause = 44
    RULE_joinClauseItem = 45
    RULE_joinBody = 46
    RULE_joinApplyClause = 47
    RULE_partitionByClause = 48
    RULE_orderByClause = 49
    RULE_orderByItem = 50
    RULE_windowingClause = 51
    RULE_signedInteger = 52
    RULE_limitClauseItem = 53
    RULE_groupingClause = 54
    RULE_havingClause = 55
    RULE_parameterItem = 56
    RULE_outputParameterType = 57
    RULE_outputParameterTypeComponent = 58
    RULE_inputParameterType = 59
    RULE_rulesetType = 60
    RULE_scalarType = 61
    RULE_componentType = 62
    RULE_datasetType = 63
    RULE_evalDatasetType = 64
    RULE_scalarSetType = 65
    RULE_dpRuleset = 66
    RULE_hrRuleset = 67
    RULE_valueDomainName = 68
    RULE_rulesetID = 69
    RULE_rulesetSignature = 70
    RULE_signature = 71
    RULE_ruleClauseDatapoint = 72
    RULE_ruleItemDatapoint = 73
    RULE_ruleClauseHierarchical = 74
    RULE_ruleItemHierarchical = 75
    RULE_hierRuleSignature = 76
    RULE_valueDomainSignature = 77
    RULE_codeItemRelation = 78
    RULE_codeItemRelationClause = 79
    RULE_valueDomainValue = 80
    RULE_scalarTypeConstraint = 81
    RULE_compConstraint = 82
    RULE_multModifier = 83
    RULE_validationOutput = 84
    RULE_validationMode = 85
    RULE_conditionClause = 86
    RULE_inputMode = 87
    RULE_imbalanceExpr = 88
    RULE_inputModeHierarchy = 89
    RULE_outputModeHierarchy = 90
    RULE_alias = 91
    RULE_varID = 92
    RULE_simpleComponentId = 93
    RULE_componentID = 94
    RULE_lists = 95
    RULE_erCode = 96
    RULE_erLevel = 97
    RULE_comparisonOperand = 98
    RULE_optionalExpr = 99
    RULE_optionalExprComponent = 100
    RULE_componentRole = 101
    RULE_viralAttribute = 102
    RULE_valueDomainID = 103
    RULE_operatorID = 104
    RULE_routineName = 105
    RULE_constant = 106
    RULE_basicScalarType = 107
    RULE_retainType = 108

    ruleNames = [
        "start",
        "statement",
        "expr",
        "exprComponent",
        "functionsComponents",
        "functions",
        "datasetClause",
        "renameClause",
        "aggrClause",
        "filterClause",
        "calcClause",
        "keepOrDropClause",
        "pivotOrUnpivotClause",
        "subspaceClause",
        "joinOperators",
        "defOperators",
        "genericOperators",
        "genericOperatorsComponent",
        "parameterComponent",
        "parameter",
        "stringOperators",
        "stringOperatorsComponent",
        "numericOperators",
        "numericOperatorsComponent",
        "comparisonOperators",
        "comparisonOperatorsComponent",
        "timeOperators",
        "timeOperatorsComponent",
        "setOperators",
        "hierarchyOperators",
        "validationOperators",
        "conditionalOperators",
        "conditionalOperatorsComponent",
        "aggrOperators",
        "aggrOperatorsGrouping",
        "anFunction",
        "anFunctionComponent",
        "renameClauseItem",
        "aggregateClause",
        "aggrFunctionClause",
        "calcClauseItem",
        "subspaceClauseItem",
        "scalarItem",
        "joinClauseWithoutUsing",
        "joinClause",
        "joinClauseItem",
        "joinBody",
        "joinApplyClause",
        "partitionByClause",
        "orderByClause",
        "orderByItem",
        "windowingClause",
        "signedInteger",
        "limitClauseItem",
        "groupingClause",
        "havingClause",
        "parameterItem",
        "outputParameterType",
        "outputParameterTypeComponent",
        "inputParameterType",
        "rulesetType",
        "scalarType",
        "componentType",
        "datasetType",
        "evalDatasetType",
        "scalarSetType",
        "dpRuleset",
        "hrRuleset",
        "valueDomainName",
        "rulesetID",
        "rulesetSignature",
        "signature",
        "ruleClauseDatapoint",
        "ruleItemDatapoint",
        "ruleClauseHierarchical",
        "ruleItemHierarchical",
        "hierRuleSignature",
        "valueDomainSignature",
        "codeItemRelation",
        "codeItemRelationClause",
        "valueDomainValue",
        "scalarTypeConstraint",
        "compConstraint",
        "multModifier",
        "validationOutput",
        "validationMode",
        "conditionClause",
        "inputMode",
        "imbalanceExpr",
        "inputModeHierarchy",
        "outputModeHierarchy",
        "alias",
        "varID",
        "simpleComponentId",
        "componentID",
        "lists",
        "erCode",
        "erLevel",
        "comparisonOperand",
        "optionalExpr",
        "optionalExprComponent",
        "componentRole",
        "viralAttribute",
        "valueDomainID",
        "operatorID",
        "routineName",
        "constant",
        "basicScalarType",
        "retainType",
    ]

    EOF = Token.EOF
    LPAREN = 1
    RPAREN = 2
    QLPAREN = 3
    QRPAREN = 4
    GLPAREN = 5
    GRPAREN = 6
    EQ = 7
    LT = 8
    MT = 9
    ME = 10
    NEQ = 11
    LE = 12
    PLUS = 13
    MINUS = 14
    MUL = 15
    DIV = 16
    COMMA = 17
    POINTER = 18
    COLON = 19
    ASSIGN = 20
    MEMBERSHIP = 21
    EVAL = 22
    IF = 23
    THEN = 24
    ELSE = 25
    USING = 26
    WITH = 27
    CURRENT_DATE = 28
    ON = 29
    DROP = 30
    KEEP = 31
    CALC = 32
    ATTRCALC = 33
    RENAME = 34
    AS = 35
    AND = 36
    OR = 37
    XOR = 38
    NOT = 39
    BETWEEN = 40
    IN = 41
    NOT_IN = 42
    NULL_CONSTANT = 43
    ISNULL = 44
    EX = 45
    UNION = 46
    DIFF = 47
    SYMDIFF = 48
    INTERSECT = 49
    KEYS = 50
    INTYEAR = 51
    INTMONTH = 52
    INTDAY = 53
    CHECK = 54
    EXISTS_IN = 55
    TO = 56
    RETURN = 57
    IMBALANCE = 58
    ERRORCODE = 59
    ALL = 60
    AGGREGATE = 61
    ERRORLEVEL = 62
    ORDER = 63
    BY = 64
    RANK = 65
    ASC = 66
    DESC = 67
    MIN = 68
    MAX = 69
    FIRST = 70
    LAST = 71
    INDEXOF = 72
    ABS = 73
    KEY = 74
    LN = 75
    LOG = 76
    TRUNC = 77
    ROUND = 78
    POWER = 79
    MOD = 80
    LEN = 81
    CONCAT = 82
    TRIM = 83
    UCASE = 84
    LCASE = 85
    SUBSTR = 86
    SUM = 87
    AVG = 88
    MEDIAN = 89
    COUNT = 90
    DIMENSION = 91
    MEASURE = 92
    ATTRIBUTE = 93
    FILTER = 94
    MERGE = 95
    EXP = 96
    ROLE = 97
    VIRAL = 98
    CHARSET_MATCH = 99
    TYPE = 100
    NVL = 101
    HIERARCHY = 102
    OPTIONAL = 103
    INVALID = 104
    VALUE_DOMAIN = 105
    VARIABLE = 106
    DATA = 107
    STRUCTURE = 108
    DATASET = 109
    OPERATOR = 110
    DEFINE = 111
    PUT_SYMBOL = 112
    DATAPOINT = 113
    HIERARCHICAL = 114
    RULESET = 115
    RULE = 116
    END = 117
    ALTER_DATASET = 118
    LTRIM = 119
    RTRIM = 120
    INSTR = 121
    REPLACE = 122
    CEIL = 123
    FLOOR = 124
    SQRT = 125
    ANY = 126
    SETDIFF = 127
    STDDEV_POP = 128
    STDDEV_SAMP = 129
    VAR_POP = 130
    VAR_SAMP = 131
    GROUP = 132
    EXCEPT = 133
    HAVING = 134
    FIRST_VALUE = 135
    LAST_VALUE = 136
    LAG = 137
    LEAD = 138
    RATIO_TO_REPORT = 139
    OVER = 140
    PRECEDING = 141
    FOLLOWING = 142
    UNBOUNDED = 143
    PARTITION = 144
    ROWS = 145
    RANGE = 146
    CURRENT = 147
    VALID = 148
    FILL_TIME_SERIES = 149
    FLOW_TO_STOCK = 150
    STOCK_TO_FLOW = 151
    TIMESHIFT = 152
    MEASURES = 153
    NO_MEASURES = 154
    CONDITION = 155
    BOOLEAN = 156
    DATE = 157
    TIME_PERIOD = 158
    NUMBER = 159
    STRING = 160
    TIME = 161
    INTEGER = 162
    FLOAT = 163
    LIST = 164
    RECORD = 165
    RESTRICT = 166
    YYYY = 167
    MM = 168
    DD = 169
    MAX_LENGTH = 170
    REGEXP = 171
    IS = 172
    WHEN = 173
    FROM = 174
    AGGREGATES = 175
    POINTS = 176
    POINT = 177
    TOTAL = 178
    PARTIAL = 179
    ALWAYS = 180
    INNER_JOIN = 181
    LEFT_JOIN = 182
    CROSS_JOIN = 183
    FULL_JOIN = 184
    MAPS_FROM = 185
    MAPS_TO = 186
    MAP_TO = 187
    MAP_FROM = 188
    RETURNS = 189
    PIVOT = 190
    CUSTOMPIVOT = 191
    UNPIVOT = 192
    SUBSPACE = 193
    APPLY = 194
    CONDITIONED = 195
    PERIOD_INDICATOR = 196
    SINGLE = 197
    DURATION = 198
    TIME_AGG = 199
    UNIT = 200
    VALUE = 201
    VALUEDOMAINS = 202
    VARIABLES = 203
    INPUT = 204
    OUTPUT = 205
    CAST = 206
    RULE_PRIORITY = 207
    DATASET_PRIORITY = 208
    DEFAULT = 209
    CHECK_DATAPOINT = 210
    CHECK_HIERARCHY = 211
    COMPUTED = 212
    NON_NULL = 213
    NON_ZERO = 214
    PARTIAL_NULL = 215
    PARTIAL_ZERO = 216
    ALWAYS_NULL = 217
    ALWAYS_ZERO = 218
    COMPONENTS = 219
    ALL_MEASURES = 220
    SCALAR = 221
    COMPONENT = 222
    DATAPOINT_ON_VD = 223
    DATAPOINT_ON_VAR = 224
    HIERARCHICAL_ON_VD = 225
    HIERARCHICAL_ON_VAR = 226
    SET = 227
    LANGUAGE = 228
    INTEGER_CONSTANT = 229
    NUMBER_CONSTANT = 230
    BOOLEAN_CONSTANT = 231
    STRING_CONSTANT = 232
    IDENTIFIER = 233
    WS = 234
    EOL = 235
    ML_COMMENT = 236
    SL_COMMENT = 237

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Parser.EOF, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Parser.StatementContext, i)

        def EOL(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.EOL)
            else:
                return self.getToken(Parser.EOL, i)

        def getRuleIndex(self):
            return Parser.RULE_start

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStart"):
                return visitor.visitStart(self)
            else:
                return visitor.visitChildren(self)

    def start(self) -> StartContext:

        localctx = Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.DEFINE or _la == Parser.IDENTIFIER:
                self.state = 218
                self.statement()
                self.state = 219
                self.match(Parser.EOL)
                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 226
            self.match(Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_statement

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class DefineExpressionContext(StatementContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def defOperators(self):
            return self.getTypedRuleContext(Parser.DefOperatorsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDefineExpression"):
                return visitor.visitDefineExpression(self)
            else:
                return visitor.visitChildren(self)

    class TemporaryAssignmentContext(StatementContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def varID(self):
            return self.getTypedRuleContext(Parser.VarIDContext, 0)

        def ASSIGN(self):
            return self.getToken(Parser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTemporaryAssignment"):
                return visitor.visitTemporaryAssignment(self)
            else:
                return visitor.visitChildren(self)

    class PersistAssignmentContext(StatementContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def varID(self):
            return self.getTypedRuleContext(Parser.VarIDContext, 0)

        def PUT_SYMBOL(self):
            return self.getToken(Parser.PUT_SYMBOL, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPersistAssignment"):
                return visitor.visitPersistAssignment(self)
            else:
                return visitor.visitChildren(self)

    def statement(self):

        localctx = Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 1, self._ctx)
            if la_ == 1:
                localctx = Parser.TemporaryAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 228
                self.varID()
                self.state = 229
                self.match(Parser.ASSIGN)
                self.state = 230
                self.expr(0)
                pass

            elif la_ == 2:
                localctx = Parser.PersistAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 232
                self.varID()
                self.state = 233
                self.match(Parser.PUT_SYMBOL)
                self.state = 234
                self.expr(0)
                pass

            elif la_ == 3:
                localctx = Parser.DefineExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 236
                self.defOperators()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_expr

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class VarIdExprContext(ExprContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def varID(self):
            return self.getTypedRuleContext(Parser.VarIDContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVarIdExpr"):
                return visitor.visitVarIdExpr(self)
            else:
                return visitor.visitChildren(self)

    class MembershipExprContext(ExprContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def MEMBERSHIP(self):
            return self.getToken(Parser.MEMBERSHIP, 0)

        def simpleComponentId(self):
            return self.getTypedRuleContext(Parser.SimpleComponentIdContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMembershipExpr"):
                return visitor.visitMembershipExpr(self)
            else:
                return visitor.visitChildren(self)

    class InNotInExprContext(ExprContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.ExprContext
            super().__init__(parser)
            self.left = None  # ExprContext
            self.op = None  # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def IN(self):
            return self.getToken(Parser.IN, 0)

        def NOT_IN(self):
            return self.getToken(Parser.NOT_IN, 0)

        def lists(self):
            return self.getTypedRuleContext(Parser.ListsContext, 0)

        def valueDomainID(self):
            return self.getTypedRuleContext(Parser.ValueDomainIDContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInNotInExpr"):
                return visitor.visitInNotInExpr(self)
            else:
                return visitor.visitChildren(self)

    class BooleanExprContext(ExprContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.ExprContext
            super().__init__(parser)
            self.left = None  # ExprContext
            self.op = None  # Token
            self.right = None  # ExprContext
            self.copyFrom(ctx)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def AND(self):
            return self.getToken(Parser.AND, 0)

        def OR(self):
            return self.getToken(Parser.OR, 0)

        def XOR(self):
            return self.getToken(Parser.XOR, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBooleanExpr"):
                return visitor.visitBooleanExpr(self)
            else:
                return visitor.visitChildren(self)

    class ComparisonExprContext(ExprContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.ExprContext
            super().__init__(parser)
            self.left = None  # ExprContext
            self.op = None  # ComparisonOperandContext
            self.right = None  # ExprContext
            self.copyFrom(ctx)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def comparisonOperand(self):
            return self.getTypedRuleContext(Parser.ComparisonOperandContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComparisonExpr"):
                return visitor.visitComparisonExpr(self)
            else:
                return visitor.visitChildren(self)

    class UnaryExprContext(ExprContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.ExprContext
            super().__init__(parser)
            self.op = None  # Token
            self.right = None  # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def PLUS(self):
            return self.getToken(Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(Parser.MINUS, 0)

        def NOT(self):
            return self.getToken(Parser.NOT, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryExpr"):
                return visitor.visitUnaryExpr(self)
            else:
                return visitor.visitChildren(self)

    class FunctionsExpressionContext(ExprContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functions(self):
            return self.getTypedRuleContext(Parser.FunctionsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionsExpression"):
                return visitor.visitFunctionsExpression(self)
            else:
                return visitor.visitChildren(self)

    class IfExprContext(ExprContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.ExprContext
            super().__init__(parser)
            self.conditionalExpr = None  # ExprContext
            self.thenExpr = None  # ExprContext
            self.elseExpr = None  # ExprContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(Parser.IF, 0)

        def THEN(self):
            return self.getToken(Parser.THEN, 0)

        def ELSE(self):
            return self.getToken(Parser.ELSE, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIfExpr"):
                return visitor.visitIfExpr(self)
            else:
                return visitor.visitChildren(self)

    class ClauseExprContext(ExprContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.ExprContext
            super().__init__(parser)
            self.dataset = None  # ExprContext
            self.clause = None  # DatasetClauseContext
            self.copyFrom(ctx)

        def QLPAREN(self):
            return self.getToken(Parser.QLPAREN, 0)

        def QRPAREN(self):
            return self.getToken(Parser.QRPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def datasetClause(self):
            return self.getTypedRuleContext(Parser.DatasetClauseContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClauseExpr"):
                return visitor.visitClauseExpr(self)
            else:
                return visitor.visitChildren(self)

    class ArithmeticExprContext(ExprContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.ExprContext
            super().__init__(parser)
            self.left = None  # ExprContext
            self.op = None  # Token
            self.right = None  # ExprContext
            self.copyFrom(ctx)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def MUL(self):
            return self.getToken(Parser.MUL, 0)

        def DIV(self):
            return self.getToken(Parser.DIV, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArithmeticExpr"):
                return visitor.visitArithmeticExpr(self)
            else:
                return visitor.visitChildren(self)

    class ParenthesisExprContext(ExprContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParenthesisExpr"):
                return visitor.visitParenthesisExpr(self)
            else:
                return visitor.visitChildren(self)

    class ConstantExprContext(ExprContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(Parser.ConstantContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstantExpr"):
                return visitor.visitConstantExpr(self)
            else:
                return visitor.visitChildren(self)

    class ArithmeticExprOrConcatContext(ExprContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.ExprContext
            super().__init__(parser)
            self.left = None  # ExprContext
            self.op = None  # Token
            self.right = None  # ExprContext
            self.copyFrom(ctx)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def PLUS(self):
            return self.getToken(Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(Parser.MINUS, 0)

        def CONCAT(self):
            return self.getToken(Parser.CONCAT, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArithmeticExprOrConcat"):
                return visitor.visitArithmeticExprOrConcat(self)
            else:
                return visitor.visitChildren(self)

    def expr(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Parser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 4
        self.enterRecursionRule(localctx, 4, self.RULE_expr, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 2, self._ctx)
            if la_ == 1:
                localctx = Parser.ParenthesisExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 240
                self.match(Parser.LPAREN)
                self.state = 241
                self.expr(0)
                self.state = 242
                self.match(Parser.RPAREN)
                pass

            elif la_ == 2:
                localctx = Parser.FunctionsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 244
                self.functions()
                pass

            elif la_ == 3:
                localctx = Parser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 245
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & ((1 << Parser.PLUS) | (1 << Parser.MINUS) | (1 << Parser.NOT))
                        )
                        != 0
                    )
                ):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 246
                localctx.right = self.expr(10)
                pass

            elif la_ == 4:
                localctx = Parser.IfExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 247
                self.match(Parser.IF)
                self.state = 248
                localctx.conditionalExpr = self.expr(0)
                self.state = 249
                self.match(Parser.THEN)
                self.state = 250
                localctx.thenExpr = self.expr(0)
                self.state = 251
                self.match(Parser.ELSE)
                self.state = 252
                localctx.elseExpr = self.expr(3)
                pass

            elif la_ == 5:
                localctx = Parser.ConstantExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 254
                self.constant()
                pass

            elif la_ == 6:
                localctx = Parser.VarIdExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 255
                self.varID()
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 290
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 288
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 4, self._ctx)
                    if la_ == 1:
                        localctx = Parser.ArithmeticExprContext(
                            self, Parser.ExprContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 258
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 259
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (_la == Parser.MUL or _la == Parser.DIV):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 260
                        localctx.right = self.expr(10)
                        pass

                    elif la_ == 2:
                        localctx = Parser.ArithmeticExprOrConcatContext(
                            self, Parser.ExprContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 261
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 262
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (_la == Parser.PLUS or _la == Parser.MINUS or _la == Parser.CONCAT):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 263
                        localctx.right = self.expr(9)
                        pass

                    elif la_ == 3:
                        localctx = Parser.ComparisonExprContext(
                            self, Parser.ExprContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 264
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 265
                        localctx.op = self.comparisonOperand()
                        self.state = 266
                        localctx.right = self.expr(8)
                        pass

                    elif la_ == 4:
                        localctx = Parser.BooleanExprContext(
                            self, Parser.ExprContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 268
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 269
                        localctx.op = self.match(Parser.AND)
                        self.state = 270
                        localctx.right = self.expr(6)
                        pass

                    elif la_ == 5:
                        localctx = Parser.BooleanExprContext(
                            self, Parser.ExprContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 271
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 272
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (_la == Parser.OR or _la == Parser.XOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 273
                        localctx.right = self.expr(5)
                        pass

                    elif la_ == 6:
                        localctx = Parser.ClauseExprContext(
                            self, Parser.ExprContext(self, _parentctx, _parentState)
                        )
                        localctx.dataset = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 274
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 275
                        self.match(Parser.QLPAREN)
                        self.state = 276
                        localctx.clause = self.datasetClause()
                        self.state = 277
                        self.match(Parser.QRPAREN)
                        pass

                    elif la_ == 7:
                        localctx = Parser.MembershipExprContext(
                            self, Parser.ExprContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 279
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 280
                        self.match(Parser.MEMBERSHIP)
                        self.state = 281
                        self.simpleComponentId()
                        pass

                    elif la_ == 8:
                        localctx = Parser.InNotInExprContext(
                            self, Parser.ExprContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 282
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 283
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (_la == Parser.IN or _la == Parser.NOT_IN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 286
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Parser.GLPAREN]:
                            self.state = 284
                            self.lists()
                            pass
                        elif token in [Parser.IDENTIFIER]:
                            self.state = 285
                            self.valueDomainID()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                self.state = 292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExprComponentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_exprComponent

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ArithmeticExprCompContext(ExprComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ExprComponentContext
            super().__init__(parser)
            self.left = None  # ExprComponentContext
            self.op = None  # Token
            self.right = None  # ExprComponentContext
            self.copyFrom(ctx)

        def exprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext, i)

        def MUL(self):
            return self.getToken(Parser.MUL, 0)

        def DIV(self):
            return self.getToken(Parser.DIV, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArithmeticExprComp"):
                return visitor.visitArithmeticExprComp(self)
            else:
                return visitor.visitChildren(self)

    class IfExprCompContext(ExprComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ExprComponentContext
            super().__init__(parser)
            self.conditionalExpr = None  # ExprComponentContext
            self.thenExpr = None  # ExprComponentContext
            self.elseExpr = None  # ExprComponentContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(Parser.IF, 0)

        def THEN(self):
            return self.getToken(Parser.THEN, 0)

        def ELSE(self):
            return self.getToken(Parser.ELSE, 0)

        def exprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIfExprComp"):
                return visitor.visitIfExprComp(self)
            else:
                return visitor.visitChildren(self)

    class ComparisonExprCompContext(ExprComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ExprComponentContext
            super().__init__(parser)
            self.left = None  # ExprComponentContext
            self.right = None  # ExprComponentContext
            self.copyFrom(ctx)

        def comparisonOperand(self):
            return self.getTypedRuleContext(Parser.ComparisonOperandContext, 0)

        def exprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComparisonExprComp"):
                return visitor.visitComparisonExprComp(self)
            else:
                return visitor.visitChildren(self)

    class FunctionsExpressionCompContext(ExprComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ExprComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionsComponents(self):
            return self.getTypedRuleContext(Parser.FunctionsComponentsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionsExpressionComp"):
                return visitor.visitFunctionsExpressionComp(self)
            else:
                return visitor.visitChildren(self)

    class CompIdContext(ExprComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ExprComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompId"):
                return visitor.visitCompId(self)
            else:
                return visitor.visitChildren(self)

    class ConstantExprCompContext(ExprComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ExprComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(Parser.ConstantContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstantExprComp"):
                return visitor.visitConstantExprComp(self)
            else:
                return visitor.visitChildren(self)

    class ArithmeticExprOrConcatCompContext(ExprComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ExprComponentContext
            super().__init__(parser)
            self.left = None  # ExprComponentContext
            self.op = None  # Token
            self.right = None  # ExprComponentContext
            self.copyFrom(ctx)

        def exprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext, i)

        def PLUS(self):
            return self.getToken(Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(Parser.MINUS, 0)

        def CONCAT(self):
            return self.getToken(Parser.CONCAT, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArithmeticExprOrConcatComp"):
                return visitor.visitArithmeticExprOrConcatComp(self)
            else:
                return visitor.visitChildren(self)

    class ParenthesisExprCompContext(ExprComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ExprComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParenthesisExprComp"):
                return visitor.visitParenthesisExprComp(self)
            else:
                return visitor.visitChildren(self)

    class InNotInExprCompContext(ExprComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ExprComponentContext
            super().__init__(parser)
            self.left = None  # ExprComponentContext
            self.op = None  # Token
            self.copyFrom(ctx)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def IN(self):
            return self.getToken(Parser.IN, 0)

        def NOT_IN(self):
            return self.getToken(Parser.NOT_IN, 0)

        def lists(self):
            return self.getTypedRuleContext(Parser.ListsContext, 0)

        def valueDomainID(self):
            return self.getTypedRuleContext(Parser.ValueDomainIDContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInNotInExprComp"):
                return visitor.visitInNotInExprComp(self)
            else:
                return visitor.visitChildren(self)

    class UnaryExprCompContext(ExprComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ExprComponentContext
            super().__init__(parser)
            self.op = None  # Token
            self.right = None  # ExprComponentContext
            self.copyFrom(ctx)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def PLUS(self):
            return self.getToken(Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(Parser.MINUS, 0)

        def NOT(self):
            return self.getToken(Parser.NOT, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryExprComp"):
                return visitor.visitUnaryExprComp(self)
            else:
                return visitor.visitChildren(self)

    class BooleanExprCompContext(ExprComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ExprComponentContext
            super().__init__(parser)
            self.left = None  # ExprComponentContext
            self.op = None  # Token
            self.right = None  # ExprComponentContext
            self.copyFrom(ctx)

        def exprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext, i)

        def AND(self):
            return self.getToken(Parser.AND, 0)

        def OR(self):
            return self.getToken(Parser.OR, 0)

        def XOR(self):
            return self.getToken(Parser.XOR, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBooleanExprComp"):
                return visitor.visitBooleanExprComp(self)
            else:
                return visitor.visitChildren(self)

    def exprComponent(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Parser.ExprComponentContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 6
        self.enterRecursionRule(localctx, 6, self.RULE_exprComponent, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
            if la_ == 1:
                localctx = Parser.ParenthesisExprCompContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 294
                self.match(Parser.LPAREN)
                self.state = 295
                self.exprComponent(0)
                self.state = 296
                self.match(Parser.RPAREN)
                pass

            elif la_ == 2:
                localctx = Parser.FunctionsExpressionCompContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 298
                self.functionsComponents()
                pass

            elif la_ == 3:
                localctx = Parser.UnaryExprCompContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 299
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & ((1 << Parser.PLUS) | (1 << Parser.MINUS) | (1 << Parser.NOT))
                        )
                        != 0
                    )
                ):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 300
                localctx.right = self.exprComponent(10)
                pass

            elif la_ == 4:
                localctx = Parser.IfExprCompContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 301
                self.match(Parser.IF)
                self.state = 302
                localctx.conditionalExpr = self.exprComponent(0)
                self.state = 303
                self.match(Parser.THEN)
                self.state = 304
                localctx.thenExpr = self.exprComponent(0)
                self.state = 305
                self.match(Parser.ELSE)
                self.state = 306
                localctx.elseExpr = self.exprComponent(3)
                pass

            elif la_ == 5:
                localctx = Parser.ConstantExprCompContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 308
                self.constant()
                pass

            elif la_ == 6:
                localctx = Parser.CompIdContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 309
                self.componentID()
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 336
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 334
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 8, self._ctx)
                    if la_ == 1:
                        localctx = Parser.ArithmeticExprCompContext(
                            self, Parser.ExprComponentContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprComponent)
                        self.state = 312
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 313
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (_la == Parser.MUL or _la == Parser.DIV):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 314
                        localctx.right = self.exprComponent(10)
                        pass

                    elif la_ == 2:
                        localctx = Parser.ArithmeticExprOrConcatCompContext(
                            self, Parser.ExprComponentContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprComponent)
                        self.state = 315
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 316
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (_la == Parser.PLUS or _la == Parser.MINUS or _la == Parser.CONCAT):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 317
                        localctx.right = self.exprComponent(9)
                        pass

                    elif la_ == 3:
                        localctx = Parser.ComparisonExprCompContext(
                            self, Parser.ExprComponentContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprComponent)
                        self.state = 318
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 319
                        self.comparisonOperand()
                        self.state = 320
                        localctx.right = self.exprComponent(8)
                        pass

                    elif la_ == 4:
                        localctx = Parser.BooleanExprCompContext(
                            self, Parser.ExprComponentContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprComponent)
                        self.state = 322
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 323
                        localctx.op = self.match(Parser.AND)
                        self.state = 324
                        localctx.right = self.exprComponent(6)
                        pass

                    elif la_ == 5:
                        localctx = Parser.BooleanExprCompContext(
                            self, Parser.ExprComponentContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprComponent)
                        self.state = 325
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 326
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (_la == Parser.OR or _la == Parser.XOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 327
                        localctx.right = self.exprComponent(5)
                        pass

                    elif la_ == 6:
                        localctx = Parser.InNotInExprCompContext(
                            self, Parser.ExprComponentContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprComponent)
                        self.state = 328
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 329
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (_la == Parser.IN or _la == Parser.NOT_IN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 332
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Parser.GLPAREN]:
                            self.state = 330
                            self.lists()
                            pass
                        elif token in [Parser.IDENTIFIER]:
                            self.state = 331
                            self.valueDomainID()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                self.state = 338
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class FunctionsComponentsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_functionsComponents

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class NumericFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numericOperatorsComponent(self):
            return self.getTypedRuleContext(Parser.NumericOperatorsComponentContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericFunctionsComponents"):
                return visitor.visitNumericFunctionsComponents(self)
            else:
                return visitor.visitChildren(self)

    class StringFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringOperatorsComponent(self):
            return self.getTypedRuleContext(Parser.StringOperatorsComponentContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStringFunctionsComponents"):
                return visitor.visitStringFunctionsComponents(self)
            else:
                return visitor.visitChildren(self)

    class ComparisonFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def comparisonOperatorsComponent(self):
            return self.getTypedRuleContext(Parser.ComparisonOperatorsComponentContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComparisonFunctionsComponents"):
                return visitor.visitComparisonFunctionsComponents(self)
            else:
                return visitor.visitChildren(self)

    class TimeFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def timeOperatorsComponent(self):
            return self.getTypedRuleContext(Parser.TimeOperatorsComponentContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeFunctionsComponents"):
                return visitor.visitTimeFunctionsComponents(self)
            else:
                return visitor.visitChildren(self)

    class GenericFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def genericOperatorsComponent(self):
            return self.getTypedRuleContext(Parser.GenericOperatorsComponentContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGenericFunctionsComponents"):
                return visitor.visitGenericFunctionsComponents(self)
            else:
                return visitor.visitChildren(self)

    class AnalyticFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def anFunctionComponent(self):
            return self.getTypedRuleContext(Parser.AnFunctionComponentContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnalyticFunctionsComponents"):
                return visitor.visitAnalyticFunctionsComponents(self)
            else:
                return visitor.visitChildren(self)

    class ConditionalFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def conditionalOperatorsComponent(self):
            return self.getTypedRuleContext(Parser.ConditionalOperatorsComponentContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConditionalFunctionsComponents"):
                return visitor.visitConditionalFunctionsComponents(self)
            else:
                return visitor.visitChildren(self)

    class AggregateFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggrOperators(self):
            return self.getTypedRuleContext(Parser.AggrOperatorsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAggregateFunctionsComponents"):
                return visitor.visitAggregateFunctionsComponents(self)
            else:
                return visitor.visitChildren(self)

    def functionsComponents(self):

        localctx = Parser.FunctionsComponentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_functionsComponents)
        try:
            self.state = 347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 10, self._ctx)
            if la_ == 1:
                localctx = Parser.GenericFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 339
                self.genericOperatorsComponent()
                pass

            elif la_ == 2:
                localctx = Parser.StringFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 340
                self.stringOperatorsComponent()
                pass

            elif la_ == 3:
                localctx = Parser.NumericFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 341
                self.numericOperatorsComponent()
                pass

            elif la_ == 4:
                localctx = Parser.ComparisonFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 342
                self.comparisonOperatorsComponent()
                pass

            elif la_ == 5:
                localctx = Parser.TimeFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 343
                self.timeOperatorsComponent()
                pass

            elif la_ == 6:
                localctx = Parser.ConditionalFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 344
                self.conditionalOperatorsComponent()
                pass

            elif la_ == 7:
                localctx = Parser.AggregateFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 345
                self.aggrOperators()
                pass

            elif la_ == 8:
                localctx = Parser.AnalyticFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 346
                self.anFunctionComponent()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_functions

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class HierarchyFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hierarchyOperators(self):
            return self.getTypedRuleContext(Parser.HierarchyOperatorsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHierarchyFunctions"):
                return visitor.visitHierarchyFunctions(self)
            else:
                return visitor.visitChildren(self)

    class StringFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringOperators(self):
            return self.getTypedRuleContext(Parser.StringOperatorsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStringFunctions"):
                return visitor.visitStringFunctions(self)
            else:
                return visitor.visitChildren(self)

    class ValidationFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def validationOperators(self):
            return self.getTypedRuleContext(Parser.ValidationOperatorsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValidationFunctions"):
                return visitor.visitValidationFunctions(self)
            else:
                return visitor.visitChildren(self)

    class GenericFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def genericOperators(self):
            return self.getTypedRuleContext(Parser.GenericOperatorsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGenericFunctions"):
                return visitor.visitGenericFunctions(self)
            else:
                return visitor.visitChildren(self)

    class ConditionalFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def conditionalOperators(self):
            return self.getTypedRuleContext(Parser.ConditionalOperatorsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConditionalFunctions"):
                return visitor.visitConditionalFunctions(self)
            else:
                return visitor.visitChildren(self)

    class AggregateFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggrOperatorsGrouping(self):
            return self.getTypedRuleContext(Parser.AggrOperatorsGroupingContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAggregateFunctions"):
                return visitor.visitAggregateFunctions(self)
            else:
                return visitor.visitChildren(self)

    class JoinFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinOperators(self):
            return self.getTypedRuleContext(Parser.JoinOperatorsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinFunctions"):
                return visitor.visitJoinFunctions(self)
            else:
                return visitor.visitChildren(self)

    class ComparisonFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def comparisonOperators(self):
            return self.getTypedRuleContext(Parser.ComparisonOperatorsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComparisonFunctions"):
                return visitor.visitComparisonFunctions(self)
            else:
                return visitor.visitChildren(self)

    class NumericFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numericOperators(self):
            return self.getTypedRuleContext(Parser.NumericOperatorsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericFunctions"):
                return visitor.visitNumericFunctions(self)
            else:
                return visitor.visitChildren(self)

    class TimeFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def timeOperators(self):
            return self.getTypedRuleContext(Parser.TimeOperatorsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeFunctions"):
                return visitor.visitTimeFunctions(self)
            else:
                return visitor.visitChildren(self)

    class SetFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setOperators(self):
            return self.getTypedRuleContext(Parser.SetOperatorsContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetFunctions"):
                return visitor.visitSetFunctions(self)
            else:
                return visitor.visitChildren(self)

    class AnalyticFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def anFunction(self):
            return self.getTypedRuleContext(Parser.AnFunctionContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnalyticFunctions"):
                return visitor.visitAnalyticFunctions(self)
            else:
                return visitor.visitChildren(self)

    def functions(self):

        localctx = Parser.FunctionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_functions)
        try:
            self.state = 361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
            if la_ == 1:
                localctx = Parser.JoinFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 349
                self.joinOperators()
                pass

            elif la_ == 2:
                localctx = Parser.GenericFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 350
                self.genericOperators()
                pass

            elif la_ == 3:
                localctx = Parser.StringFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 351
                self.stringOperators()
                pass

            elif la_ == 4:
                localctx = Parser.NumericFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 352
                self.numericOperators()
                pass

            elif la_ == 5:
                localctx = Parser.ComparisonFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 353
                self.comparisonOperators()
                pass

            elif la_ == 6:
                localctx = Parser.TimeFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 354
                self.timeOperators()
                pass

            elif la_ == 7:
                localctx = Parser.SetFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 355
                self.setOperators()
                pass

            elif la_ == 8:
                localctx = Parser.HierarchyFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 356
                self.hierarchyOperators()
                pass

            elif la_ == 9:
                localctx = Parser.ValidationFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 357
                self.validationOperators()
                pass

            elif la_ == 10:
                localctx = Parser.ConditionalFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 358
                self.conditionalOperators()
                pass

            elif la_ == 11:
                localctx = Parser.AggregateFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 359
                self.aggrOperatorsGrouping()
                pass

            elif la_ == 12:
                localctx = Parser.AnalyticFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 360
                self.anFunction()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatasetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def renameClause(self):
            return self.getTypedRuleContext(Parser.RenameClauseContext, 0)

        def aggrClause(self):
            return self.getTypedRuleContext(Parser.AggrClauseContext, 0)

        def filterClause(self):
            return self.getTypedRuleContext(Parser.FilterClauseContext, 0)

        def calcClause(self):
            return self.getTypedRuleContext(Parser.CalcClauseContext, 0)

        def keepOrDropClause(self):
            return self.getTypedRuleContext(Parser.KeepOrDropClauseContext, 0)

        def pivotOrUnpivotClause(self):
            return self.getTypedRuleContext(Parser.PivotOrUnpivotClauseContext, 0)

        def subspaceClause(self):
            return self.getTypedRuleContext(Parser.SubspaceClauseContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_datasetClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatasetClause"):
                return visitor.visitDatasetClause(self)
            else:
                return visitor.visitChildren(self)

    def datasetClause(self):

        localctx = Parser.DatasetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_datasetClause)
        try:
            self.state = 370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.RENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 363
                self.renameClause()
                pass
            elif token in [Parser.AGGREGATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 364
                self.aggrClause()
                pass
            elif token in [Parser.FILTER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 365
                self.filterClause()
                pass
            elif token in [Parser.CALC]:
                self.enterOuterAlt(localctx, 4)
                self.state = 366
                self.calcClause()
                pass
            elif token in [Parser.DROP, Parser.KEEP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 367
                self.keepOrDropClause()
                pass
            elif token in [Parser.PIVOT, Parser.UNPIVOT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 368
                self.pivotOrUnpivotClause()
                pass
            elif token in [Parser.SUBSPACE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 369
                self.subspaceClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RenameClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(Parser.RENAME, 0)

        def renameClauseItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.RenameClauseItemContext)
            else:
                return self.getTypedRuleContext(Parser.RenameClauseItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_renameClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRenameClause"):
                return visitor.visitRenameClause(self)
            else:
                return visitor.visitChildren(self)

    def renameClause(self):

        localctx = Parser.RenameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_renameClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(Parser.RENAME)
            self.state = 373
            self.renameClauseItem()
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.COMMA:
                self.state = 374
                self.match(Parser.COMMA)
                self.state = 375
                self.renameClauseItem()
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggrClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AGGREGATE(self):
            return self.getToken(Parser.AGGREGATE, 0)

        def aggregateClause(self):
            return self.getTypedRuleContext(Parser.AggregateClauseContext, 0)

        def groupingClause(self):
            return self.getTypedRuleContext(Parser.GroupingClauseContext, 0)

        def havingClause(self):
            return self.getTypedRuleContext(Parser.HavingClauseContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_aggrClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAggrClause"):
                return visitor.visitAggrClause(self)
            else:
                return visitor.visitChildren(self)

    def aggrClause(self):

        localctx = Parser.AggrClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_aggrClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(Parser.AGGREGATE)
            self.state = 382
            self.aggregateClause()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.GROUP:
                self.state = 383
                self.groupingClause()
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.HAVING:
                    self.state = 384
                    self.havingClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FilterClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(Parser.FILTER, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_filterClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFilterClause"):
                return visitor.visitFilterClause(self)
            else:
                return visitor.visitChildren(self)

    def filterClause(self):

        localctx = Parser.FilterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_filterClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(Parser.FILTER)
            self.state = 390
            self.exprComponent(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalcClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALC(self):
            return self.getToken(Parser.CALC, 0)

        def calcClauseItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.CalcClauseItemContext)
            else:
                return self.getTypedRuleContext(Parser.CalcClauseItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_calcClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCalcClause"):
                return visitor.visitCalcClause(self)
            else:
                return visitor.visitChildren(self)

    def calcClause(self):

        localctx = Parser.CalcClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_calcClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(Parser.CALC)
            self.state = 393
            self.calcClauseItem()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.COMMA:
                self.state = 394
                self.match(Parser.COMMA)
                self.state = 395
                self.calcClauseItem()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeepOrDropClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None  # Token

        def componentID(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext, i)

        def KEEP(self):
            return self.getToken(Parser.KEEP, 0)

        def DROP(self):
            return self.getToken(Parser.DROP, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_keepOrDropClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKeepOrDropClause"):
                return visitor.visitKeepOrDropClause(self)
            else:
                return visitor.visitChildren(self)

    def keepOrDropClause(self):

        localctx = Parser.KeepOrDropClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_keepOrDropClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not (_la == Parser.DROP or _la == Parser.KEEP):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 402
            self.componentID()
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.COMMA:
                self.state = 403
                self.match(Parser.COMMA)
                self.state = 404
                self.componentID()
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PivotOrUnpivotClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None  # Token
            self.id_ = None  # ComponentIDContext
            self.mea = None  # ComponentIDContext

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def componentID(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext, i)

        def PIVOT(self):
            return self.getToken(Parser.PIVOT, 0)

        def UNPIVOT(self):
            return self.getToken(Parser.UNPIVOT, 0)

        def getRuleIndex(self):
            return Parser.RULE_pivotOrUnpivotClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPivotOrUnpivotClause"):
                return visitor.visitPivotOrUnpivotClause(self)
            else:
                return visitor.visitChildren(self)

    def pivotOrUnpivotClause(self):

        localctx = Parser.PivotOrUnpivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_pivotOrUnpivotClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not (_la == Parser.PIVOT or _la == Parser.UNPIVOT):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 411
            localctx.id_ = self.componentID()
            self.state = 412
            self.match(Parser.COMMA)
            self.state = 413
            localctx.mea = self.componentID()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubspaceClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSPACE(self):
            return self.getToken(Parser.SUBSPACE, 0)

        def subspaceClauseItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.SubspaceClauseItemContext)
            else:
                return self.getTypedRuleContext(Parser.SubspaceClauseItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_subspaceClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubspaceClause"):
                return visitor.visitSubspaceClause(self)
            else:
                return visitor.visitChildren(self)

    def subspaceClause(self):

        localctx = Parser.SubspaceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_subspaceClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(Parser.SUBSPACE)
            self.state = 416
            self.subspaceClauseItem()
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.COMMA:
                self.state = 417
                self.match(Parser.COMMA)
                self.state = 418
                self.subspaceClauseItem()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinOperatorsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_joinOperators

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class JoinExprContext(JoinOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.JoinOperatorsContext
            super().__init__(parser)
            self.joinKeyword = None  # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def joinClause(self):
            return self.getTypedRuleContext(Parser.JoinClauseContext, 0)

        def joinBody(self):
            return self.getTypedRuleContext(Parser.JoinBodyContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def INNER_JOIN(self):
            return self.getToken(Parser.INNER_JOIN, 0)

        def LEFT_JOIN(self):
            return self.getToken(Parser.LEFT_JOIN, 0)

        def joinClauseWithoutUsing(self):
            return self.getTypedRuleContext(Parser.JoinClauseWithoutUsingContext, 0)

        def FULL_JOIN(self):
            return self.getToken(Parser.FULL_JOIN, 0)

        def CROSS_JOIN(self):
            return self.getToken(Parser.CROSS_JOIN, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinExpr"):
                return visitor.visitJoinExpr(self)
            else:
                return visitor.visitChildren(self)

    def joinOperators(self):

        localctx = Parser.JoinOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_joinOperators)
        self._la = 0  # Token type
        try:
            self.state = 436
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.INNER_JOIN, Parser.LEFT_JOIN]:
                localctx = Parser.JoinExprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                localctx.joinKeyword = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == Parser.INNER_JOIN or _la == Parser.LEFT_JOIN):
                    localctx.joinKeyword = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 425
                self.match(Parser.LPAREN)
                self.state = 426
                self.joinClause()
                self.state = 427
                self.joinBody()
                self.state = 428
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CROSS_JOIN, Parser.FULL_JOIN]:
                localctx = Parser.JoinExprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 430
                localctx.joinKeyword = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == Parser.CROSS_JOIN or _la == Parser.FULL_JOIN):
                    localctx.joinKeyword = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 431
                self.match(Parser.LPAREN)
                self.state = 432
                self.joinClauseWithoutUsing()
                self.state = 433
                self.joinBody()
                self.state = 434
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefOperatorsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_defOperators

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class DefOperatorContext(DefOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.DefOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(Parser.DEFINE, 0)

        def OPERATOR(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.OPERATOR)
            else:
                return self.getToken(Parser.OPERATOR, i)

        def operatorID(self):
            return self.getTypedRuleContext(Parser.OperatorIDContext, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def IS(self):
            return self.getToken(Parser.IS, 0)

        def END(self):
            return self.getToken(Parser.END, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def parameterItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ParameterItemContext)
            else:
                return self.getTypedRuleContext(Parser.ParameterItemContext, i)

        def RETURNS(self):
            return self.getToken(Parser.RETURNS, 0)

        def outputParameterType(self):
            return self.getTypedRuleContext(Parser.OutputParameterTypeContext, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDefOperator"):
                return visitor.visitDefOperator(self)
            else:
                return visitor.visitChildren(self)

    class DefHierarchicalContext(DefOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.DefOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(Parser.DEFINE, 0)

        def HIERARCHICAL(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.HIERARCHICAL)
            else:
                return self.getToken(Parser.HIERARCHICAL, i)

        def RULESET(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.RULESET)
            else:
                return self.getToken(Parser.RULESET, i)

        def rulesetID(self):
            return self.getTypedRuleContext(Parser.RulesetIDContext, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def hierRuleSignature(self):
            return self.getTypedRuleContext(Parser.HierRuleSignatureContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def IS(self):
            return self.getToken(Parser.IS, 0)

        def ruleClauseHierarchical(self):
            return self.getTypedRuleContext(Parser.RuleClauseHierarchicalContext, 0)

        def END(self):
            return self.getToken(Parser.END, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDefHierarchical"):
                return visitor.visitDefHierarchical(self)
            else:
                return visitor.visitChildren(self)

    class DefDatapointRulesetContext(DefOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.DefOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(Parser.DEFINE, 0)

        def DATAPOINT(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.DATAPOINT)
            else:
                return self.getToken(Parser.DATAPOINT, i)

        def RULESET(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.RULESET)
            else:
                return self.getToken(Parser.RULESET, i)

        def rulesetID(self):
            return self.getTypedRuleContext(Parser.RulesetIDContext, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def rulesetSignature(self):
            return self.getTypedRuleContext(Parser.RulesetSignatureContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def IS(self):
            return self.getToken(Parser.IS, 0)

        def ruleClauseDatapoint(self):
            return self.getTypedRuleContext(Parser.RuleClauseDatapointContext, 0)

        def END(self):
            return self.getToken(Parser.END, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDefDatapointRuleset"):
                return visitor.visitDefDatapointRuleset(self)
            else:
                return visitor.visitChildren(self)

    def defOperators(self):

        localctx = Parser.DefOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_defOperators)
        self._la = 0  # Token type
        try:
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 23, self._ctx)
            if la_ == 1:
                localctx = Parser.DefOperatorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 438
                self.match(Parser.DEFINE)
                self.state = 439
                self.match(Parser.OPERATOR)
                self.state = 440
                self.operatorID()
                self.state = 441
                self.match(Parser.LPAREN)
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.IDENTIFIER:
                    self.state = 442
                    self.parameterItem()
                    self.state = 447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Parser.COMMA:
                        self.state = 443
                        self.match(Parser.COMMA)
                        self.state = 444
                        self.parameterItem()
                        self.state = 449
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 452
                self.match(Parser.RPAREN)
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.RETURNS:
                    self.state = 453
                    self.match(Parser.RETURNS)
                    self.state = 454
                    self.outputParameterType()

                self.state = 457
                self.match(Parser.IS)

                self.state = 458
                self.expr(0)
                self.state = 459
                self.match(Parser.END)
                self.state = 460
                self.match(Parser.OPERATOR)
                pass

            elif la_ == 2:
                localctx = Parser.DefDatapointRulesetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 462
                self.match(Parser.DEFINE)
                self.state = 463
                self.match(Parser.DATAPOINT)
                self.state = 464
                self.match(Parser.RULESET)
                self.state = 465
                self.rulesetID()
                self.state = 466
                self.match(Parser.LPAREN)
                self.state = 467
                self.rulesetSignature()
                self.state = 468
                self.match(Parser.RPAREN)
                self.state = 469
                self.match(Parser.IS)
                self.state = 470
                self.ruleClauseDatapoint()
                self.state = 471
                self.match(Parser.END)
                self.state = 472
                self.match(Parser.DATAPOINT)
                self.state = 473
                self.match(Parser.RULESET)
                pass

            elif la_ == 3:
                localctx = Parser.DefHierarchicalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 475
                self.match(Parser.DEFINE)
                self.state = 476
                self.match(Parser.HIERARCHICAL)
                self.state = 477
                self.match(Parser.RULESET)
                self.state = 478
                self.rulesetID()
                self.state = 479
                self.match(Parser.LPAREN)
                self.state = 480
                self.hierRuleSignature()
                self.state = 481
                self.match(Parser.RPAREN)
                self.state = 482
                self.match(Parser.IS)
                self.state = 483
                self.ruleClauseHierarchical()
                self.state = 484
                self.match(Parser.END)
                self.state = 485
                self.match(Parser.HIERARCHICAL)
                self.state = 486
                self.match(Parser.RULESET)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericOperatorsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_genericOperators

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class EvalAtomContext(GenericOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.GenericOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EVAL(self):
            return self.getToken(Parser.EVAL, 0)

        def LPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)

        def routineName(self):
            return self.getTypedRuleContext(Parser.RoutineNameContext, 0)

        def RPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)

        def varID(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.VarIDContext)
            else:
                return self.getTypedRuleContext(Parser.VarIDContext, i)

        def scalarItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ScalarItemContext)
            else:
                return self.getTypedRuleContext(Parser.ScalarItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def LANGUAGE(self):
            return self.getToken(Parser.LANGUAGE, 0)

        def STRING_CONSTANT(self):
            return self.getToken(Parser.STRING_CONSTANT, 0)

        def RETURNS(self):
            return self.getToken(Parser.RETURNS, 0)

        def evalDatasetType(self):
            return self.getTypedRuleContext(Parser.EvalDatasetTypeContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEvalAtom"):
                return visitor.visitEvalAtom(self)
            else:
                return visitor.visitChildren(self)

    class CastExprDatasetContext(GenericOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.GenericOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(Parser.CAST, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def basicScalarType(self):
            return self.getTypedRuleContext(Parser.BasicScalarTypeContext, 0)

        def valueDomainName(self):
            return self.getTypedRuleContext(Parser.ValueDomainNameContext, 0)

        def STRING_CONSTANT(self):
            return self.getToken(Parser.STRING_CONSTANT, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCastExprDataset"):
                return visitor.visitCastExprDataset(self)
            else:
                return visitor.visitChildren(self)

    class CallDatasetContext(GenericOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.GenericOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def operatorID(self):
            return self.getTypedRuleContext(Parser.OperatorIDContext, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def parameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ParameterContext)
            else:
                return self.getTypedRuleContext(Parser.ParameterContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCallDataset"):
                return visitor.visitCallDataset(self)
            else:
                return visitor.visitChildren(self)

    def genericOperators(self):

        localctx = Parser.GenericOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_genericOperators)
        self._la = 0  # Token type
        try:
            self.state = 547
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.IDENTIFIER]:
                localctx = Parser.CallDatasetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 490
                self.operatorID()
                self.state = 491
                self.match(Parser.LPAREN)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << Parser.LPAREN)
                                | (1 << Parser.PLUS)
                                | (1 << Parser.MINUS)
                                | (1 << Parser.EVAL)
                                | (1 << Parser.IF)
                                | (1 << Parser.CURRENT_DATE)
                                | (1 << Parser.NOT)
                                | (1 << Parser.BETWEEN)
                                | (1 << Parser.NULL_CONSTANT)
                                | (1 << Parser.ISNULL)
                                | (1 << Parser.UNION)
                                | (1 << Parser.SYMDIFF)
                                | (1 << Parser.INTERSECT)
                                | (1 << Parser.CHECK)
                                | (1 << Parser.EXISTS_IN)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 68)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 68))
                            & (
                                (1 << (Parser.MIN - 68))
                                | (1 << (Parser.MAX - 68))
                                | (1 << (Parser.ABS - 68))
                                | (1 << (Parser.LN - 68))
                                | (1 << (Parser.LOG - 68))
                                | (1 << (Parser.TRUNC - 68))
                                | (1 << (Parser.ROUND - 68))
                                | (1 << (Parser.POWER - 68))
                                | (1 << (Parser.MOD - 68))
                                | (1 << (Parser.LEN - 68))
                                | (1 << (Parser.TRIM - 68))
                                | (1 << (Parser.UCASE - 68))
                                | (1 << (Parser.LCASE - 68))
                                | (1 << (Parser.SUBSTR - 68))
                                | (1 << (Parser.SUM - 68))
                                | (1 << (Parser.AVG - 68))
                                | (1 << (Parser.MEDIAN - 68))
                                | (1 << (Parser.COUNT - 68))
                                | (1 << (Parser.EXP - 68))
                                | (1 << (Parser.CHARSET_MATCH - 68))
                                | (1 << (Parser.NVL - 68))
                                | (1 << (Parser.HIERARCHY - 68))
                                | (1 << (Parser.OPTIONAL - 68))
                                | (1 << (Parser.LTRIM - 68))
                                | (1 << (Parser.RTRIM - 68))
                                | (1 << (Parser.INSTR - 68))
                                | (1 << (Parser.REPLACE - 68))
                                | (1 << (Parser.CEIL - 68))
                                | (1 << (Parser.FLOOR - 68))
                                | (1 << (Parser.SQRT - 68))
                                | (1 << (Parser.SETDIFF - 68))
                                | (1 << (Parser.STDDEV_POP - 68))
                                | (1 << (Parser.STDDEV_SAMP - 68))
                                | (1 << (Parser.VAR_POP - 68))
                                | (1 << (Parser.VAR_SAMP - 68))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 135)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 135))
                            & (
                                (1 << (Parser.FIRST_VALUE - 135))
                                | (1 << (Parser.LAST_VALUE - 135))
                                | (1 << (Parser.LAG - 135))
                                | (1 << (Parser.LEAD - 135))
                                | (1 << (Parser.RATIO_TO_REPORT - 135))
                                | (1 << (Parser.FILL_TIME_SERIES - 135))
                                | (1 << (Parser.FLOW_TO_STOCK - 135))
                                | (1 << (Parser.STOCK_TO_FLOW - 135))
                                | (1 << (Parser.TIMESHIFT - 135))
                                | (1 << (Parser.INNER_JOIN - 135))
                                | (1 << (Parser.LEFT_JOIN - 135))
                                | (1 << (Parser.CROSS_JOIN - 135))
                                | (1 << (Parser.FULL_JOIN - 135))
                                | (1 << (Parser.PERIOD_INDICATOR - 135))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 199)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 199))
                            & (
                                (1 << (Parser.TIME_AGG - 199))
                                | (1 << (Parser.CAST - 199))
                                | (1 << (Parser.CHECK_DATAPOINT - 199))
                                | (1 << (Parser.CHECK_HIERARCHY - 199))
                                | (1 << (Parser.INTEGER_CONSTANT - 199))
                                | (1 << (Parser.NUMBER_CONSTANT - 199))
                                | (1 << (Parser.BOOLEAN_CONSTANT - 199))
                                | (1 << (Parser.STRING_CONSTANT - 199))
                                | (1 << (Parser.IDENTIFIER - 199))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 492
                    self.parameter()
                    self.state = 497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Parser.COMMA:
                        self.state = 493
                        self.match(Parser.COMMA)
                        self.state = 494
                        self.parameter()
                        self.state = 499
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 502
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.EVAL]:
                localctx = Parser.EvalAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 504
                self.match(Parser.EVAL)
                self.state = 505
                self.match(Parser.LPAREN)
                self.state = 506
                self.routineName()
                self.state = 507
                self.match(Parser.LPAREN)
                self.state = 510
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Parser.IDENTIFIER]:
                    self.state = 508
                    self.varID()
                    pass
                elif token in [
                    Parser.NULL_CONSTANT,
                    Parser.CAST,
                    Parser.INTEGER_CONSTANT,
                    Parser.NUMBER_CONSTANT,
                    Parser.BOOLEAN_CONSTANT,
                    Parser.STRING_CONSTANT,
                ]:
                    self.state = 509
                    self.scalarItem()
                    pass
                elif token in [Parser.RPAREN, Parser.COMMA]:
                    pass
                else:
                    pass
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Parser.COMMA:
                    self.state = 512
                    self.match(Parser.COMMA)
                    self.state = 515
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Parser.IDENTIFIER]:
                        self.state = 513
                        self.varID()
                        pass
                    elif token in [
                        Parser.NULL_CONSTANT,
                        Parser.CAST,
                        Parser.INTEGER_CONSTANT,
                        Parser.NUMBER_CONSTANT,
                        Parser.BOOLEAN_CONSTANT,
                        Parser.STRING_CONSTANT,
                    ]:
                        self.state = 514
                        self.scalarItem()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 522
                self.match(Parser.RPAREN)
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.LANGUAGE:
                    self.state = 523
                    self.match(Parser.LANGUAGE)
                    self.state = 524
                    self.match(Parser.STRING_CONSTANT)

                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.RETURNS:
                    self.state = 527
                    self.match(Parser.RETURNS)
                    self.state = 528
                    self.evalDatasetType()

                self.state = 531
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CAST]:
                localctx = Parser.CastExprDatasetContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 533
                self.match(Parser.CAST)
                self.state = 534
                self.match(Parser.LPAREN)
                self.state = 535
                self.expr(0)
                self.state = 536
                self.match(Parser.COMMA)
                self.state = 539
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    Parser.BOOLEAN,
                    Parser.DATE,
                    Parser.TIME_PERIOD,
                    Parser.NUMBER,
                    Parser.STRING,
                    Parser.TIME,
                    Parser.INTEGER,
                    Parser.DURATION,
                    Parser.SCALAR,
                ]:
                    self.state = 537
                    self.basicScalarType()
                    pass
                elif token in [Parser.IDENTIFIER]:
                    self.state = 538
                    self.valueDomainName()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 541
                    self.match(Parser.COMMA)
                    self.state = 542
                    self.match(Parser.STRING_CONSTANT)

                self.state = 545
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericOperatorsComponentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_genericOperatorsComponent

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class EvalAtomComponentContext(GenericOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.GenericOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EVAL(self):
            return self.getToken(Parser.EVAL, 0)

        def LPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)

        def routineName(self):
            return self.getTypedRuleContext(Parser.RoutineNameContext, 0)

        def RPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)

        def componentID(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext, i)

        def scalarItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ScalarItemContext)
            else:
                return self.getTypedRuleContext(Parser.ScalarItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def LANGUAGE(self):
            return self.getToken(Parser.LANGUAGE, 0)

        def STRING_CONSTANT(self):
            return self.getToken(Parser.STRING_CONSTANT, 0)

        def RETURNS(self):
            return self.getToken(Parser.RETURNS, 0)

        def outputParameterTypeComponent(self):
            return self.getTypedRuleContext(Parser.OutputParameterTypeComponentContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEvalAtomComponent"):
                return visitor.visitEvalAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    class CastExprComponentContext(GenericOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.GenericOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(Parser.CAST, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def basicScalarType(self):
            return self.getTypedRuleContext(Parser.BasicScalarTypeContext, 0)

        def valueDomainName(self):
            return self.getTypedRuleContext(Parser.ValueDomainNameContext, 0)

        def STRING_CONSTANT(self):
            return self.getToken(Parser.STRING_CONSTANT, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCastExprComponent"):
                return visitor.visitCastExprComponent(self)
            else:
                return visitor.visitChildren(self)

    class CallComponentContext(GenericOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.GenericOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def operatorID(self):
            return self.getTypedRuleContext(Parser.OperatorIDContext, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def parameterComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ParameterComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ParameterComponentContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCallComponent"):
                return visitor.visitCallComponent(self)
            else:
                return visitor.visitChildren(self)

    def genericOperatorsComponent(self):

        localctx = Parser.GenericOperatorsComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_genericOperatorsComponent)
        self._la = 0  # Token type
        try:
            self.state = 606
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.IDENTIFIER]:
                localctx = Parser.CallComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 549
                self.operatorID()
                self.state = 550
                self.match(Parser.LPAREN)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << Parser.LPAREN)
                                | (1 << Parser.PLUS)
                                | (1 << Parser.MINUS)
                                | (1 << Parser.EVAL)
                                | (1 << Parser.IF)
                                | (1 << Parser.CURRENT_DATE)
                                | (1 << Parser.NOT)
                                | (1 << Parser.BETWEEN)
                                | (1 << Parser.NULL_CONSTANT)
                                | (1 << Parser.ISNULL)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 65)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 65))
                            & (
                                (1 << (Parser.RANK - 65))
                                | (1 << (Parser.MIN - 65))
                                | (1 << (Parser.MAX - 65))
                                | (1 << (Parser.ABS - 65))
                                | (1 << (Parser.LN - 65))
                                | (1 << (Parser.LOG - 65))
                                | (1 << (Parser.TRUNC - 65))
                                | (1 << (Parser.ROUND - 65))
                                | (1 << (Parser.POWER - 65))
                                | (1 << (Parser.MOD - 65))
                                | (1 << (Parser.LEN - 65))
                                | (1 << (Parser.TRIM - 65))
                                | (1 << (Parser.UCASE - 65))
                                | (1 << (Parser.LCASE - 65))
                                | (1 << (Parser.SUBSTR - 65))
                                | (1 << (Parser.SUM - 65))
                                | (1 << (Parser.AVG - 65))
                                | (1 << (Parser.MEDIAN - 65))
                                | (1 << (Parser.COUNT - 65))
                                | (1 << (Parser.EXP - 65))
                                | (1 << (Parser.CHARSET_MATCH - 65))
                                | (1 << (Parser.NVL - 65))
                                | (1 << (Parser.OPTIONAL - 65))
                                | (1 << (Parser.LTRIM - 65))
                                | (1 << (Parser.RTRIM - 65))
                                | (1 << (Parser.INSTR - 65))
                                | (1 << (Parser.REPLACE - 65))
                                | (1 << (Parser.CEIL - 65))
                                | (1 << (Parser.FLOOR - 65))
                                | (1 << (Parser.SQRT - 65))
                                | (1 << (Parser.STDDEV_POP - 65))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 129)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 129))
                            & (
                                (1 << (Parser.STDDEV_SAMP - 129))
                                | (1 << (Parser.VAR_POP - 129))
                                | (1 << (Parser.VAR_SAMP - 129))
                                | (1 << (Parser.FIRST_VALUE - 129))
                                | (1 << (Parser.LAST_VALUE - 129))
                                | (1 << (Parser.LAG - 129))
                                | (1 << (Parser.LEAD - 129))
                                | (1 << (Parser.RATIO_TO_REPORT - 129))
                                | (1 << (Parser.FILL_TIME_SERIES - 129))
                                | (1 << (Parser.FLOW_TO_STOCK - 129))
                                | (1 << (Parser.STOCK_TO_FLOW - 129))
                                | (1 << (Parser.TIMESHIFT - 129))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 196)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 196))
                            & (
                                (1 << (Parser.PERIOD_INDICATOR - 196))
                                | (1 << (Parser.TIME_AGG - 196))
                                | (1 << (Parser.CAST - 196))
                                | (1 << (Parser.INTEGER_CONSTANT - 196))
                                | (1 << (Parser.NUMBER_CONSTANT - 196))
                                | (1 << (Parser.BOOLEAN_CONSTANT - 196))
                                | (1 << (Parser.STRING_CONSTANT - 196))
                                | (1 << (Parser.IDENTIFIER - 196))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 551
                    self.parameterComponent()
                    self.state = 556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Parser.COMMA:
                        self.state = 552
                        self.match(Parser.COMMA)
                        self.state = 553
                        self.parameterComponent()
                        self.state = 558
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 561
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CAST]:
                localctx = Parser.CastExprComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 563
                self.match(Parser.CAST)
                self.state = 564
                self.match(Parser.LPAREN)
                self.state = 565
                self.exprComponent(0)
                self.state = 566
                self.match(Parser.COMMA)
                self.state = 569
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    Parser.BOOLEAN,
                    Parser.DATE,
                    Parser.TIME_PERIOD,
                    Parser.NUMBER,
                    Parser.STRING,
                    Parser.TIME,
                    Parser.INTEGER,
                    Parser.DURATION,
                    Parser.SCALAR,
                ]:
                    self.state = 567
                    self.basicScalarType()
                    pass
                elif token in [Parser.IDENTIFIER]:
                    self.state = 568
                    self.valueDomainName()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 571
                    self.match(Parser.COMMA)
                    self.state = 572
                    self.match(Parser.STRING_CONSTANT)

                self.state = 575
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.EVAL]:
                localctx = Parser.EvalAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 577
                self.match(Parser.EVAL)
                self.state = 578
                self.match(Parser.LPAREN)
                self.state = 579
                self.routineName()
                self.state = 580
                self.match(Parser.LPAREN)
                self.state = 583
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Parser.IDENTIFIER]:
                    self.state = 581
                    self.componentID()
                    pass
                elif token in [
                    Parser.NULL_CONSTANT,
                    Parser.CAST,
                    Parser.INTEGER_CONSTANT,
                    Parser.NUMBER_CONSTANT,
                    Parser.BOOLEAN_CONSTANT,
                    Parser.STRING_CONSTANT,
                ]:
                    self.state = 582
                    self.scalarItem()
                    pass
                elif token in [Parser.RPAREN, Parser.COMMA]:
                    pass
                else:
                    pass
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Parser.COMMA:
                    self.state = 585
                    self.match(Parser.COMMA)
                    self.state = 588
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Parser.IDENTIFIER]:
                        self.state = 586
                        self.componentID()
                        pass
                    elif token in [
                        Parser.NULL_CONSTANT,
                        Parser.CAST,
                        Parser.INTEGER_CONSTANT,
                        Parser.NUMBER_CONSTANT,
                        Parser.BOOLEAN_CONSTANT,
                        Parser.STRING_CONSTANT,
                    ]:
                        self.state = 587
                        self.scalarItem()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 595
                self.match(Parser.RPAREN)
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.LANGUAGE:
                    self.state = 596
                    self.match(Parser.LANGUAGE)
                    self.state = 597
                    self.match(Parser.STRING_CONSTANT)

                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.RETURNS:
                    self.state = 600
                    self.match(Parser.RETURNS)
                    self.state = 601
                    self.outputParameterTypeComponent()

                self.state = 604
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterComponentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def getRuleIndex(self):
            return Parser.RULE_parameterComponent

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameterComponent"):
                return visitor.visitParameterComponent(self)
            else:
                return visitor.visitChildren(self)

    def parameterComponent(self):

        localctx = Parser.ParameterComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_parameterComponent)
        try:
            self.state = 610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                Parser.LPAREN,
                Parser.PLUS,
                Parser.MINUS,
                Parser.EVAL,
                Parser.IF,
                Parser.CURRENT_DATE,
                Parser.NOT,
                Parser.BETWEEN,
                Parser.NULL_CONSTANT,
                Parser.ISNULL,
                Parser.RANK,
                Parser.MIN,
                Parser.MAX,
                Parser.ABS,
                Parser.LN,
                Parser.LOG,
                Parser.TRUNC,
                Parser.ROUND,
                Parser.POWER,
                Parser.MOD,
                Parser.LEN,
                Parser.TRIM,
                Parser.UCASE,
                Parser.LCASE,
                Parser.SUBSTR,
                Parser.SUM,
                Parser.AVG,
                Parser.MEDIAN,
                Parser.COUNT,
                Parser.EXP,
                Parser.CHARSET_MATCH,
                Parser.NVL,
                Parser.LTRIM,
                Parser.RTRIM,
                Parser.INSTR,
                Parser.REPLACE,
                Parser.CEIL,
                Parser.FLOOR,
                Parser.SQRT,
                Parser.STDDEV_POP,
                Parser.STDDEV_SAMP,
                Parser.VAR_POP,
                Parser.VAR_SAMP,
                Parser.FIRST_VALUE,
                Parser.LAST_VALUE,
                Parser.LAG,
                Parser.LEAD,
                Parser.RATIO_TO_REPORT,
                Parser.FILL_TIME_SERIES,
                Parser.FLOW_TO_STOCK,
                Parser.STOCK_TO_FLOW,
                Parser.TIMESHIFT,
                Parser.PERIOD_INDICATOR,
                Parser.TIME_AGG,
                Parser.CAST,
                Parser.INTEGER_CONSTANT,
                Parser.NUMBER_CONSTANT,
                Parser.BOOLEAN_CONSTANT,
                Parser.STRING_CONSTANT,
                Parser.IDENTIFIER,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                self.exprComponent(0)
                pass
            elif token in [Parser.OPTIONAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 609
                self.match(Parser.OPTIONAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def getRuleIndex(self):
            return Parser.RULE_parameter

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameter"):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)

    def parameter(self):

        localctx = Parser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_parameter)
        try:
            self.state = 614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                Parser.LPAREN,
                Parser.PLUS,
                Parser.MINUS,
                Parser.EVAL,
                Parser.IF,
                Parser.CURRENT_DATE,
                Parser.NOT,
                Parser.BETWEEN,
                Parser.NULL_CONSTANT,
                Parser.ISNULL,
                Parser.UNION,
                Parser.SYMDIFF,
                Parser.INTERSECT,
                Parser.CHECK,
                Parser.EXISTS_IN,
                Parser.MIN,
                Parser.MAX,
                Parser.ABS,
                Parser.LN,
                Parser.LOG,
                Parser.TRUNC,
                Parser.ROUND,
                Parser.POWER,
                Parser.MOD,
                Parser.LEN,
                Parser.TRIM,
                Parser.UCASE,
                Parser.LCASE,
                Parser.SUBSTR,
                Parser.SUM,
                Parser.AVG,
                Parser.MEDIAN,
                Parser.COUNT,
                Parser.EXP,
                Parser.CHARSET_MATCH,
                Parser.NVL,
                Parser.HIERARCHY,
                Parser.LTRIM,
                Parser.RTRIM,
                Parser.INSTR,
                Parser.REPLACE,
                Parser.CEIL,
                Parser.FLOOR,
                Parser.SQRT,
                Parser.SETDIFF,
                Parser.STDDEV_POP,
                Parser.STDDEV_SAMP,
                Parser.VAR_POP,
                Parser.VAR_SAMP,
                Parser.FIRST_VALUE,
                Parser.LAST_VALUE,
                Parser.LAG,
                Parser.LEAD,
                Parser.RATIO_TO_REPORT,
                Parser.FILL_TIME_SERIES,
                Parser.FLOW_TO_STOCK,
                Parser.STOCK_TO_FLOW,
                Parser.TIMESHIFT,
                Parser.INNER_JOIN,
                Parser.LEFT_JOIN,
                Parser.CROSS_JOIN,
                Parser.FULL_JOIN,
                Parser.PERIOD_INDICATOR,
                Parser.TIME_AGG,
                Parser.CAST,
                Parser.CHECK_DATAPOINT,
                Parser.CHECK_HIERARCHY,
                Parser.INTEGER_CONSTANT,
                Parser.NUMBER_CONSTANT,
                Parser.BOOLEAN_CONSTANT,
                Parser.STRING_CONSTANT,
                Parser.IDENTIFIER,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self.expr(0)
                pass
            elif token in [Parser.OPTIONAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.match(Parser.OPTIONAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringOperatorsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_stringOperators

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class InstrAtomContext(StringOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.StringOperatorsContext
            super().__init__(parser)
            self.pattern = None  # ExprContext
            self.startParameter = None  # OptionalExprContext
            self.occurrenceParameter = None  # OptionalExprContext
            self.copyFrom(ctx)

        def INSTR(self):
            return self.getToken(Parser.INSTR, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def optionalExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.OptionalExprContext)
            else:
                return self.getTypedRuleContext(Parser.OptionalExprContext, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInstrAtom"):
                return visitor.visitInstrAtom(self)
            else:
                return visitor.visitChildren(self)

    class UnaryStringFunctionContext(StringOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.StringOperatorsContext
            super().__init__(parser)
            self.op = None  # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def TRIM(self):
            return self.getToken(Parser.TRIM, 0)

        def LTRIM(self):
            return self.getToken(Parser.LTRIM, 0)

        def RTRIM(self):
            return self.getToken(Parser.RTRIM, 0)

        def UCASE(self):
            return self.getToken(Parser.UCASE, 0)

        def LCASE(self):
            return self.getToken(Parser.LCASE, 0)

        def LEN(self):
            return self.getToken(Parser.LEN, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryStringFunction"):
                return visitor.visitUnaryStringFunction(self)
            else:
                return visitor.visitChildren(self)

    class SubstrAtomContext(StringOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.StringOperatorsContext
            super().__init__(parser)
            self.startParameter = None  # OptionalExprContext
            self.endParameter = None  # OptionalExprContext
            self.copyFrom(ctx)

        def SUBSTR(self):
            return self.getToken(Parser.SUBSTR, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def optionalExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.OptionalExprContext)
            else:
                return self.getTypedRuleContext(Parser.OptionalExprContext, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubstrAtom"):
                return visitor.visitSubstrAtom(self)
            else:
                return visitor.visitChildren(self)

    class ReplaceAtomContext(StringOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.StringOperatorsContext
            super().__init__(parser)
            self.param = None  # ExprContext
            self.copyFrom(ctx)

        def REPLACE(self):
            return self.getToken(Parser.REPLACE, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def optionalExpr(self):
            return self.getTypedRuleContext(Parser.OptionalExprContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReplaceAtom"):
                return visitor.visitReplaceAtom(self)
            else:
                return visitor.visitChildren(self)

    def stringOperators(self):

        localctx = Parser.StringOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_stringOperators)
        self._la = 0  # Token type
        try:
            self.state = 664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                Parser.LEN,
                Parser.TRIM,
                Parser.UCASE,
                Parser.LCASE,
                Parser.LTRIM,
                Parser.RTRIM,
            ]:
                localctx = Parser.UnaryStringFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 616
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 81)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 81))
                            & (
                                (1 << (Parser.LEN - 81))
                                | (1 << (Parser.TRIM - 81))
                                | (1 << (Parser.UCASE - 81))
                                | (1 << (Parser.LCASE - 81))
                                | (1 << (Parser.LTRIM - 81))
                                | (1 << (Parser.RTRIM - 81))
                            )
                        )
                        != 0
                    )
                ):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 617
                self.match(Parser.LPAREN)
                self.state = 618
                self.expr(0)
                self.state = 619
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.SUBSTR]:
                localctx = Parser.SubstrAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 621
                self.match(Parser.SUBSTR)
                self.state = 622
                self.match(Parser.LPAREN)
                self.state = 623
                self.expr(0)
                self.state = 634
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 47, self._ctx)
                if la_ == 1:
                    self.state = 630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Parser.COMMA:
                        self.state = 624
                        self.match(Parser.COMMA)
                        self.state = 625
                        localctx.startParameter = self.optionalExpr()

                        self.state = 627
                        self.match(Parser.COMMA)
                        self.state = 628
                        localctx.endParameter = self.optionalExpr()

                    pass

                elif la_ == 2:
                    self.state = 632
                    self.match(Parser.COMMA)
                    self.state = 633
                    localctx.startParameter = self.optionalExpr()
                    pass

                self.state = 636
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.REPLACE]:
                localctx = Parser.ReplaceAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 638
                self.match(Parser.REPLACE)
                self.state = 639
                self.match(Parser.LPAREN)
                self.state = 640
                self.expr(0)
                self.state = 641
                self.match(Parser.COMMA)
                self.state = 642
                localctx.param = self.expr(0)
                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 643
                    self.match(Parser.COMMA)
                    self.state = 644
                    self.optionalExpr()

                self.state = 647
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.INSTR]:
                localctx = Parser.InstrAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 649
                self.match(Parser.INSTR)
                self.state = 650
                self.match(Parser.LPAREN)
                self.state = 651
                self.expr(0)
                self.state = 652
                self.match(Parser.COMMA)
                self.state = 653
                localctx.pattern = self.expr(0)
                self.state = 656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 49, self._ctx)
                if la_ == 1:
                    self.state = 654
                    self.match(Parser.COMMA)
                    self.state = 655
                    localctx.startParameter = self.optionalExpr()

                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 658
                    self.match(Parser.COMMA)
                    self.state = 659
                    localctx.occurrenceParameter = self.optionalExpr()

                self.state = 662
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringOperatorsComponentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_stringOperatorsComponent

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ReplaceAtomComponentContext(StringOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.StringOperatorsComponentContext
            super().__init__(parser)
            self.param = None  # ExprComponentContext
            self.copyFrom(ctx)

        def REPLACE(self):
            return self.getToken(Parser.REPLACE, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def exprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def optionalExprComponent(self):
            return self.getTypedRuleContext(Parser.OptionalExprComponentContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReplaceAtomComponent"):
                return visitor.visitReplaceAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    class UnaryStringFunctionComponentContext(StringOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.StringOperatorsComponentContext
            super().__init__(parser)
            self.op = None  # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def TRIM(self):
            return self.getToken(Parser.TRIM, 0)

        def LTRIM(self):
            return self.getToken(Parser.LTRIM, 0)

        def RTRIM(self):
            return self.getToken(Parser.RTRIM, 0)

        def UCASE(self):
            return self.getToken(Parser.UCASE, 0)

        def LCASE(self):
            return self.getToken(Parser.LCASE, 0)

        def LEN(self):
            return self.getToken(Parser.LEN, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryStringFunctionComponent"):
                return visitor.visitUnaryStringFunctionComponent(self)
            else:
                return visitor.visitChildren(self)

    class SubstrAtomComponentContext(StringOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.StringOperatorsComponentContext
            super().__init__(parser)
            self.startParameter = None  # OptionalExprComponentContext
            self.endParameter = None  # OptionalExprComponentContext
            self.copyFrom(ctx)

        def SUBSTR(self):
            return self.getToken(Parser.SUBSTR, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def optionalExprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.OptionalExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.OptionalExprComponentContext, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubstrAtomComponent"):
                return visitor.visitSubstrAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    class InstrAtomComponentContext(StringOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.StringOperatorsComponentContext
            super().__init__(parser)
            self.pattern = None  # ExprComponentContext
            self.startParameter = None  # OptionalExprComponentContext
            self.occurrenceParameter = None  # OptionalExprComponentContext
            self.copyFrom(ctx)

        def INSTR(self):
            return self.getToken(Parser.INSTR, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def exprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def optionalExprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.OptionalExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.OptionalExprComponentContext, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInstrAtomComponent"):
                return visitor.visitInstrAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    def stringOperatorsComponent(self):

        localctx = Parser.StringOperatorsComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_stringOperatorsComponent)
        self._la = 0  # Token type
        try:
            self.state = 714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                Parser.LEN,
                Parser.TRIM,
                Parser.UCASE,
                Parser.LCASE,
                Parser.LTRIM,
                Parser.RTRIM,
            ]:
                localctx = Parser.UnaryStringFunctionComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 81)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 81))
                            & (
                                (1 << (Parser.LEN - 81))
                                | (1 << (Parser.TRIM - 81))
                                | (1 << (Parser.UCASE - 81))
                                | (1 << (Parser.LCASE - 81))
                                | (1 << (Parser.LTRIM - 81))
                                | (1 << (Parser.RTRIM - 81))
                            )
                        )
                        != 0
                    )
                ):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 667
                self.match(Parser.LPAREN)
                self.state = 668
                self.exprComponent(0)
                self.state = 669
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.SUBSTR]:
                localctx = Parser.SubstrAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self.match(Parser.SUBSTR)
                self.state = 672
                self.match(Parser.LPAREN)
                self.state = 673
                self.exprComponent(0)
                self.state = 684
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
                if la_ == 1:
                    self.state = 680
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Parser.COMMA:
                        self.state = 674
                        self.match(Parser.COMMA)
                        self.state = 675
                        localctx.startParameter = self.optionalExprComponent()

                        self.state = 677
                        self.match(Parser.COMMA)
                        self.state = 678
                        localctx.endParameter = self.optionalExprComponent()

                    pass

                elif la_ == 2:
                    self.state = 682
                    self.match(Parser.COMMA)
                    self.state = 683
                    localctx.startParameter = self.optionalExprComponent()
                    pass

                self.state = 686
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.REPLACE]:
                localctx = Parser.ReplaceAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 688
                self.match(Parser.REPLACE)
                self.state = 689
                self.match(Parser.LPAREN)
                self.state = 690
                self.exprComponent(0)
                self.state = 691
                self.match(Parser.COMMA)
                self.state = 692
                localctx.param = self.exprComponent(0)
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 693
                    self.match(Parser.COMMA)
                    self.state = 694
                    self.optionalExprComponent()

                self.state = 697
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.INSTR]:
                localctx = Parser.InstrAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 699
                self.match(Parser.INSTR)
                self.state = 700
                self.match(Parser.LPAREN)
                self.state = 701
                self.exprComponent(0)
                self.state = 702
                self.match(Parser.COMMA)
                self.state = 703
                localctx.pattern = self.exprComponent(0)
                self.state = 706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 55, self._ctx)
                if la_ == 1:
                    self.state = 704
                    self.match(Parser.COMMA)
                    self.state = 705
                    localctx.startParameter = self.optionalExprComponent()

                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 708
                    self.match(Parser.COMMA)
                    self.state = 709
                    localctx.occurrenceParameter = self.optionalExprComponent()

                self.state = 712
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericOperatorsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_numericOperators

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class UnaryNumericContext(NumericOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.NumericOperatorsContext
            super().__init__(parser)
            self.op = None  # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def CEIL(self):
            return self.getToken(Parser.CEIL, 0)

        def FLOOR(self):
            return self.getToken(Parser.FLOOR, 0)

        def ABS(self):
            return self.getToken(Parser.ABS, 0)

        def EXP(self):
            return self.getToken(Parser.EXP, 0)

        def LN(self):
            return self.getToken(Parser.LN, 0)

        def SQRT(self):
            return self.getToken(Parser.SQRT, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryNumeric"):
                return visitor.visitUnaryNumeric(self)
            else:
                return visitor.visitChildren(self)

    class UnaryWithOptionalNumericContext(NumericOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.NumericOperatorsContext
            super().__init__(parser)
            self.op = None  # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def ROUND(self):
            return self.getToken(Parser.ROUND, 0)

        def TRUNC(self):
            return self.getToken(Parser.TRUNC, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def optionalExpr(self):
            return self.getTypedRuleContext(Parser.OptionalExprContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryWithOptionalNumeric"):
                return visitor.visitUnaryWithOptionalNumeric(self)
            else:
                return visitor.visitChildren(self)

    class BinaryNumericContext(NumericOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.NumericOperatorsContext
            super().__init__(parser)
            self.op = None  # Token
            self.left = None  # ExprContext
            self.right = None  # ExprContext
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def MOD(self):
            return self.getToken(Parser.MOD, 0)

        def POWER(self):
            return self.getToken(Parser.POWER, 0)

        def LOG(self):
            return self.getToken(Parser.LOG, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBinaryNumeric"):
                return visitor.visitBinaryNumeric(self)
            else:
                return visitor.visitChildren(self)

    def numericOperators(self):

        localctx = Parser.NumericOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_numericOperators)
        self._la = 0  # Token type
        try:
            self.state = 737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.ABS, Parser.LN, Parser.EXP, Parser.CEIL, Parser.FLOOR, Parser.SQRT]:
                localctx = Parser.UnaryNumericContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 73)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 73))
                            & (
                                (1 << (Parser.ABS - 73))
                                | (1 << (Parser.LN - 73))
                                | (1 << (Parser.EXP - 73))
                                | (1 << (Parser.CEIL - 73))
                                | (1 << (Parser.FLOOR - 73))
                                | (1 << (Parser.SQRT - 73))
                            )
                        )
                        != 0
                    )
                ):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 717
                self.match(Parser.LPAREN)
                self.state = 718
                self.expr(0)
                self.state = 719
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.TRUNC, Parser.ROUND]:
                localctx = Parser.UnaryWithOptionalNumericContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == Parser.TRUNC or _la == Parser.ROUND):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 722
                self.match(Parser.LPAREN)
                self.state = 723
                self.expr(0)
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 724
                    self.match(Parser.COMMA)
                    self.state = 725
                    self.optionalExpr()

                self.state = 728
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.LOG, Parser.POWER, Parser.MOD]:
                localctx = Parser.BinaryNumericContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 730
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 76)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 76))
                            & (
                                (1 << (Parser.LOG - 76))
                                | (1 << (Parser.POWER - 76))
                                | (1 << (Parser.MOD - 76))
                            )
                        )
                        != 0
                    )
                ):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 731
                self.match(Parser.LPAREN)
                self.state = 732
                localctx.left = self.expr(0)
                self.state = 733
                self.match(Parser.COMMA)
                self.state = 734
                localctx.right = self.expr(0)
                self.state = 735
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericOperatorsComponentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_numericOperatorsComponent

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class UnaryNumericComponentContext(NumericOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.NumericOperatorsComponentContext
            super().__init__(parser)
            self.op = None  # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def CEIL(self):
            return self.getToken(Parser.CEIL, 0)

        def FLOOR(self):
            return self.getToken(Parser.FLOOR, 0)

        def ABS(self):
            return self.getToken(Parser.ABS, 0)

        def EXP(self):
            return self.getToken(Parser.EXP, 0)

        def LN(self):
            return self.getToken(Parser.LN, 0)

        def SQRT(self):
            return self.getToken(Parser.SQRT, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryNumericComponent"):
                return visitor.visitUnaryNumericComponent(self)
            else:
                return visitor.visitChildren(self)

    class BinaryNumericComponentContext(NumericOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.NumericOperatorsComponentContext
            super().__init__(parser)
            self.op = None  # Token
            self.left = None  # ExprComponentContext
            self.right = None  # ExprComponentContext
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def exprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext, i)

        def MOD(self):
            return self.getToken(Parser.MOD, 0)

        def POWER(self):
            return self.getToken(Parser.POWER, 0)

        def LOG(self):
            return self.getToken(Parser.LOG, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBinaryNumericComponent"):
                return visitor.visitBinaryNumericComponent(self)
            else:
                return visitor.visitChildren(self)

    class UnaryWithOptionalNumericComponentContext(NumericOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.NumericOperatorsComponentContext
            super().__init__(parser)
            self.op = None  # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def ROUND(self):
            return self.getToken(Parser.ROUND, 0)

        def TRUNC(self):
            return self.getToken(Parser.TRUNC, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def optionalExprComponent(self):
            return self.getTypedRuleContext(Parser.OptionalExprComponentContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryWithOptionalNumericComponent"):
                return visitor.visitUnaryWithOptionalNumericComponent(self)
            else:
                return visitor.visitChildren(self)

    def numericOperatorsComponent(self):

        localctx = Parser.NumericOperatorsComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_numericOperatorsComponent)
        self._la = 0  # Token type
        try:
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.ABS, Parser.LN, Parser.EXP, Parser.CEIL, Parser.FLOOR, Parser.SQRT]:
                localctx = Parser.UnaryNumericComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 73)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 73))
                            & (
                                (1 << (Parser.ABS - 73))
                                | (1 << (Parser.LN - 73))
                                | (1 << (Parser.EXP - 73))
                                | (1 << (Parser.CEIL - 73))
                                | (1 << (Parser.FLOOR - 73))
                                | (1 << (Parser.SQRT - 73))
                            )
                        )
                        != 0
                    )
                ):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 740
                self.match(Parser.LPAREN)
                self.state = 741
                self.exprComponent(0)
                self.state = 742
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.TRUNC, Parser.ROUND]:
                localctx = Parser.UnaryWithOptionalNumericComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == Parser.TRUNC or _la == Parser.ROUND):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 745
                self.match(Parser.LPAREN)
                self.state = 746
                self.exprComponent(0)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 747
                    self.match(Parser.COMMA)
                    self.state = 748
                    self.optionalExprComponent()

                self.state = 751
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.LOG, Parser.POWER, Parser.MOD]:
                localctx = Parser.BinaryNumericComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 753
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 76)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 76))
                            & (
                                (1 << (Parser.LOG - 76))
                                | (1 << (Parser.POWER - 76))
                                | (1 << (Parser.MOD - 76))
                            )
                        )
                        != 0
                    )
                ):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 754
                self.match(Parser.LPAREN)
                self.state = 755
                localctx.left = self.exprComponent(0)
                self.state = 756
                self.match(Parser.COMMA)
                self.state = 757
                localctx.right = self.exprComponent(0)
                self.state = 758
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_comparisonOperators

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class BetweenAtomContext(ComparisonOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ComparisonOperatorsContext
            super().__init__(parser)
            self.op = None  # ExprContext
            self.from_ = None  # ExprContext
            self.to_ = None  # ExprContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(Parser.BETWEEN, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBetweenAtom"):
                return visitor.visitBetweenAtom(self)
            else:
                return visitor.visitChildren(self)

    class CharsetMatchAtomContext(ComparisonOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ComparisonOperatorsContext
            super().__init__(parser)
            self.op = None  # ExprContext
            self.pattern = None  # ExprContext
            self.copyFrom(ctx)

        def CHARSET_MATCH(self):
            return self.getToken(Parser.CHARSET_MATCH, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCharsetMatchAtom"):
                return visitor.visitCharsetMatchAtom(self)
            else:
                return visitor.visitChildren(self)

    class IsNullAtomContext(ComparisonOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ComparisonOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISNULL(self):
            return self.getToken(Parser.ISNULL, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIsNullAtom"):
                return visitor.visitIsNullAtom(self)
            else:
                return visitor.visitChildren(self)

    class ExistInAtomContext(ComparisonOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ComparisonOperatorsContext
            super().__init__(parser)
            self.left = None  # ExprContext
            self.right = None  # ExprContext
            self.copyFrom(ctx)

        def EXISTS_IN(self):
            return self.getToken(Parser.EXISTS_IN, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def retainType(self):
            return self.getTypedRuleContext(Parser.RetainTypeContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExistInAtom"):
                return visitor.visitExistInAtom(self)
            else:
                return visitor.visitChildren(self)

    def comparisonOperators(self):

        localctx = Parser.ComparisonOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_comparisonOperators)
        self._la = 0  # Token type
        try:
            self.state = 794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.BETWEEN]:
                localctx = Parser.BetweenAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.match(Parser.BETWEEN)
                self.state = 763
                self.match(Parser.LPAREN)
                self.state = 764
                localctx.op = self.expr(0)
                self.state = 765
                self.match(Parser.COMMA)
                self.state = 766
                localctx.from_ = self.expr(0)
                self.state = 767
                self.match(Parser.COMMA)
                self.state = 768
                localctx.to_ = self.expr(0)
                self.state = 769
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CHARSET_MATCH]:
                localctx = Parser.CharsetMatchAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.match(Parser.CHARSET_MATCH)
                self.state = 772
                self.match(Parser.LPAREN)
                self.state = 773
                localctx.op = self.expr(0)
                self.state = 774
                self.match(Parser.COMMA)
                self.state = 775
                localctx.pattern = self.expr(0)
                self.state = 776
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.ISNULL]:
                localctx = Parser.IsNullAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 778
                self.match(Parser.ISNULL)
                self.state = 779
                self.match(Parser.LPAREN)
                self.state = 780
                self.expr(0)
                self.state = 781
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.EXISTS_IN]:
                localctx = Parser.ExistInAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 783
                self.match(Parser.EXISTS_IN)
                self.state = 784
                self.match(Parser.LPAREN)
                self.state = 785
                localctx.left = self.expr(0)
                self.state = 786
                self.match(Parser.COMMA)
                self.state = 787
                localctx.right = self.expr(0)
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 788
                    self.match(Parser.COMMA)
                    self.state = 789
                    self.retainType()

                self.state = 792
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorsComponentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_comparisonOperatorsComponent

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class IsNullAtomComponentContext(ComparisonOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ComparisonOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISNULL(self):
            return self.getToken(Parser.ISNULL, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIsNullAtomComponent"):
                return visitor.visitIsNullAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    class CharsetMatchAtomComponentContext(ComparisonOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ComparisonOperatorsComponentContext
            super().__init__(parser)
            self.op = None  # ExprComponentContext
            self.pattern = None  # ExprComponentContext
            self.copyFrom(ctx)

        def CHARSET_MATCH(self):
            return self.getToken(Parser.CHARSET_MATCH, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def exprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCharsetMatchAtomComponent"):
                return visitor.visitCharsetMatchAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    class BetweenAtomComponentContext(ComparisonOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ComparisonOperatorsComponentContext
            super().__init__(parser)
            self.op = None  # ExprComponentContext
            self.from_ = None  # ExprComponentContext
            self.to_ = None  # ExprComponentContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(Parser.BETWEEN, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def exprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBetweenAtomComponent"):
                return visitor.visitBetweenAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    def comparisonOperatorsComponent(self):

        localctx = Parser.ComparisonOperatorsComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_comparisonOperatorsComponent)
        try:
            self.state = 817
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.BETWEEN]:
                localctx = Parser.BetweenAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.match(Parser.BETWEEN)
                self.state = 797
                self.match(Parser.LPAREN)
                self.state = 798
                localctx.op = self.exprComponent(0)
                self.state = 799
                self.match(Parser.COMMA)
                self.state = 800
                localctx.from_ = self.exprComponent(0)
                self.state = 801
                self.match(Parser.COMMA)
                self.state = 802
                localctx.to_ = self.exprComponent(0)
                self.state = 803
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CHARSET_MATCH]:
                localctx = Parser.CharsetMatchAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                self.match(Parser.CHARSET_MATCH)
                self.state = 806
                self.match(Parser.LPAREN)
                self.state = 807
                localctx.op = self.exprComponent(0)
                self.state = 808
                self.match(Parser.COMMA)
                self.state = 809
                localctx.pattern = self.exprComponent(0)
                self.state = 810
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.ISNULL]:
                localctx = Parser.IsNullAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 812
                self.match(Parser.ISNULL)
                self.state = 813
                self.match(Parser.LPAREN)
                self.state = 814
                self.exprComponent(0)
                self.state = 815
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeOperatorsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_timeOperators

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class FlowAtomContext(TimeOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.TimeOperatorsContext
            super().__init__(parser)
            self.op = None  # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def FLOW_TO_STOCK(self):
            return self.getToken(Parser.FLOW_TO_STOCK, 0)

        def STOCK_TO_FLOW(self):
            return self.getToken(Parser.STOCK_TO_FLOW, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFlowAtom"):
                return visitor.visitFlowAtom(self)
            else:
                return visitor.visitChildren(self)

    class TimeShiftAtomContext(TimeOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESHIFT(self):
            return self.getToken(Parser.TIMESHIFT, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def signedInteger(self):
            return self.getTypedRuleContext(Parser.SignedIntegerContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeShiftAtom"):
                return visitor.visitTimeShiftAtom(self)
            else:
                return visitor.visitChildren(self)

    class TimeAggAtomContext(TimeOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.TimeOperatorsContext
            super().__init__(parser)
            self.periodIndTo = None  # Token
            self.periodIndFrom = None  # Token
            self.op = None  # OptionalExprContext
            self.copyFrom(ctx)

        def TIME_AGG(self):
            return self.getToken(Parser.TIME_AGG, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def STRING_CONSTANT(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.STRING_CONSTANT)
            else:
                return self.getToken(Parser.STRING_CONSTANT, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def optionalExpr(self):
            return self.getTypedRuleContext(Parser.OptionalExprContext, 0)

        def FIRST(self):
            return self.getToken(Parser.FIRST, 0)

        def LAST(self):
            return self.getToken(Parser.LAST, 0)

        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeAggAtom"):
                return visitor.visitTimeAggAtom(self)
            else:
                return visitor.visitChildren(self)

    class CurrentDateAtomContext(TimeOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(Parser.CURRENT_DATE, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCurrentDateAtom"):
                return visitor.visitCurrentDateAtom(self)
            else:
                return visitor.visitChildren(self)

    class PeriodAtomContext(TimeOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERIOD_INDICATOR(self):
            return self.getToken(Parser.PERIOD_INDICATOR, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPeriodAtom"):
                return visitor.visitPeriodAtom(self)
            else:
                return visitor.visitChildren(self)

    class FillTimeAtomContext(TimeOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FILL_TIME_SERIES(self):
            return self.getToken(Parser.FILL_TIME_SERIES, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def SINGLE(self):
            return self.getToken(Parser.SINGLE, 0)

        def ALL(self):
            return self.getToken(Parser.ALL, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFillTimeAtom"):
                return visitor.visitFillTimeAtom(self)
            else:
                return visitor.visitChildren(self)

    def timeOperators(self):

        localctx = Parser.TimeOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_timeOperators)
        self._la = 0  # Token type
        try:
            self.state = 865
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.PERIOD_INDICATOR]:
                localctx = Parser.PeriodAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.match(Parser.PERIOD_INDICATOR)
                self.state = 820
                self.match(Parser.LPAREN)
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << Parser.LPAREN)
                                | (1 << Parser.PLUS)
                                | (1 << Parser.MINUS)
                                | (1 << Parser.EVAL)
                                | (1 << Parser.IF)
                                | (1 << Parser.CURRENT_DATE)
                                | (1 << Parser.NOT)
                                | (1 << Parser.BETWEEN)
                                | (1 << Parser.NULL_CONSTANT)
                                | (1 << Parser.ISNULL)
                                | (1 << Parser.UNION)
                                | (1 << Parser.SYMDIFF)
                                | (1 << Parser.INTERSECT)
                                | (1 << Parser.CHECK)
                                | (1 << Parser.EXISTS_IN)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 68)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 68))
                            & (
                                (1 << (Parser.MIN - 68))
                                | (1 << (Parser.MAX - 68))
                                | (1 << (Parser.ABS - 68))
                                | (1 << (Parser.LN - 68))
                                | (1 << (Parser.LOG - 68))
                                | (1 << (Parser.TRUNC - 68))
                                | (1 << (Parser.ROUND - 68))
                                | (1 << (Parser.POWER - 68))
                                | (1 << (Parser.MOD - 68))
                                | (1 << (Parser.LEN - 68))
                                | (1 << (Parser.TRIM - 68))
                                | (1 << (Parser.UCASE - 68))
                                | (1 << (Parser.LCASE - 68))
                                | (1 << (Parser.SUBSTR - 68))
                                | (1 << (Parser.SUM - 68))
                                | (1 << (Parser.AVG - 68))
                                | (1 << (Parser.MEDIAN - 68))
                                | (1 << (Parser.COUNT - 68))
                                | (1 << (Parser.EXP - 68))
                                | (1 << (Parser.CHARSET_MATCH - 68))
                                | (1 << (Parser.NVL - 68))
                                | (1 << (Parser.HIERARCHY - 68))
                                | (1 << (Parser.LTRIM - 68))
                                | (1 << (Parser.RTRIM - 68))
                                | (1 << (Parser.INSTR - 68))
                                | (1 << (Parser.REPLACE - 68))
                                | (1 << (Parser.CEIL - 68))
                                | (1 << (Parser.FLOOR - 68))
                                | (1 << (Parser.SQRT - 68))
                                | (1 << (Parser.SETDIFF - 68))
                                | (1 << (Parser.STDDEV_POP - 68))
                                | (1 << (Parser.STDDEV_SAMP - 68))
                                | (1 << (Parser.VAR_POP - 68))
                                | (1 << (Parser.VAR_SAMP - 68))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 135)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 135))
                            & (
                                (1 << (Parser.FIRST_VALUE - 135))
                                | (1 << (Parser.LAST_VALUE - 135))
                                | (1 << (Parser.LAG - 135))
                                | (1 << (Parser.LEAD - 135))
                                | (1 << (Parser.RATIO_TO_REPORT - 135))
                                | (1 << (Parser.FILL_TIME_SERIES - 135))
                                | (1 << (Parser.FLOW_TO_STOCK - 135))
                                | (1 << (Parser.STOCK_TO_FLOW - 135))
                                | (1 << (Parser.TIMESHIFT - 135))
                                | (1 << (Parser.INNER_JOIN - 135))
                                | (1 << (Parser.LEFT_JOIN - 135))
                                | (1 << (Parser.CROSS_JOIN - 135))
                                | (1 << (Parser.FULL_JOIN - 135))
                                | (1 << (Parser.PERIOD_INDICATOR - 135))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 199)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 199))
                            & (
                                (1 << (Parser.TIME_AGG - 199))
                                | (1 << (Parser.CAST - 199))
                                | (1 << (Parser.CHECK_DATAPOINT - 199))
                                | (1 << (Parser.CHECK_HIERARCHY - 199))
                                | (1 << (Parser.INTEGER_CONSTANT - 199))
                                | (1 << (Parser.NUMBER_CONSTANT - 199))
                                | (1 << (Parser.BOOLEAN_CONSTANT - 199))
                                | (1 << (Parser.STRING_CONSTANT - 199))
                                | (1 << (Parser.IDENTIFIER - 199))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 821
                    self.expr(0)

                self.state = 824
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.FILL_TIME_SERIES]:
                localctx = Parser.FillTimeAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 825
                self.match(Parser.FILL_TIME_SERIES)
                self.state = 826
                self.match(Parser.LPAREN)
                self.state = 827
                self.expr(0)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 828
                    self.match(Parser.COMMA)
                    self.state = 829
                    _la = self._input.LA(1)
                    if not (_la == Parser.ALL or _la == Parser.SINGLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 832
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.FLOW_TO_STOCK, Parser.STOCK_TO_FLOW]:
                localctx = Parser.FlowAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 834
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == Parser.FLOW_TO_STOCK or _la == Parser.STOCK_TO_FLOW):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 835
                self.match(Parser.LPAREN)
                self.state = 836
                self.expr(0)
                self.state = 837
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.TIMESHIFT]:
                localctx = Parser.TimeShiftAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 839
                self.match(Parser.TIMESHIFT)
                self.state = 840
                self.match(Parser.LPAREN)
                self.state = 841
                self.expr(0)
                self.state = 842
                self.match(Parser.COMMA)
                self.state = 843
                self.signedInteger()
                self.state = 844
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.TIME_AGG]:
                localctx = Parser.TimeAggAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 846
                self.match(Parser.TIME_AGG)
                self.state = 847
                self.match(Parser.LPAREN)
                self.state = 848
                localctx.periodIndTo = self.match(Parser.STRING_CONSTANT)
                self.state = 851
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
                if la_ == 1:
                    self.state = 849
                    self.match(Parser.COMMA)
                    self.state = 850
                    localctx.periodIndFrom = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not (_la == Parser.OPTIONAL or _la == Parser.STRING_CONSTANT):
                        localctx.periodIndFrom = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 855
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 68, self._ctx)
                if la_ == 1:
                    self.state = 853
                    self.match(Parser.COMMA)
                    self.state = 854
                    localctx.op = self.optionalExpr()

                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 857
                    self.match(Parser.COMMA)
                    self.state = 858
                    _la = self._input.LA(1)
                    if not (_la == Parser.FIRST or _la == Parser.LAST):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 861
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CURRENT_DATE]:
                localctx = Parser.CurrentDateAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 862
                self.match(Parser.CURRENT_DATE)
                self.state = 863
                self.match(Parser.LPAREN)
                self.state = 864
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeOperatorsComponentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_timeOperatorsComponent

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class PeriodAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERIOD_INDICATOR(self):
            return self.getToken(Parser.PERIOD_INDICATOR, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPeriodAtomComponent"):
                return visitor.visitPeriodAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    class TimeShiftAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESHIFT(self):
            return self.getToken(Parser.TIMESHIFT, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def signedInteger(self):
            return self.getTypedRuleContext(Parser.SignedIntegerContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeShiftAtomComponent"):
                return visitor.visitTimeShiftAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    class TimeAggAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.periodIndTo = None  # Token
            self.periodIndFrom = None  # Token
            self.op = None  # OptionalExprComponentContext
            self.copyFrom(ctx)

        def TIME_AGG(self):
            return self.getToken(Parser.TIME_AGG, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def STRING_CONSTANT(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.STRING_CONSTANT)
            else:
                return self.getToken(Parser.STRING_CONSTANT, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def optionalExprComponent(self):
            return self.getTypedRuleContext(Parser.OptionalExprComponentContext, 0)

        def FIRST(self):
            return self.getToken(Parser.FIRST, 0)

        def LAST(self):
            return self.getToken(Parser.LAST, 0)

        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeAggAtomComponent"):
                return visitor.visitTimeAggAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    class CurrentDateAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(Parser.CURRENT_DATE, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCurrentDateAtomComponent"):
                return visitor.visitCurrentDateAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    class FlowAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.op = None  # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def FLOW_TO_STOCK(self):
            return self.getToken(Parser.FLOW_TO_STOCK, 0)

        def STOCK_TO_FLOW(self):
            return self.getToken(Parser.STOCK_TO_FLOW, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFlowAtomComponent"):
                return visitor.visitFlowAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    class FillTimeAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FILL_TIME_SERIES(self):
            return self.getToken(Parser.FILL_TIME_SERIES, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def SINGLE(self):
            return self.getToken(Parser.SINGLE, 0)

        def ALL(self):
            return self.getToken(Parser.ALL, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFillTimeAtomComponent"):
                return visitor.visitFillTimeAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    def timeOperatorsComponent(self):

        localctx = Parser.TimeOperatorsComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_timeOperatorsComponent)
        self._la = 0  # Token type
        try:
            self.state = 913
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.PERIOD_INDICATOR]:
                localctx = Parser.PeriodAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 867
                self.match(Parser.PERIOD_INDICATOR)
                self.state = 868
                self.match(Parser.LPAREN)
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << Parser.LPAREN)
                                | (1 << Parser.PLUS)
                                | (1 << Parser.MINUS)
                                | (1 << Parser.EVAL)
                                | (1 << Parser.IF)
                                | (1 << Parser.CURRENT_DATE)
                                | (1 << Parser.NOT)
                                | (1 << Parser.BETWEEN)
                                | (1 << Parser.NULL_CONSTANT)
                                | (1 << Parser.ISNULL)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 65)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 65))
                            & (
                                (1 << (Parser.RANK - 65))
                                | (1 << (Parser.MIN - 65))
                                | (1 << (Parser.MAX - 65))
                                | (1 << (Parser.ABS - 65))
                                | (1 << (Parser.LN - 65))
                                | (1 << (Parser.LOG - 65))
                                | (1 << (Parser.TRUNC - 65))
                                | (1 << (Parser.ROUND - 65))
                                | (1 << (Parser.POWER - 65))
                                | (1 << (Parser.MOD - 65))
                                | (1 << (Parser.LEN - 65))
                                | (1 << (Parser.TRIM - 65))
                                | (1 << (Parser.UCASE - 65))
                                | (1 << (Parser.LCASE - 65))
                                | (1 << (Parser.SUBSTR - 65))
                                | (1 << (Parser.SUM - 65))
                                | (1 << (Parser.AVG - 65))
                                | (1 << (Parser.MEDIAN - 65))
                                | (1 << (Parser.COUNT - 65))
                                | (1 << (Parser.EXP - 65))
                                | (1 << (Parser.CHARSET_MATCH - 65))
                                | (1 << (Parser.NVL - 65))
                                | (1 << (Parser.LTRIM - 65))
                                | (1 << (Parser.RTRIM - 65))
                                | (1 << (Parser.INSTR - 65))
                                | (1 << (Parser.REPLACE - 65))
                                | (1 << (Parser.CEIL - 65))
                                | (1 << (Parser.FLOOR - 65))
                                | (1 << (Parser.SQRT - 65))
                                | (1 << (Parser.STDDEV_POP - 65))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 129)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 129))
                            & (
                                (1 << (Parser.STDDEV_SAMP - 129))
                                | (1 << (Parser.VAR_POP - 129))
                                | (1 << (Parser.VAR_SAMP - 129))
                                | (1 << (Parser.FIRST_VALUE - 129))
                                | (1 << (Parser.LAST_VALUE - 129))
                                | (1 << (Parser.LAG - 129))
                                | (1 << (Parser.LEAD - 129))
                                | (1 << (Parser.RATIO_TO_REPORT - 129))
                                | (1 << (Parser.FILL_TIME_SERIES - 129))
                                | (1 << (Parser.FLOW_TO_STOCK - 129))
                                | (1 << (Parser.STOCK_TO_FLOW - 129))
                                | (1 << (Parser.TIMESHIFT - 129))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 196)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 196))
                            & (
                                (1 << (Parser.PERIOD_INDICATOR - 196))
                                | (1 << (Parser.TIME_AGG - 196))
                                | (1 << (Parser.CAST - 196))
                                | (1 << (Parser.INTEGER_CONSTANT - 196))
                                | (1 << (Parser.NUMBER_CONSTANT - 196))
                                | (1 << (Parser.BOOLEAN_CONSTANT - 196))
                                | (1 << (Parser.STRING_CONSTANT - 196))
                                | (1 << (Parser.IDENTIFIER - 196))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 869
                    self.exprComponent(0)

                self.state = 872
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.FILL_TIME_SERIES]:
                localctx = Parser.FillTimeAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 873
                self.match(Parser.FILL_TIME_SERIES)
                self.state = 874
                self.match(Parser.LPAREN)
                self.state = 875
                self.exprComponent(0)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 876
                    self.match(Parser.COMMA)
                    self.state = 877
                    _la = self._input.LA(1)
                    if not (_la == Parser.ALL or _la == Parser.SINGLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 880
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.FLOW_TO_STOCK, Parser.STOCK_TO_FLOW]:
                localctx = Parser.FlowAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 882
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == Parser.FLOW_TO_STOCK or _la == Parser.STOCK_TO_FLOW):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 883
                self.match(Parser.LPAREN)
                self.state = 884
                self.exprComponent(0)
                self.state = 885
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.TIMESHIFT]:
                localctx = Parser.TimeShiftAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 887
                self.match(Parser.TIMESHIFT)
                self.state = 888
                self.match(Parser.LPAREN)
                self.state = 889
                self.exprComponent(0)
                self.state = 890
                self.match(Parser.COMMA)
                self.state = 891
                self.signedInteger()
                self.state = 892
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.TIME_AGG]:
                localctx = Parser.TimeAggAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 894
                self.match(Parser.TIME_AGG)
                self.state = 895
                self.match(Parser.LPAREN)
                self.state = 896
                localctx.periodIndTo = self.match(Parser.STRING_CONSTANT)
                self.state = 899
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 73, self._ctx)
                if la_ == 1:
                    self.state = 897
                    self.match(Parser.COMMA)
                    self.state = 898
                    localctx.periodIndFrom = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not (_la == Parser.OPTIONAL or _la == Parser.STRING_CONSTANT):
                        localctx.periodIndFrom = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 74, self._ctx)
                if la_ == 1:
                    self.state = 901
                    self.match(Parser.COMMA)
                    self.state = 902
                    localctx.op = self.optionalExprComponent()

                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 905
                    self.match(Parser.COMMA)
                    self.state = 906
                    _la = self._input.LA(1)
                    if not (_la == Parser.FIRST or _la == Parser.LAST):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 909
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CURRENT_DATE]:
                localctx = Parser.CurrentDateAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 910
                self.match(Parser.CURRENT_DATE)
                self.state = 911
                self.match(Parser.LPAREN)
                self.state = 912
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetOperatorsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_setOperators

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class SetOrSYmDiffAtomContext(SetOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.SetOperatorsContext
            super().__init__(parser)
            self.op = None  # Token
            self.left = None  # ExprContext
            self.right = None  # ExprContext
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def SETDIFF(self):
            return self.getToken(Parser.SETDIFF, 0)

        def SYMDIFF(self):
            return self.getToken(Parser.SYMDIFF, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSetOrSYmDiffAtom"):
                return visitor.visitSetOrSYmDiffAtom(self)
            else:
                return visitor.visitChildren(self)

    class IntersectAtomContext(SetOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.SetOperatorsContext
            super().__init__(parser)
            self.left = None  # ExprContext
            self.copyFrom(ctx)

        def INTERSECT(self):
            return self.getToken(Parser.INTERSECT, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntersectAtom"):
                return visitor.visitIntersectAtom(self)
            else:
                return visitor.visitChildren(self)

    class UnionAtomContext(SetOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.SetOperatorsContext
            super().__init__(parser)
            self.left = None  # ExprContext
            self.copyFrom(ctx)

        def UNION(self):
            return self.getToken(Parser.UNION, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnionAtom"):
                return visitor.visitUnionAtom(self)
            else:
                return visitor.visitChildren(self)

    def setOperators(self):

        localctx = Parser.SetOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_setOperators)
        self._la = 0  # Token type
        try:
            self.state = 944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.UNION]:
                localctx = Parser.UnionAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 915
                self.match(Parser.UNION)
                self.state = 916
                self.match(Parser.LPAREN)
                self.state = 917
                localctx.left = self.expr(0)
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 918
                    self.match(Parser.COMMA)
                    self.state = 919
                    self.expr(0)
                    self.state = 922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == Parser.COMMA):
                        break

                self.state = 924
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.INTERSECT]:
                localctx = Parser.IntersectAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 926
                self.match(Parser.INTERSECT)
                self.state = 927
                self.match(Parser.LPAREN)
                self.state = 928
                localctx.left = self.expr(0)
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 929
                    self.match(Parser.COMMA)
                    self.state = 930
                    self.expr(0)
                    self.state = 933
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == Parser.COMMA):
                        break

                self.state = 935
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.SYMDIFF, Parser.SETDIFF]:
                localctx = Parser.SetOrSYmDiffAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 937
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == Parser.SYMDIFF or _la == Parser.SETDIFF):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 938
                self.match(Parser.LPAREN)
                self.state = 939
                localctx.left = self.expr(0)
                self.state = 940
                self.match(Parser.COMMA)
                self.state = 941
                localctx.right = self.expr(0)
                self.state = 942
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HierarchyOperatorsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None  # ExprContext
            self.hrName = None  # Token
            self.ruleComponent = None  # ComponentIDContext

        def HIERARCHY(self):
            return self.getToken(Parser.HIERARCHY, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def conditionClause(self):
            return self.getTypedRuleContext(Parser.ConditionClauseContext, 0)

        def RULE(self):
            return self.getToken(Parser.RULE, 0)

        def validationMode(self):
            return self.getTypedRuleContext(Parser.ValidationModeContext, 0)

        def inputModeHierarchy(self):
            return self.getTypedRuleContext(Parser.InputModeHierarchyContext, 0)

        def outputModeHierarchy(self):
            return self.getTypedRuleContext(Parser.OutputModeHierarchyContext, 0)

        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_hierarchyOperators

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHierarchyOperators"):
                return visitor.visitHierarchyOperators(self)
            else:
                return visitor.visitChildren(self)

    def hierarchyOperators(self):

        localctx = Parser.HierarchyOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_hierarchyOperators)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(Parser.HIERARCHY)
            self.state = 947
            self.match(Parser.LPAREN)
            self.state = 948
            localctx.op = self.expr(0)
            self.state = 949
            self.match(Parser.COMMA)
            self.state = 950
            localctx.hrName = self.match(Parser.IDENTIFIER)
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.CONDITION:
                self.state = 951
                self.conditionClause()

            self.state = 956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 81, self._ctx)
            if la_ == 1:
                self.state = 954
                self.match(Parser.RULE)
                self.state = 955
                localctx.ruleComponent = self.componentID()

            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 213)) & ~0x3F) == 0 and (
                (1 << (_la - 213))
                & (
                    (1 << (Parser.NON_NULL - 213))
                    | (1 << (Parser.NON_ZERO - 213))
                    | (1 << (Parser.PARTIAL_NULL - 213))
                    | (1 << (Parser.PARTIAL_ZERO - 213))
                    | (1 << (Parser.ALWAYS_NULL - 213))
                    | (1 << (Parser.ALWAYS_ZERO - 213))
                )
            ) != 0:
                self.state = 958
                self.validationMode()

            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.DATASET or _la == Parser.RULE or _la == Parser.RULE_PRIORITY:
                self.state = 961
                self.inputModeHierarchy()

            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.ALL or _la == Parser.COMPUTED:
                self.state = 964
                self.outputModeHierarchy()

            self.state = 967
            self.match(Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValidationOperatorsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_validationOperators

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ValidateHRrulesetContext(ValidationOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ValidationOperatorsContext
            super().__init__(parser)
            self.op = None  # ExprContext
            self.hrName = None  # Token
            self.copyFrom(ctx)

        def CHECK_HIERARCHY(self):
            return self.getToken(Parser.CHECK_HIERARCHY, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def conditionClause(self):
            return self.getTypedRuleContext(Parser.ConditionClauseContext, 0)

        def RULE(self):
            return self.getToken(Parser.RULE, 0)

        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext, 0)

        def validationMode(self):
            return self.getTypedRuleContext(Parser.ValidationModeContext, 0)

        def inputMode(self):
            return self.getTypedRuleContext(Parser.InputModeContext, 0)

        def validationOutput(self):
            return self.getTypedRuleContext(Parser.ValidationOutputContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValidateHRruleset"):
                return visitor.visitValidateHRruleset(self)
            else:
                return visitor.visitChildren(self)

    class ValidateDPrulesetContext(ValidationOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ValidationOperatorsContext
            super().__init__(parser)
            self.op = None  # ExprContext
            self.dpName = None  # Token
            self.copyFrom(ctx)

        def CHECK_DATAPOINT(self):
            return self.getToken(Parser.CHECK_DATAPOINT, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def COMPONENTS(self):
            return self.getToken(Parser.COMPONENTS, 0)

        def componentID(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext, i)

        def validationOutput(self):
            return self.getTypedRuleContext(Parser.ValidationOutputContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValidateDPruleset"):
                return visitor.visitValidateDPruleset(self)
            else:
                return visitor.visitChildren(self)

    class ValidationSimpleContext(ValidationOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ValidationOperatorsContext
            super().__init__(parser)
            self.op = None  # ExprContext
            self.codeErr = None  # ErCodeContext
            self.levelCode = None  # ErLevelContext
            self.output = None  # Token
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(Parser.CHECK, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def imbalanceExpr(self):
            return self.getTypedRuleContext(Parser.ImbalanceExprContext, 0)

        def erCode(self):
            return self.getTypedRuleContext(Parser.ErCodeContext, 0)

        def erLevel(self):
            return self.getTypedRuleContext(Parser.ErLevelContext, 0)

        def INVALID(self):
            return self.getToken(Parser.INVALID, 0)

        def ALL(self):
            return self.getToken(Parser.ALL, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValidationSimple"):
                return visitor.visitValidationSimple(self)
            else:
                return visitor.visitChildren(self)

    def validationOperators(self):

        localctx = Parser.ValidationOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_validationOperators)
        self._la = 0  # Token type
        try:
            self.state = 1030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.CHECK_DATAPOINT]:
                localctx = Parser.ValidateDPrulesetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 969
                self.match(Parser.CHECK_DATAPOINT)
                self.state = 970
                self.match(Parser.LPAREN)
                self.state = 971
                localctx.op = self.expr(0)
                self.state = 972
                self.match(Parser.COMMA)
                self.state = 973
                localctx.dpName = self.match(Parser.IDENTIFIER)
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMPONENTS:
                    self.state = 974
                    self.match(Parser.COMPONENTS)
                    self.state = 975
                    self.componentID()
                    self.state = 980
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Parser.COMMA:
                        self.state = 976
                        self.match(Parser.COMMA)
                        self.state = 977
                        self.componentID()
                        self.state = 982
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.ALL or _la == Parser.INVALID or _la == Parser.ALL_MEASURES:
                    self.state = 985
                    self.validationOutput()

                self.state = 988
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CHECK_HIERARCHY]:
                localctx = Parser.ValidateHRrulesetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 990
                self.match(Parser.CHECK_HIERARCHY)
                self.state = 991
                self.match(Parser.LPAREN)
                self.state = 992
                localctx.op = self.expr(0)
                self.state = 993
                self.match(Parser.COMMA)
                self.state = 994
                localctx.hrName = self.match(Parser.IDENTIFIER)
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.CONDITION:
                    self.state = 995
                    self.conditionClause()

                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.RULE:
                    self.state = 998
                    self.match(Parser.RULE)
                    self.state = 999
                    self.componentID()

                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 213)) & ~0x3F) == 0 and (
                    (1 << (_la - 213))
                    & (
                        (1 << (Parser.NON_NULL - 213))
                        | (1 << (Parser.NON_ZERO - 213))
                        | (1 << (Parser.PARTIAL_NULL - 213))
                        | (1 << (Parser.PARTIAL_ZERO - 213))
                        | (1 << (Parser.ALWAYS_NULL - 213))
                        | (1 << (Parser.ALWAYS_ZERO - 213))
                    )
                ) != 0:
                    self.state = 1002
                    self.validationMode()

                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.DATASET or _la == Parser.DATASET_PRIORITY:
                    self.state = 1005
                    self.inputMode()

                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.ALL or _la == Parser.INVALID or _la == Parser.ALL_MEASURES:
                    self.state = 1008
                    self.validationOutput()

                self.state = 1011
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CHECK]:
                localctx = Parser.ValidationSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1013
                self.match(Parser.CHECK)
                self.state = 1014
                self.match(Parser.LPAREN)
                self.state = 1015
                localctx.op = self.expr(0)
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.ERRORCODE:
                    self.state = 1016
                    localctx.codeErr = self.erCode()

                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.ERRORLEVEL:
                    self.state = 1019
                    localctx.levelCode = self.erLevel()

                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.IMBALANCE:
                    self.state = 1022
                    self.imbalanceExpr()

                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.ALL or _la == Parser.INVALID:
                    self.state = 1025
                    localctx.output = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not (_la == Parser.ALL or _la == Parser.INVALID):
                        localctx.output = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1028
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalOperatorsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_conditionalOperators

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class NvlAtomContext(ConditionalOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ConditionalOperatorsContext
            super().__init__(parser)
            self.left = None  # ExprContext
            self.right = None  # ExprContext
            self.copyFrom(ctx)

        def NVL(self):
            return self.getToken(Parser.NVL, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNvlAtom"):
                return visitor.visitNvlAtom(self)
            else:
                return visitor.visitChildren(self)

    def conditionalOperators(self):

        localctx = Parser.ConditionalOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_conditionalOperators)
        try:
            localctx = Parser.NvlAtomContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(Parser.NVL)
            self.state = 1033
            self.match(Parser.LPAREN)
            self.state = 1034
            localctx.left = self.expr(0)
            self.state = 1035
            self.match(Parser.COMMA)
            self.state = 1036
            localctx.right = self.expr(0)
            self.state = 1037
            self.match(Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalOperatorsComponentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_conditionalOperatorsComponent

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class NvlAtomComponentContext(ConditionalOperatorsComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ConditionalOperatorsComponentContext
            super().__init__(parser)
            self.left = None  # ExprComponentContext
            self.right = None  # ExprComponentContext
            self.copyFrom(ctx)

        def NVL(self):
            return self.getToken(Parser.NVL, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def exprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNvlAtomComponent"):
                return visitor.visitNvlAtomComponent(self)
            else:
                return visitor.visitChildren(self)

    def conditionalOperatorsComponent(self):

        localctx = Parser.ConditionalOperatorsComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_conditionalOperatorsComponent)
        try:
            localctx = Parser.NvlAtomComponentContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(Parser.NVL)
            self.state = 1040
            self.match(Parser.LPAREN)
            self.state = 1041
            localctx.left = self.exprComponent(0)
            self.state = 1042
            self.match(Parser.COMMA)
            self.state = 1043
            localctx.right = self.exprComponent(0)
            self.state = 1044
            self.match(Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggrOperatorsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_aggrOperators

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class AggrCompContext(AggrOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.AggrOperatorsContext
            super().__init__(parser)
            self.op = None  # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def SUM(self):
            return self.getToken(Parser.SUM, 0)

        def AVG(self):
            return self.getToken(Parser.AVG, 0)

        def COUNT(self):
            return self.getToken(Parser.COUNT, 0)

        def MEDIAN(self):
            return self.getToken(Parser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(Parser.MIN, 0)

        def MAX(self):
            return self.getToken(Parser.MAX, 0)

        def STDDEV_POP(self):
            return self.getToken(Parser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(Parser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(Parser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(Parser.VAR_SAMP, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAggrComp"):
                return visitor.visitAggrComp(self)
            else:
                return visitor.visitChildren(self)

    class CountAggrCompContext(AggrOperatorsContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.AggrOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(Parser.COUNT, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCountAggrComp"):
                return visitor.visitCountAggrComp(self)
            else:
                return visitor.visitChildren(self)

    def aggrOperators(self):

        localctx = Parser.AggrOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_aggrOperators)
        self._la = 0  # Token type
        try:
            self.state = 1054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 98, self._ctx)
            if la_ == 1:
                localctx = Parser.AggrCompContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1046
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 68)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 68))
                            & (
                                (1 << (Parser.MIN - 68))
                                | (1 << (Parser.MAX - 68))
                                | (1 << (Parser.SUM - 68))
                                | (1 << (Parser.AVG - 68))
                                | (1 << (Parser.MEDIAN - 68))
                                | (1 << (Parser.COUNT - 68))
                                | (1 << (Parser.STDDEV_POP - 68))
                                | (1 << (Parser.STDDEV_SAMP - 68))
                                | (1 << (Parser.VAR_POP - 68))
                                | (1 << (Parser.VAR_SAMP - 68))
                            )
                        )
                        != 0
                    )
                ):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1047
                self.match(Parser.LPAREN)
                self.state = 1048
                self.exprComponent(0)
                self.state = 1049
                self.match(Parser.RPAREN)
                pass

            elif la_ == 2:
                localctx = Parser.CountAggrCompContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1051
                self.match(Parser.COUNT)
                self.state = 1052
                self.match(Parser.LPAREN)
                self.state = 1053
                self.match(Parser.RPAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggrOperatorsGroupingContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_aggrOperatorsGrouping

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class AggrDatasetContext(AggrOperatorsGroupingContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.AggrOperatorsGroupingContext
            super().__init__(parser)
            self.op = None  # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def SUM(self):
            return self.getToken(Parser.SUM, 0)

        def AVG(self):
            return self.getToken(Parser.AVG, 0)

        def COUNT(self):
            return self.getToken(Parser.COUNT, 0)

        def MEDIAN(self):
            return self.getToken(Parser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(Parser.MIN, 0)

        def MAX(self):
            return self.getToken(Parser.MAX, 0)

        def STDDEV_POP(self):
            return self.getToken(Parser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(Parser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(Parser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(Parser.VAR_SAMP, 0)

        def groupingClause(self):
            return self.getTypedRuleContext(Parser.GroupingClauseContext, 0)

        def havingClause(self):
            return self.getTypedRuleContext(Parser.HavingClauseContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAggrDataset"):
                return visitor.visitAggrDataset(self)
            else:
                return visitor.visitChildren(self)

    def aggrOperatorsGrouping(self):

        localctx = Parser.AggrOperatorsGroupingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_aggrOperatorsGrouping)
        self._la = 0  # Token type
        try:
            localctx = Parser.AggrDatasetContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 68)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 68))
                        & (
                            (1 << (Parser.MIN - 68))
                            | (1 << (Parser.MAX - 68))
                            | (1 << (Parser.SUM - 68))
                            | (1 << (Parser.AVG - 68))
                            | (1 << (Parser.MEDIAN - 68))
                            | (1 << (Parser.COUNT - 68))
                            | (1 << (Parser.STDDEV_POP - 68))
                            | (1 << (Parser.STDDEV_SAMP - 68))
                            | (1 << (Parser.VAR_POP - 68))
                            | (1 << (Parser.VAR_SAMP - 68))
                        )
                    )
                    != 0
                )
            ):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1057
            self.match(Parser.LPAREN)
            self.state = 1058
            self.expr(0)
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.GROUP:
                self.state = 1059
                self.groupingClause()
                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.HAVING:
                    self.state = 1060
                    self.havingClause()

            self.state = 1065
            self.match(Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_anFunction

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class LagOrLeadAnContext(AnFunctionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.AnFunctionContext
            super().__init__(parser)
            self.op = None  # Token
            self.offet = None  # SignedIntegerContext
            self.defaultValue = None  # ScalarItemContext
            self.partition = None  # PartitionByClauseContext
            self.orderBy = None  # OrderByClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def OVER(self):
            return self.getToken(Parser.OVER, 0)

        def RPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)

        def LAG(self):
            return self.getToken(Parser.LAG, 0)

        def LEAD(self):
            return self.getToken(Parser.LEAD, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def orderByClause(self):
            return self.getTypedRuleContext(Parser.OrderByClauseContext, 0)

        def signedInteger(self):
            return self.getTypedRuleContext(Parser.SignedIntegerContext, 0)

        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext, 0)

        def scalarItem(self):
            return self.getTypedRuleContext(Parser.ScalarItemContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLagOrLeadAn"):
                return visitor.visitLagOrLeadAn(self)
            else:
                return visitor.visitChildren(self)

    class RatioToReportAnContext(AnFunctionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.AnFunctionContext
            super().__init__(parser)
            self.op = None  # Token
            self.partition = None  # PartitionByClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def OVER(self):
            return self.getToken(Parser.OVER, 0)

        def RPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)

        def RATIO_TO_REPORT(self):
            return self.getToken(Parser.RATIO_TO_REPORT, 0)

        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRatioToReportAn"):
                return visitor.visitRatioToReportAn(self)
            else:
                return visitor.visitChildren(self)

    class AnSimpleFunctionContext(AnFunctionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.AnFunctionContext
            super().__init__(parser)
            self.op = None  # Token
            self.partition = None  # PartitionByClauseContext
            self.orderBy = None  # OrderByClauseContext
            self.windowing = None  # WindowingClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def OVER(self):
            return self.getToken(Parser.OVER, 0)

        def RPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)

        def SUM(self):
            return self.getToken(Parser.SUM, 0)

        def AVG(self):
            return self.getToken(Parser.AVG, 0)

        def COUNT(self):
            return self.getToken(Parser.COUNT, 0)

        def MEDIAN(self):
            return self.getToken(Parser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(Parser.MIN, 0)

        def MAX(self):
            return self.getToken(Parser.MAX, 0)

        def STDDEV_POP(self):
            return self.getToken(Parser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(Parser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(Parser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(Parser.VAR_SAMP, 0)

        def FIRST_VALUE(self):
            return self.getToken(Parser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(Parser.LAST_VALUE, 0)

        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext, 0)

        def orderByClause(self):
            return self.getTypedRuleContext(Parser.OrderByClauseContext, 0)

        def windowingClause(self):
            return self.getTypedRuleContext(Parser.WindowingClauseContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnSimpleFunction"):
                return visitor.visitAnSimpleFunction(self)
            else:
                return visitor.visitChildren(self)

    def anFunction(self):

        localctx = Parser.AnFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_anFunction)
        self._la = 0  # Token type
        try:
            self.state = 1114
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                Parser.MIN,
                Parser.MAX,
                Parser.SUM,
                Parser.AVG,
                Parser.MEDIAN,
                Parser.COUNT,
                Parser.STDDEV_POP,
                Parser.STDDEV_SAMP,
                Parser.VAR_POP,
                Parser.VAR_SAMP,
                Parser.FIRST_VALUE,
                Parser.LAST_VALUE,
            ]:
                localctx = Parser.AnSimpleFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1067
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 68)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 68))
                            & (
                                (1 << (Parser.MIN - 68))
                                | (1 << (Parser.MAX - 68))
                                | (1 << (Parser.SUM - 68))
                                | (1 << (Parser.AVG - 68))
                                | (1 << (Parser.MEDIAN - 68))
                                | (1 << (Parser.COUNT - 68))
                                | (1 << (Parser.STDDEV_POP - 68))
                                | (1 << (Parser.STDDEV_SAMP - 68))
                                | (1 << (Parser.VAR_POP - 68))
                                | (1 << (Parser.VAR_SAMP - 68))
                            )
                        )
                        != 0
                    )
                    or _la == Parser.FIRST_VALUE
                    or _la == Parser.LAST_VALUE
                ):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1068
                self.match(Parser.LPAREN)
                self.state = 1069
                self.expr(0)
                self.state = 1070
                self.match(Parser.OVER)
                self.state = 1071
                self.match(Parser.LPAREN)

                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.PARTITION:
                    self.state = 1072
                    localctx.partition = self.partitionByClause()

                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.ORDER:
                    self.state = 1075
                    localctx.orderBy = self.orderByClause()

                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.DATA or _la == Parser.RANGE:
                    self.state = 1078
                    localctx.windowing = self.windowingClause()

                self.state = 1081
                self.match(Parser.RPAREN)
                self.state = 1082
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.LAG, Parser.LEAD]:
                localctx = Parser.LagOrLeadAnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1084
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == Parser.LAG or _la == Parser.LEAD):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1085
                self.match(Parser.LPAREN)
                self.state = 1086
                self.expr(0)
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 1087
                    self.match(Parser.COMMA)
                    self.state = 1088
                    localctx.offet = self.signedInteger()
                    self.state = 1091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Parser.COMMA:
                        self.state = 1089
                        self.match(Parser.COMMA)
                        self.state = 1090
                        localctx.defaultValue = self.scalarItem()

                self.state = 1095
                self.match(Parser.OVER)
                self.state = 1096
                self.match(Parser.LPAREN)

                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.PARTITION:
                    self.state = 1097
                    localctx.partition = self.partitionByClause()

                self.state = 1100
                localctx.orderBy = self.orderByClause()
                self.state = 1102
                self.match(Parser.RPAREN)
                self.state = 1103
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.RATIO_TO_REPORT]:
                localctx = Parser.RatioToReportAnContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1105
                localctx.op = self.match(Parser.RATIO_TO_REPORT)
                self.state = 1106
                self.match(Parser.LPAREN)
                self.state = 1107
                self.expr(0)
                self.state = 1108
                self.match(Parser.OVER)
                self.state = 1109
                self.match(Parser.LPAREN)

                self.state = 1110
                localctx.partition = self.partitionByClause()
                self.state = 1111
                self.match(Parser.RPAREN)
                self.state = 1112
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnFunctionComponentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_anFunctionComponent

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class AnSimpleFunctionComponentContext(AnFunctionComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.AnFunctionComponentContext
            super().__init__(parser)
            self.op = None  # Token
            self.partition = None  # PartitionByClauseContext
            self.orderBy = None  # OrderByClauseContext
            self.windowing = None  # WindowingClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def OVER(self):
            return self.getToken(Parser.OVER, 0)

        def RPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)

        def SUM(self):
            return self.getToken(Parser.SUM, 0)

        def AVG(self):
            return self.getToken(Parser.AVG, 0)

        def COUNT(self):
            return self.getToken(Parser.COUNT, 0)

        def MEDIAN(self):
            return self.getToken(Parser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(Parser.MIN, 0)

        def MAX(self):
            return self.getToken(Parser.MAX, 0)

        def STDDEV_POP(self):
            return self.getToken(Parser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(Parser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(Parser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(Parser.VAR_SAMP, 0)

        def FIRST_VALUE(self):
            return self.getToken(Parser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(Parser.LAST_VALUE, 0)

        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext, 0)

        def orderByClause(self):
            return self.getTypedRuleContext(Parser.OrderByClauseContext, 0)

        def windowingClause(self):
            return self.getTypedRuleContext(Parser.WindowingClauseContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnSimpleFunctionComponent"):
                return visitor.visitAnSimpleFunctionComponent(self)
            else:
                return visitor.visitChildren(self)

    class LagOrLeadAnComponentContext(AnFunctionComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.AnFunctionComponentContext
            super().__init__(parser)
            self.op = None  # Token
            self.offet = None  # SignedIntegerContext
            self.defaultValue = None  # ScalarItemContext
            self.partition = None  # PartitionByClauseContext
            self.orderBy = None  # OrderByClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def OVER(self):
            return self.getToken(Parser.OVER, 0)

        def RPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)

        def LAG(self):
            return self.getToken(Parser.LAG, 0)

        def LEAD(self):
            return self.getToken(Parser.LEAD, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def orderByClause(self):
            return self.getTypedRuleContext(Parser.OrderByClauseContext, 0)

        def signedInteger(self):
            return self.getTypedRuleContext(Parser.SignedIntegerContext, 0)

        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext, 0)

        def scalarItem(self):
            return self.getTypedRuleContext(Parser.ScalarItemContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLagOrLeadAnComponent"):
                return visitor.visitLagOrLeadAnComponent(self)
            else:
                return visitor.visitChildren(self)

    class RankAnComponentContext(AnFunctionComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.AnFunctionComponentContext
            super().__init__(parser)
            self.op = None  # Token
            self.partition = None  # PartitionByClauseContext
            self.orderBy = None  # OrderByClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)

        def OVER(self):
            return self.getToken(Parser.OVER, 0)

        def RPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)

        def RANK(self):
            return self.getToken(Parser.RANK, 0)

        def orderByClause(self):
            return self.getTypedRuleContext(Parser.OrderByClauseContext, 0)

        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRankAnComponent"):
                return visitor.visitRankAnComponent(self)
            else:
                return visitor.visitChildren(self)

    class RatioToReportAnComponentContext(AnFunctionComponentContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.AnFunctionComponentContext
            super().__init__(parser)
            self.op = None  # Token
            self.partition = None  # PartitionByClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def OVER(self):
            return self.getToken(Parser.OVER, 0)

        def RPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)

        def RATIO_TO_REPORT(self):
            return self.getToken(Parser.RATIO_TO_REPORT, 0)

        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRatioToReportAnComponent"):
                return visitor.visitRatioToReportAnComponent(self)
            else:
                return visitor.visitChildren(self)

    def anFunctionComponent(self):

        localctx = Parser.AnFunctionComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_anFunctionComponent)
        self._la = 0  # Token type
        try:
            self.state = 1174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                Parser.MIN,
                Parser.MAX,
                Parser.SUM,
                Parser.AVG,
                Parser.MEDIAN,
                Parser.COUNT,
                Parser.STDDEV_POP,
                Parser.STDDEV_SAMP,
                Parser.VAR_POP,
                Parser.VAR_SAMP,
                Parser.FIRST_VALUE,
                Parser.LAST_VALUE,
            ]:
                localctx = Parser.AnSimpleFunctionComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1116
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 68)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 68))
                            & (
                                (1 << (Parser.MIN - 68))
                                | (1 << (Parser.MAX - 68))
                                | (1 << (Parser.SUM - 68))
                                | (1 << (Parser.AVG - 68))
                                | (1 << (Parser.MEDIAN - 68))
                                | (1 << (Parser.COUNT - 68))
                                | (1 << (Parser.STDDEV_POP - 68))
                                | (1 << (Parser.STDDEV_SAMP - 68))
                                | (1 << (Parser.VAR_POP - 68))
                                | (1 << (Parser.VAR_SAMP - 68))
                            )
                        )
                        != 0
                    )
                    or _la == Parser.FIRST_VALUE
                    or _la == Parser.LAST_VALUE
                ):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1117
                self.match(Parser.LPAREN)
                self.state = 1118
                self.exprComponent(0)
                self.state = 1119
                self.match(Parser.OVER)
                self.state = 1120
                self.match(Parser.LPAREN)

                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.PARTITION:
                    self.state = 1121
                    localctx.partition = self.partitionByClause()

                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.ORDER:
                    self.state = 1124
                    localctx.orderBy = self.orderByClause()

                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.DATA or _la == Parser.RANGE:
                    self.state = 1127
                    localctx.windowing = self.windowingClause()

                self.state = 1130
                self.match(Parser.RPAREN)
                self.state = 1131
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.LAG, Parser.LEAD]:
                localctx = Parser.LagOrLeadAnComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1133
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == Parser.LAG or _la == Parser.LEAD):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1134
                self.match(Parser.LPAREN)
                self.state = 1135
                self.exprComponent(0)
                self.state = 1141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 1136
                    self.match(Parser.COMMA)
                    self.state = 1137
                    localctx.offet = self.signedInteger()
                    self.state = 1139
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Parser.NULL_CONSTANT or (
                        (((_la - 206)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 206))
                            & (
                                (1 << (Parser.CAST - 206))
                                | (1 << (Parser.INTEGER_CONSTANT - 206))
                                | (1 << (Parser.NUMBER_CONSTANT - 206))
                                | (1 << (Parser.BOOLEAN_CONSTANT - 206))
                                | (1 << (Parser.STRING_CONSTANT - 206))
                            )
                        )
                        != 0
                    ):
                        self.state = 1138
                        localctx.defaultValue = self.scalarItem()

                self.state = 1143
                self.match(Parser.OVER)
                self.state = 1144
                self.match(Parser.LPAREN)

                self.state = 1146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.PARTITION:
                    self.state = 1145
                    localctx.partition = self.partitionByClause()

                self.state = 1148
                localctx.orderBy = self.orderByClause()
                self.state = 1150
                self.match(Parser.RPAREN)
                self.state = 1151
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.RANK]:
                localctx = Parser.RankAnComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1153
                localctx.op = self.match(Parser.RANK)
                self.state = 1154
                self.match(Parser.LPAREN)
                self.state = 1155
                self.match(Parser.OVER)
                self.state = 1156
                self.match(Parser.LPAREN)

                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.PARTITION:
                    self.state = 1157
                    localctx.partition = self.partitionByClause()

                self.state = 1160
                localctx.orderBy = self.orderByClause()
                self.state = 1162
                self.match(Parser.RPAREN)
                self.state = 1163
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.RATIO_TO_REPORT]:
                localctx = Parser.RatioToReportAnComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1165
                localctx.op = self.match(Parser.RATIO_TO_REPORT)
                self.state = 1166
                self.match(Parser.LPAREN)
                self.state = 1167
                self.exprComponent(0)
                self.state = 1168
                self.match(Parser.OVER)
                self.state = 1169
                self.match(Parser.LPAREN)

                self.state = 1170
                localctx.partition = self.partitionByClause()
                self.state = 1171
                self.match(Parser.RPAREN)
                self.state = 1172
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RenameClauseItemContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromName = None  # ComponentIDContext
            self.toName = None  # ComponentIDContext

        def TO(self):
            return self.getToken(Parser.TO, 0)

        def componentID(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext, i)

        def getRuleIndex(self):
            return Parser.RULE_renameClauseItem

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRenameClauseItem"):
                return visitor.visitRenameClauseItem(self)
            else:
                return visitor.visitChildren(self)

    def renameClauseItem(self):

        localctx = Parser.RenameClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_renameClauseItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            localctx.fromName = self.componentID()
            self.state = 1177
            self.match(Parser.TO)
            self.state = 1178
            localctx.toName = self.componentID()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggregateClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggrFunctionClause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.AggrFunctionClauseContext)
            else:
                return self.getTypedRuleContext(Parser.AggrFunctionClauseContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_aggregateClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAggregateClause"):
                return visitor.visitAggregateClause(self)
            else:
                return visitor.visitChildren(self)

    def aggregateClause(self):

        localctx = Parser.AggregateClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_aggregateClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self.aggrFunctionClause()
            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.COMMA:
                self.state = 1181
                self.match(Parser.COMMA)
                self.state = 1182
                self.aggrFunctionClause()
                self.state = 1187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggrFunctionClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext, 0)

        def ASSIGN(self):
            return self.getToken(Parser.ASSIGN, 0)

        def aggrOperators(self):
            return self.getTypedRuleContext(Parser.AggrOperatorsContext, 0)

        def componentRole(self):
            return self.getTypedRuleContext(Parser.ComponentRoleContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_aggrFunctionClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAggrFunctionClause"):
                return visitor.visitAggrFunctionClause(self)
            else:
                return visitor.visitChildren(self)

    def aggrFunctionClause(self):

        localctx = Parser.AggrFunctionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_aggrFunctionClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la - 91)) & ~0x3F) == 0
                and (
                    (1 << (_la - 91))
                    & (
                        (1 << (Parser.DIMENSION - 91))
                        | (1 << (Parser.MEASURE - 91))
                        | (1 << (Parser.ATTRIBUTE - 91))
                        | (1 << (Parser.VIRAL - 91))
                    )
                )
                != 0
            ) or _la == Parser.COMPONENT:
                self.state = 1188
                self.componentRole()

            self.state = 1191
            self.componentID()
            self.state = 1192
            self.match(Parser.ASSIGN)
            self.state = 1193
            self.aggrOperators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalcClauseItemContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext, 0)

        def ASSIGN(self):
            return self.getToken(Parser.ASSIGN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def componentRole(self):
            return self.getTypedRuleContext(Parser.ComponentRoleContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_calcClauseItem

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCalcClauseItem"):
                return visitor.visitCalcClauseItem(self)
            else:
                return visitor.visitChildren(self)

    def calcClauseItem(self):

        localctx = Parser.CalcClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_calcClauseItem)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la - 91)) & ~0x3F) == 0
                and (
                    (1 << (_la - 91))
                    & (
                        (1 << (Parser.DIMENSION - 91))
                        | (1 << (Parser.MEASURE - 91))
                        | (1 << (Parser.ATTRIBUTE - 91))
                        | (1 << (Parser.VIRAL - 91))
                    )
                )
                != 0
            ) or _la == Parser.COMPONENT:
                self.state = 1195
                self.componentRole()

            self.state = 1198
            self.componentID()
            self.state = 1199
            self.match(Parser.ASSIGN)
            self.state = 1200
            self.exprComponent(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubspaceClauseItemContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext, 0)

        def EQ(self):
            return self.getToken(Parser.EQ, 0)

        def scalarItem(self):
            return self.getTypedRuleContext(Parser.ScalarItemContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_subspaceClauseItem

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubspaceClauseItem"):
                return visitor.visitSubspaceClauseItem(self)
            else:
                return visitor.visitChildren(self)

    def subspaceClauseItem(self):

        localctx = Parser.SubspaceClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_subspaceClauseItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1202
            self.componentID()
            self.state = 1203
            self.match(Parser.EQ)
            self.state = 1204
            self.scalarItem()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScalarItemContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_scalarItem

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ScalarWithCastContext(ScalarItemContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ScalarItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(Parser.CAST, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def constant(self):
            return self.getTypedRuleContext(Parser.ConstantContext, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def basicScalarType(self):
            return self.getTypedRuleContext(Parser.BasicScalarTypeContext, 0)

        def STRING_CONSTANT(self):
            return self.getToken(Parser.STRING_CONSTANT, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitScalarWithCast"):
                return visitor.visitScalarWithCast(self)
            else:
                return visitor.visitChildren(self)

    class SimpleScalarContext(ScalarItemContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ScalarItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(Parser.ConstantContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleScalar"):
                return visitor.visitSimpleScalar(self)
            else:
                return visitor.visitChildren(self)

    def scalarItem(self):

        localctx = Parser.ScalarItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_scalarItem)
        self._la = 0  # Token type
        try:
            self.state = 1218
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                Parser.NULL_CONSTANT,
                Parser.INTEGER_CONSTANT,
                Parser.NUMBER_CONSTANT,
                Parser.BOOLEAN_CONSTANT,
                Parser.STRING_CONSTANT,
            ]:
                localctx = Parser.SimpleScalarContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1206
                self.constant()
                pass
            elif token in [Parser.CAST]:
                localctx = Parser.ScalarWithCastContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1207
                self.match(Parser.CAST)
                self.state = 1208
                self.match(Parser.LPAREN)
                self.state = 1209
                self.constant()
                self.state = 1210
                self.match(Parser.COMMA)

                self.state = 1211
                self.basicScalarType()
                self.state = 1214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.COMMA:
                    self.state = 1212
                    self.match(Parser.COMMA)
                    self.state = 1213
                    self.match(Parser.STRING_CONSTANT)

                self.state = 1216
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinClauseWithoutUsingContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def joinClauseItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.JoinClauseItemContext)
            else:
                return self.getTypedRuleContext(Parser.JoinClauseItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_joinClauseWithoutUsing

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinClauseWithoutUsing"):
                return visitor.visitJoinClauseWithoutUsing(self)
            else:
                return visitor.visitChildren(self)

    def joinClauseWithoutUsing(self):

        localctx = Parser.JoinClauseWithoutUsingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_joinClauseWithoutUsing)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.joinClauseItem()
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.COMMA:
                self.state = 1221
                self.match(Parser.COMMA)
                self.state = 1222
                self.joinClauseItem()
                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def joinClauseItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.JoinClauseItemContext)
            else:
                return self.getTypedRuleContext(Parser.JoinClauseItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def USING(self):
            return self.getToken(Parser.USING, 0)

        def componentID(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext, i)

        def getRuleIndex(self):
            return Parser.RULE_joinClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinClause"):
                return visitor.visitJoinClause(self)
            else:
                return visitor.visitChildren(self)

    def joinClause(self):

        localctx = Parser.JoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_joinClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.joinClauseItem()
            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.COMMA:
                self.state = 1229
                self.match(Parser.COMMA)
                self.state = 1230
                self.joinClauseItem()
                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.USING:
                self.state = 1236
                self.match(Parser.USING)
                self.state = 1237
                self.componentID()
                self.state = 1242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Parser.COMMA:
                    self.state = 1238
                    self.match(Parser.COMMA)
                    self.state = 1239
                    self.componentID()
                    self.state = 1244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinClauseItemContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def AS(self):
            return self.getToken(Parser.AS, 0)

        def alias(self):
            return self.getTypedRuleContext(Parser.AliasContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_joinClauseItem

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinClauseItem"):
                return visitor.visitJoinClauseItem(self)
            else:
                return visitor.visitChildren(self)

    def joinClauseItem(self):

        localctx = Parser.JoinClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_joinClauseItem)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1247
            self.expr(0)
            self.state = 1250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.AS:
                self.state = 1248
                self.match(Parser.AS)
                self.state = 1249
                self.alias()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinBodyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def filterClause(self):
            return self.getTypedRuleContext(Parser.FilterClauseContext, 0)

        def calcClause(self):
            return self.getTypedRuleContext(Parser.CalcClauseContext, 0)

        def joinApplyClause(self):
            return self.getTypedRuleContext(Parser.JoinApplyClauseContext, 0)

        def aggrClause(self):
            return self.getTypedRuleContext(Parser.AggrClauseContext, 0)

        def keepOrDropClause(self):
            return self.getTypedRuleContext(Parser.KeepOrDropClauseContext, 0)

        def renameClause(self):
            return self.getTypedRuleContext(Parser.RenameClauseContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_joinBody

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinBody"):
                return visitor.visitJoinBody(self)
            else:
                return visitor.visitChildren(self)

    def joinBody(self):

        localctx = Parser.JoinBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_joinBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.FILTER:
                self.state = 1252
                self.filterClause()

            self.state = 1258
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.CALC]:
                self.state = 1255
                self.calcClause()
                pass
            elif token in [Parser.APPLY]:
                self.state = 1256
                self.joinApplyClause()
                pass
            elif token in [Parser.AGGREGATE]:
                self.state = 1257
                self.aggrClause()
                pass
            elif token in [Parser.RPAREN, Parser.DROP, Parser.KEEP, Parser.RENAME]:
                pass
            else:
                pass
            self.state = 1261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.DROP or _la == Parser.KEEP:
                self.state = 1260
                self.keepOrDropClause()

            self.state = 1264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.RENAME:
                self.state = 1263
                self.renameClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinApplyClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APPLY(self):
            return self.getToken(Parser.APPLY, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_joinApplyClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinApplyClause"):
                return visitor.visitJoinApplyClause(self)
            else:
                return visitor.visitChildren(self)

    def joinApplyClause(self):

        localctx = Parser.JoinApplyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_joinApplyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.match(Parser.APPLY)
            self.state = 1267
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(Parser.PARTITION, 0)

        def BY(self):
            return self.getToken(Parser.BY, 0)

        def componentID(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_partitionByClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPartitionByClause"):
                return visitor.visitPartitionByClause(self)
            else:
                return visitor.visitChildren(self)

    def partitionByClause(self):

        localctx = Parser.PartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_partitionByClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1269
            self.match(Parser.PARTITION)
            self.state = 1270
            self.match(Parser.BY)
            self.state = 1271
            self.componentID()
            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.COMMA:
                self.state = 1272
                self.match(Parser.COMMA)
                self.state = 1273
                self.componentID()
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(Parser.ORDER, 0)

        def BY(self):
            return self.getToken(Parser.BY, 0)

        def orderByItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.OrderByItemContext)
            else:
                return self.getTypedRuleContext(Parser.OrderByItemContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_orderByClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderByClause"):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)

    def orderByClause(self):

        localctx = Parser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_orderByClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.match(Parser.ORDER)
            self.state = 1280
            self.match(Parser.BY)
            self.state = 1281
            self.orderByItem()
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.COMMA:
                self.state = 1282
                self.match(Parser.COMMA)
                self.state = 1283
                self.orderByItem()
                self.state = 1288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByItemContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext, 0)

        def ASC(self):
            return self.getToken(Parser.ASC, 0)

        def DESC(self):
            return self.getToken(Parser.DESC, 0)

        def getRuleIndex(self):
            return Parser.RULE_orderByItem

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderByItem"):
                return visitor.visitOrderByItem(self)
            else:
                return visitor.visitChildren(self)

    def orderByItem(self):

        localctx = Parser.OrderByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_orderByItem)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.componentID()
            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.ASC or _la == Parser.DESC:
                self.state = 1290
                _la = self._input.LA(1)
                if not (_la == Parser.ASC or _la == Parser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WindowingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.from_ = None  # LimitClauseItemContext
            self.to_ = None  # LimitClauseItemContext

        def BETWEEN(self):
            return self.getToken(Parser.BETWEEN, 0)

        def AND(self):
            return self.getToken(Parser.AND, 0)

        def limitClauseItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.LimitClauseItemContext)
            else:
                return self.getTypedRuleContext(Parser.LimitClauseItemContext, i)

        def RANGE(self):
            return self.getToken(Parser.RANGE, 0)

        def DATA(self):
            return self.getToken(Parser.DATA, 0)

        def POINTS(self):
            return self.getToken(Parser.POINTS, 0)

        def getRuleIndex(self):
            return Parser.RULE_windowingClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWindowingClause"):
                return visitor.visitWindowingClause(self)
            else:
                return visitor.visitChildren(self)

    def windowingClause(self):

        localctx = Parser.WindowingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_windowingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.DATA]:
                self.state = 1293
                self.match(Parser.DATA)
                self.state = 1294
                self.match(Parser.POINTS)
                pass
            elif token in [Parser.RANGE]:
                self.state = 1295
                self.match(Parser.RANGE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1298
            self.match(Parser.BETWEEN)
            self.state = 1299
            localctx.from_ = self.limitClauseItem()
            self.state = 1300
            self.match(Parser.AND)
            self.state = 1301
            localctx.to_ = self.limitClauseItem()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignedIntegerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_CONSTANT(self):
            return self.getToken(Parser.INTEGER_CONSTANT, 0)

        def getRuleIndex(self):
            return Parser.RULE_signedInteger

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSignedInteger"):
                return visitor.visitSignedInteger(self)
            else:
                return visitor.visitChildren(self)

    def signedInteger(self):

        localctx = Parser.SignedIntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_signedInteger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.match(Parser.INTEGER_CONSTANT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitClauseItemContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_CONSTANT(self):
            return self.getToken(Parser.INTEGER_CONSTANT, 0)

        def PRECEDING(self):
            return self.getToken(Parser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(Parser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(Parser.CURRENT, 0)

        def DATA(self):
            return self.getToken(Parser.DATA, 0)

        def POINT(self):
            return self.getToken(Parser.POINT, 0)

        def UNBOUNDED(self):
            return self.getToken(Parser.UNBOUNDED, 0)

        def getRuleIndex(self):
            return Parser.RULE_limitClauseItem

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLimitClauseItem"):
                return visitor.visitLimitClauseItem(self)
            else:
                return visitor.visitChildren(self)

    def limitClauseItem(self):

        localctx = Parser.LimitClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_limitClauseItem)
        try:
            self.state = 1316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 134, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1305
                self.match(Parser.INTEGER_CONSTANT)
                self.state = 1306
                self.match(Parser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1307
                self.match(Parser.INTEGER_CONSTANT)
                self.state = 1308
                self.match(Parser.FOLLOWING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1309
                self.match(Parser.CURRENT)
                self.state = 1310
                self.match(Parser.DATA)
                self.state = 1311
                self.match(Parser.POINT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1312
                self.match(Parser.UNBOUNDED)
                self.state = 1313
                self.match(Parser.PRECEDING)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1314
                self.match(Parser.UNBOUNDED)
                self.state = 1315
                self.match(Parser.FOLLOWING)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_groupingClause

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class GroupAllContext(GroupingClauseContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.GroupingClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUP(self):
            return self.getToken(Parser.GROUP, 0)

        def ALL(self):
            return self.getToken(Parser.ALL, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroupAll"):
                return visitor.visitGroupAll(self)
            else:
                return visitor.visitChildren(self)

    class GroupByOrExceptContext(GroupingClauseContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.GroupingClauseContext
            super().__init__(parser)
            self.op = None  # Token
            self.copyFrom(ctx)

        def GROUP(self):
            return self.getToken(Parser.GROUP, 0)

        def componentID(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext, i)

        def BY(self):
            return self.getToken(Parser.BY, 0)

        def EXCEPT(self):
            return self.getToken(Parser.EXCEPT, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroupByOrExcept"):
                return visitor.visitGroupByOrExcept(self)
            else:
                return visitor.visitChildren(self)

    def groupingClause(self):

        localctx = Parser.GroupingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_groupingClause)
        self._la = 0  # Token type
        try:
            self.state = 1331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 136, self._ctx)
            if la_ == 1:
                localctx = Parser.GroupByOrExceptContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1318
                self.match(Parser.GROUP)
                self.state = 1319
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == Parser.BY or _la == Parser.EXCEPT):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1320
                self.componentID()
                self.state = 1325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Parser.COMMA:
                    self.state = 1321
                    self.match(Parser.COMMA)
                    self.state = 1322
                    self.componentID()
                    self.state = 1327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = Parser.GroupAllContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1328
                self.match(Parser.GROUP)
                self.state = 1329
                self.match(Parser.ALL)
                self.state = 1330
                self.exprComponent(0)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HavingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(Parser.HAVING, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_havingClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHavingClause"):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)

    def havingClause(self):

        localctx = Parser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.match(Parser.HAVING)
            self.state = 1334
            self.exprComponent(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterItemContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varID(self):
            return self.getTypedRuleContext(Parser.VarIDContext, 0)

        def inputParameterType(self):
            return self.getTypedRuleContext(Parser.InputParameterTypeContext, 0)

        def DEFAULT(self):
            return self.getToken(Parser.DEFAULT, 0)

        def scalarItem(self):
            return self.getTypedRuleContext(Parser.ScalarItemContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_parameterItem

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameterItem"):
                return visitor.visitParameterItem(self)
            else:
                return visitor.visitChildren(self)

    def parameterItem(self):

        localctx = Parser.ParameterItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_parameterItem)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            self.varID()
            self.state = 1337
            self.inputParameterType()
            self.state = 1340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.DEFAULT:
                self.state = 1338
                self.match(Parser.DEFAULT)
                self.state = 1339
                self.scalarItem()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OutputParameterTypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(Parser.ScalarTypeContext, 0)

        def datasetType(self):
            return self.getTypedRuleContext(Parser.DatasetTypeContext, 0)

        def componentType(self):
            return self.getTypedRuleContext(Parser.ComponentTypeContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_outputParameterType

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOutputParameterType"):
                return visitor.visitOutputParameterType(self)
            else:
                return visitor.visitChildren(self)

    def outputParameterType(self):

        localctx = Parser.OutputParameterTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_outputParameterType)
        try:
            self.state = 1345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                Parser.BOOLEAN,
                Parser.DATE,
                Parser.TIME_PERIOD,
                Parser.NUMBER,
                Parser.STRING,
                Parser.TIME,
                Parser.INTEGER,
                Parser.DURATION,
                Parser.SCALAR,
                Parser.IDENTIFIER,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1342
                self.scalarType()
                pass
            elif token in [Parser.DATASET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1343
                self.datasetType()
                pass
            elif token in [
                Parser.DIMENSION,
                Parser.MEASURE,
                Parser.ATTRIBUTE,
                Parser.VIRAL,
                Parser.COMPONENT,
            ]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1344
                self.componentType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OutputParameterTypeComponentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentType(self):
            return self.getTypedRuleContext(Parser.ComponentTypeContext, 0)

        def scalarType(self):
            return self.getTypedRuleContext(Parser.ScalarTypeContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_outputParameterTypeComponent

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOutputParameterTypeComponent"):
                return visitor.visitOutputParameterTypeComponent(self)
            else:
                return visitor.visitChildren(self)

    def outputParameterTypeComponent(self):

        localctx = Parser.OutputParameterTypeComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_outputParameterTypeComponent)
        try:
            self.state = 1349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                Parser.DIMENSION,
                Parser.MEASURE,
                Parser.ATTRIBUTE,
                Parser.VIRAL,
                Parser.COMPONENT,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1347
                self.componentType()
                pass
            elif token in [
                Parser.BOOLEAN,
                Parser.DATE,
                Parser.TIME_PERIOD,
                Parser.NUMBER,
                Parser.STRING,
                Parser.TIME,
                Parser.INTEGER,
                Parser.DURATION,
                Parser.SCALAR,
                Parser.IDENTIFIER,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1348
                self.scalarType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InputParameterTypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(Parser.ScalarTypeContext, 0)

        def datasetType(self):
            return self.getTypedRuleContext(Parser.DatasetTypeContext, 0)

        def scalarSetType(self):
            return self.getTypedRuleContext(Parser.ScalarSetTypeContext, 0)

        def rulesetType(self):
            return self.getTypedRuleContext(Parser.RulesetTypeContext, 0)

        def componentType(self):
            return self.getTypedRuleContext(Parser.ComponentTypeContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_inputParameterType

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInputParameterType"):
                return visitor.visitInputParameterType(self)
            else:
                return visitor.visitChildren(self)

    def inputParameterType(self):

        localctx = Parser.InputParameterTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_inputParameterType)
        try:
            self.state = 1356
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                Parser.BOOLEAN,
                Parser.DATE,
                Parser.TIME_PERIOD,
                Parser.NUMBER,
                Parser.STRING,
                Parser.TIME,
                Parser.INTEGER,
                Parser.DURATION,
                Parser.SCALAR,
                Parser.IDENTIFIER,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1351
                self.scalarType()
                pass
            elif token in [Parser.DATASET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1352
                self.datasetType()
                pass
            elif token in [Parser.SET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1353
                self.scalarSetType()
                pass
            elif token in [
                Parser.DATAPOINT,
                Parser.HIERARCHICAL,
                Parser.RULESET,
                Parser.DATAPOINT_ON_VD,
                Parser.DATAPOINT_ON_VAR,
                Parser.HIERARCHICAL_ON_VD,
                Parser.HIERARCHICAL_ON_VAR,
            ]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1354
                self.rulesetType()
                pass
            elif token in [
                Parser.DIMENSION,
                Parser.MEASURE,
                Parser.ATTRIBUTE,
                Parser.VIRAL,
                Parser.COMPONENT,
            ]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1355
                self.componentType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RulesetTypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULESET(self):
            return self.getToken(Parser.RULESET, 0)

        def dpRuleset(self):
            return self.getTypedRuleContext(Parser.DpRulesetContext, 0)

        def hrRuleset(self):
            return self.getTypedRuleContext(Parser.HrRulesetContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_rulesetType

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRulesetType"):
                return visitor.visitRulesetType(self)
            else:
                return visitor.visitChildren(self)

    def rulesetType(self):

        localctx = Parser.RulesetTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_rulesetType)
        try:
            self.state = 1361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.RULESET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1358
                self.match(Parser.RULESET)
                pass
            elif token in [Parser.DATAPOINT, Parser.DATAPOINT_ON_VD, Parser.DATAPOINT_ON_VAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1359
                self.dpRuleset()
                pass
            elif token in [
                Parser.HIERARCHICAL,
                Parser.HIERARCHICAL_ON_VD,
                Parser.HIERARCHICAL_ON_VAR,
            ]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1360
                self.hrRuleset()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScalarTypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicScalarType(self):
            return self.getTypedRuleContext(Parser.BasicScalarTypeContext, 0)

        def valueDomainName(self):
            return self.getTypedRuleContext(Parser.ValueDomainNameContext, 0)

        def scalarTypeConstraint(self):
            return self.getTypedRuleContext(Parser.ScalarTypeConstraintContext, 0)

        def NULL_CONSTANT(self):
            return self.getToken(Parser.NULL_CONSTANT, 0)

        def NOT(self):
            return self.getToken(Parser.NOT, 0)

        def getRuleIndex(self):
            return Parser.RULE_scalarType

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitScalarType"):
                return visitor.visitScalarType(self)
            else:
                return visitor.visitChildren(self)

    def scalarType(self):

        localctx = Parser.ScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_scalarType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                Parser.BOOLEAN,
                Parser.DATE,
                Parser.TIME_PERIOD,
                Parser.NUMBER,
                Parser.STRING,
                Parser.TIME,
                Parser.INTEGER,
                Parser.DURATION,
                Parser.SCALAR,
            ]:
                self.state = 1363
                self.basicScalarType()
                pass
            elif token in [Parser.IDENTIFIER]:
                self.state = 1364
                self.valueDomainName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.QLPAREN or _la == Parser.GLPAREN:
                self.state = 1367
                self.scalarTypeConstraint()

            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.NOT or _la == Parser.NULL_CONSTANT:
                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.NOT:
                    self.state = 1370
                    self.match(Parser.NOT)

                self.state = 1373
                self.match(Parser.NULL_CONSTANT)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComponentTypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentRole(self):
            return self.getTypedRuleContext(Parser.ComponentRoleContext, 0)

        def LT(self):
            return self.getToken(Parser.LT, 0)

        def scalarType(self):
            return self.getTypedRuleContext(Parser.ScalarTypeContext, 0)

        def MT(self):
            return self.getToken(Parser.MT, 0)

        def getRuleIndex(self):
            return Parser.RULE_componentType

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComponentType"):
                return visitor.visitComponentType(self)
            else:
                return visitor.visitChildren(self)

    def componentType(self):

        localctx = Parser.ComponentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_componentType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.componentRole()
            self.state = 1381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.LT:
                self.state = 1377
                self.match(Parser.LT)
                self.state = 1378
                self.scalarType()
                self.state = 1379
                self.match(Parser.MT)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatasetTypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATASET(self):
            return self.getToken(Parser.DATASET, 0)

        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)

        def compConstraint(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.CompConstraintContext)
            else:
                return self.getTypedRuleContext(Parser.CompConstraintContext, i)

        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_datasetType

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatasetType"):
                return visitor.visitDatasetType(self)
            else:
                return visitor.visitChildren(self)

    def datasetType(self):

        localctx = Parser.DatasetTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_datasetType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self.match(Parser.DATASET)
            self.state = 1395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.GLPAREN:
                self.state = 1384
                self.match(Parser.GLPAREN)
                self.state = 1385
                self.compConstraint()
                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Parser.COMMA:
                    self.state = 1386
                    self.match(Parser.COMMA)
                    self.state = 1387
                    self.compConstraint()
                    self.state = 1392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1393
                self.match(Parser.GRPAREN)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvalDatasetTypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datasetType(self):
            return self.getTypedRuleContext(Parser.DatasetTypeContext, 0)

        def scalarType(self):
            return self.getTypedRuleContext(Parser.ScalarTypeContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_evalDatasetType

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEvalDatasetType"):
                return visitor.visitEvalDatasetType(self)
            else:
                return visitor.visitChildren(self)

    def evalDatasetType(self):

        localctx = Parser.EvalDatasetTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_evalDatasetType)
        try:
            self.state = 1399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.DATASET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1397
                self.datasetType()
                pass
            elif token in [
                Parser.BOOLEAN,
                Parser.DATE,
                Parser.TIME_PERIOD,
                Parser.NUMBER,
                Parser.STRING,
                Parser.TIME,
                Parser.INTEGER,
                Parser.DURATION,
                Parser.SCALAR,
                Parser.IDENTIFIER,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1398
                self.scalarType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScalarSetTypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(Parser.SET, 0)

        def LT(self):
            return self.getToken(Parser.LT, 0)

        def scalarType(self):
            return self.getTypedRuleContext(Parser.ScalarTypeContext, 0)

        def MT(self):
            return self.getToken(Parser.MT, 0)

        def getRuleIndex(self):
            return Parser.RULE_scalarSetType

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitScalarSetType"):
                return visitor.visitScalarSetType(self)
            else:
                return visitor.visitChildren(self)

    def scalarSetType(self):

        localctx = Parser.ScalarSetTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_scalarSetType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(Parser.SET)
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.LT:
                self.state = 1402
                self.match(Parser.LT)
                self.state = 1403
                self.scalarType()
                self.state = 1404
                self.match(Parser.MT)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DpRulesetContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_dpRuleset

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class DataPointVdContext(DpRulesetContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.DpRulesetContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATAPOINT_ON_VD(self):
            return self.getToken(Parser.DATAPOINT_ON_VD, 0)

        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)

        def valueDomainName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ValueDomainNameContext)
            else:
                return self.getTypedRuleContext(Parser.ValueDomainNameContext, i)

        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)

        def MUL(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.MUL)
            else:
                return self.getToken(Parser.MUL, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDataPointVd"):
                return visitor.visitDataPointVd(self)
            else:
                return visitor.visitChildren(self)

    class DataPointVarContext(DpRulesetContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.DpRulesetContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATAPOINT_ON_VAR(self):
            return self.getToken(Parser.DATAPOINT_ON_VAR, 0)

        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)

        def varID(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.VarIDContext)
            else:
                return self.getTypedRuleContext(Parser.VarIDContext, i)

        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)

        def MUL(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.MUL)
            else:
                return self.getToken(Parser.MUL, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDataPointVar"):
                return visitor.visitDataPointVar(self)
            else:
                return visitor.visitChildren(self)

    class DataPointContext(DpRulesetContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.DpRulesetContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATAPOINT(self):
            return self.getToken(Parser.DATAPOINT, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDataPoint"):
                return visitor.visitDataPoint(self)
            else:
                return visitor.visitChildren(self)

    def dpRuleset(self):

        localctx = Parser.DpRulesetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_dpRuleset)
        self._la = 0  # Token type
        try:
            self.state = 1437
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.DATAPOINT]:
                localctx = Parser.DataPointContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1408
                self.match(Parser.DATAPOINT)
                pass
            elif token in [Parser.DATAPOINT_ON_VD]:
                localctx = Parser.DataPointVdContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1409
                self.match(Parser.DATAPOINT_ON_VD)
                self.state = 1421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.GLPAREN:
                    self.state = 1410
                    self.match(Parser.GLPAREN)
                    self.state = 1411
                    self.valueDomainName()
                    self.state = 1416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Parser.MUL:
                        self.state = 1412
                        self.match(Parser.MUL)
                        self.state = 1413
                        self.valueDomainName()
                        self.state = 1418
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1419
                    self.match(Parser.GRPAREN)

                pass
            elif token in [Parser.DATAPOINT_ON_VAR]:
                localctx = Parser.DataPointVarContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1423
                self.match(Parser.DATAPOINT_ON_VAR)
                self.state = 1435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.GLPAREN:
                    self.state = 1424
                    self.match(Parser.GLPAREN)
                    self.state = 1425
                    self.varID()
                    self.state = 1430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Parser.MUL:
                        self.state = 1426
                        self.match(Parser.MUL)
                        self.state = 1427
                        self.varID()
                        self.state = 1432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1433
                    self.match(Parser.GRPAREN)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HrRulesetContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_hrRuleset

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class HrRulesetVdTypeContext(HrRulesetContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.HrRulesetContext
            super().__init__(parser)
            self.vdName = None  # Token
            self.copyFrom(ctx)

        def HIERARCHICAL_ON_VD(self):
            return self.getToken(Parser.HIERARCHICAL_ON_VD, 0)

        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)

        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def valueDomainName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ValueDomainNameContext)
            else:
                return self.getTypedRuleContext(Parser.ValueDomainNameContext, i)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def MUL(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.MUL)
            else:
                return self.getToken(Parser.MUL, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHrRulesetVdType"):
                return visitor.visitHrRulesetVdType(self)
            else:
                return visitor.visitChildren(self)

    class HrRulesetVarTypeContext(HrRulesetContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.HrRulesetContext
            super().__init__(parser)
            self.varName = None  # VarIDContext
            self.copyFrom(ctx)

        def HIERARCHICAL_ON_VAR(self):
            return self.getToken(Parser.HIERARCHICAL_ON_VAR, 0)

        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)

        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)

        def varID(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.VarIDContext)
            else:
                return self.getTypedRuleContext(Parser.VarIDContext, i)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def MUL(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.MUL)
            else:
                return self.getToken(Parser.MUL, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHrRulesetVarType"):
                return visitor.visitHrRulesetVarType(self)
            else:
                return visitor.visitChildren(self)

    class HrRulesetTypeContext(HrRulesetContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a VtlParser.HrRulesetContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HIERARCHICAL(self):
            return self.getToken(Parser.HIERARCHICAL, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHrRulesetType"):
                return visitor.visitHrRulesetType(self)
            else:
                return visitor.visitChildren(self)

    def hrRuleset(self):

        localctx = Parser.HrRulesetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_hrRuleset)
        self._la = 0  # Token type
        try:
            self.state = 1479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.HIERARCHICAL]:
                localctx = Parser.HrRulesetTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1439
                self.match(Parser.HIERARCHICAL)
                pass
            elif token in [Parser.HIERARCHICAL_ON_VD]:
                localctx = Parser.HrRulesetVdTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1440
                self.match(Parser.HIERARCHICAL_ON_VD)
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.GLPAREN:
                    self.state = 1441
                    self.match(Parser.GLPAREN)
                    self.state = 1442
                    localctx.vdName = self.match(Parser.IDENTIFIER)
                    self.state = 1454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Parser.LPAREN:
                        self.state = 1443
                        self.match(Parser.LPAREN)
                        self.state = 1444
                        self.valueDomainName()
                        self.state = 1449
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == Parser.MUL:
                            self.state = 1445
                            self.match(Parser.MUL)
                            self.state = 1446
                            self.valueDomainName()
                            self.state = 1451
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1452
                        self.match(Parser.RPAREN)

                    self.state = 1456
                    self.match(Parser.GRPAREN)

                pass
            elif token in [Parser.HIERARCHICAL_ON_VAR]:
                localctx = Parser.HrRulesetVarTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1459
                self.match(Parser.HIERARCHICAL_ON_VAR)
                self.state = 1477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Parser.GLPAREN:
                    self.state = 1460
                    self.match(Parser.GLPAREN)
                    self.state = 1461
                    localctx.varName = self.varID()
                    self.state = 1473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Parser.LPAREN:
                        self.state = 1462
                        self.match(Parser.LPAREN)
                        self.state = 1463
                        self.varID()
                        self.state = 1468
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == Parser.MUL:
                            self.state = 1464
                            self.match(Parser.MUL)
                            self.state = 1465
                            self.varID()
                            self.state = 1470
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1471
                        self.match(Parser.RPAREN)

                    self.state = 1475
                    self.match(Parser.GRPAREN)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueDomainNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_valueDomainName

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueDomainName"):
                return visitor.visitValueDomainName(self)
            else:
                return visitor.visitChildren(self)

    def valueDomainName(self):

        localctx = Parser.ValueDomainNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_valueDomainName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RulesetIDContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_rulesetID

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRulesetID"):
                return visitor.visitRulesetID(self)
            else:
                return visitor.visitChildren(self)

    def rulesetID(self):

        localctx = Parser.RulesetIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_rulesetID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RulesetSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signature(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.SignatureContext)
            else:
                return self.getTypedRuleContext(Parser.SignatureContext, i)

        def VALUE_DOMAIN(self):
            return self.getToken(Parser.VALUE_DOMAIN, 0)

        def VARIABLE(self):
            return self.getToken(Parser.VARIABLE, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_rulesetSignature

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRulesetSignature"):
                return visitor.visitRulesetSignature(self)
            else:
                return visitor.visitChildren(self)

    def rulesetSignature(self):

        localctx = Parser.RulesetSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_rulesetSignature)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            _la = self._input.LA(1)
            if not (_la == Parser.VALUE_DOMAIN or _la == Parser.VARIABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1486
            self.signature()
            self.state = 1491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.COMMA:
                self.state = 1487
                self.match(Parser.COMMA)
                self.state = 1488
                self.signature()
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignatureContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varID(self):
            return self.getTypedRuleContext(Parser.VarIDContext, 0)

        def AS(self):
            return self.getToken(Parser.AS, 0)

        def alias(self):
            return self.getTypedRuleContext(Parser.AliasContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_signature

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSignature"):
                return visitor.visitSignature(self)
            else:
                return visitor.visitChildren(self)

    def signature(self):

        localctx = Parser.SignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_signature)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self.varID()
            self.state = 1497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.AS:
                self.state = 1495
                self.match(Parser.AS)
                self.state = 1496
                self.alias()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleClauseDatapointContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleItemDatapoint(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.RuleItemDatapointContext)
            else:
                return self.getTypedRuleContext(Parser.RuleItemDatapointContext, i)

        def EOL(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.EOL)
            else:
                return self.getToken(Parser.EOL, i)

        def getRuleIndex(self):
            return Parser.RULE_ruleClauseDatapoint

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRuleClauseDatapoint"):
                return visitor.visitRuleClauseDatapoint(self)
            else:
                return visitor.visitChildren(self)

    def ruleClauseDatapoint(self):

        localctx = Parser.RuleClauseDatapointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_ruleClauseDatapoint)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            self.ruleItemDatapoint()
            self.state = 1504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.EOL:
                self.state = 1500
                self.match(Parser.EOL)
                self.state = 1501
                self.ruleItemDatapoint()
                self.state = 1506
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleItemDatapointContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ruleName = None  # Token
            self.antecedentContiditon = None  # ExprComponentContext
            self.consequentCondition = None  # ExprComponentContext

        def exprComponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext, i)

        def COLON(self):
            return self.getToken(Parser.COLON, 0)

        def WHEN(self):
            return self.getToken(Parser.WHEN, 0)

        def THEN(self):
            return self.getToken(Parser.THEN, 0)

        def erCode(self):
            return self.getTypedRuleContext(Parser.ErCodeContext, 0)

        def erLevel(self):
            return self.getTypedRuleContext(Parser.ErLevelContext, 0)

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_ruleItemDatapoint

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRuleItemDatapoint"):
                return visitor.visitRuleItemDatapoint(self)
            else:
                return visitor.visitChildren(self)

    def ruleItemDatapoint(self):

        localctx = Parser.RuleItemDatapointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_ruleItemDatapoint)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 166, self._ctx)
            if la_ == 1:
                self.state = 1507
                localctx.ruleName = self.match(Parser.IDENTIFIER)
                self.state = 1508
                self.match(Parser.COLON)

            self.state = 1515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.WHEN:
                self.state = 1511
                self.match(Parser.WHEN)
                self.state = 1512
                localctx.antecedentContiditon = self.exprComponent(0)
                self.state = 1513
                self.match(Parser.THEN)

            self.state = 1517
            localctx.consequentCondition = self.exprComponent(0)
            self.state = 1519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.ERRORCODE:
                self.state = 1518
                self.erCode()

            self.state = 1522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.ERRORLEVEL:
                self.state = 1521
                self.erLevel()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleClauseHierarchicalContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleItemHierarchical(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.RuleItemHierarchicalContext)
            else:
                return self.getTypedRuleContext(Parser.RuleItemHierarchicalContext, i)

        def EOL(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.EOL)
            else:
                return self.getToken(Parser.EOL, i)

        def getRuleIndex(self):
            return Parser.RULE_ruleClauseHierarchical

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRuleClauseHierarchical"):
                return visitor.visitRuleClauseHierarchical(self)
            else:
                return visitor.visitChildren(self)

    def ruleClauseHierarchical(self):

        localctx = Parser.RuleClauseHierarchicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_ruleClauseHierarchical)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.ruleItemHierarchical()
            self.state = 1529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.EOL:
                self.state = 1525
                self.match(Parser.EOL)
                self.state = 1526
                self.ruleItemHierarchical()
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleItemHierarchicalContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ruleName = None  # Token

        def codeItemRelation(self):
            return self.getTypedRuleContext(Parser.CodeItemRelationContext, 0)

        def COLON(self):
            return self.getToken(Parser.COLON, 0)

        def erCode(self):
            return self.getTypedRuleContext(Parser.ErCodeContext, 0)

        def erLevel(self):
            return self.getTypedRuleContext(Parser.ErLevelContext, 0)

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_ruleItemHierarchical

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRuleItemHierarchical"):
                return visitor.visitRuleItemHierarchical(self)
            else:
                return visitor.visitChildren(self)

    def ruleItemHierarchical(self):

        localctx = Parser.RuleItemHierarchicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_ruleItemHierarchical)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 171, self._ctx)
            if la_ == 1:
                self.state = 1532
                localctx.ruleName = self.match(Parser.IDENTIFIER)
                self.state = 1533
                self.match(Parser.COLON)

            self.state = 1536
            self.codeItemRelation()
            self.state = 1538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.ERRORCODE:
                self.state = 1537
                self.erCode()

            self.state = 1541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.ERRORLEVEL:
                self.state = 1540
                self.erLevel()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HierRuleSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE(self):
            return self.getToken(Parser.RULE, 0)

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def VALUE_DOMAIN(self):
            return self.getToken(Parser.VALUE_DOMAIN, 0)

        def VARIABLE(self):
            return self.getToken(Parser.VARIABLE, 0)

        def CONDITION(self):
            return self.getToken(Parser.CONDITION, 0)

        def valueDomainSignature(self):
            return self.getTypedRuleContext(Parser.ValueDomainSignatureContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_hierRuleSignature

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHierRuleSignature"):
                return visitor.visitHierRuleSignature(self)
            else:
                return visitor.visitChildren(self)

    def hierRuleSignature(self):

        localctx = Parser.HierRuleSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_hierRuleSignature)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            _la = self._input.LA(1)
            if not (_la == Parser.VALUE_DOMAIN or _la == Parser.VARIABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.CONDITION:
                self.state = 1544
                self.match(Parser.CONDITION)
                self.state = 1545
                self.valueDomainSignature()

            self.state = 1548
            self.match(Parser.RULE)
            self.state = 1549
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueDomainSignatureContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signature(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.SignatureContext)
            else:
                return self.getTypedRuleContext(Parser.SignatureContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_valueDomainSignature

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueDomainSignature"):
                return visitor.visitValueDomainSignature(self)
            else:
                return visitor.visitChildren(self)

    def valueDomainSignature(self):

        localctx = Parser.ValueDomainSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_valueDomainSignature)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.signature()
            self.state = 1556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.COMMA:
                self.state = 1552
                self.match(Parser.COMMA)
                self.state = 1553
                self.signature()
                self.state = 1558
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodeItemRelationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.codetemRef = None  # ValueDomainValueContext

        def codeItemRelationClause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.CodeItemRelationClauseContext)
            else:
                return self.getTypedRuleContext(Parser.CodeItemRelationClauseContext, i)

        def valueDomainValue(self):
            return self.getTypedRuleContext(Parser.ValueDomainValueContext, 0)

        def WHEN(self):
            return self.getToken(Parser.WHEN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def THEN(self):
            return self.getToken(Parser.THEN, 0)

        def comparisonOperand(self):
            return self.getTypedRuleContext(Parser.ComparisonOperandContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_codeItemRelation

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCodeItemRelation"):
                return visitor.visitCodeItemRelation(self)
            else:
                return visitor.visitChildren(self)

    def codeItemRelation(self):

        localctx = Parser.CodeItemRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_codeItemRelation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.WHEN:
                self.state = 1559
                self.match(Parser.WHEN)
                self.state = 1560
                self.exprComponent(0)
                self.state = 1561
                self.match(Parser.THEN)

            self.state = 1565
            localctx.codetemRef = self.valueDomainValue()
            self.state = 1567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and (
                (1 << _la)
                & (
                    (1 << Parser.EQ)
                    | (1 << Parser.LT)
                    | (1 << Parser.MT)
                    | (1 << Parser.ME)
                    | (1 << Parser.NEQ)
                    | (1 << Parser.LE)
                )
            ) != 0:
                self.state = 1566
                self.comparisonOperand()

            self.state = 1569
            self.codeItemRelationClause()
            self.state = 1573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                _la == Parser.PLUS
                or _la == Parser.MINUS
                or (
                    (((_la - 229)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 229))
                        & (
                            (1 << (Parser.INTEGER_CONSTANT - 229))
                            | (1 << (Parser.NUMBER_CONSTANT - 229))
                            | (1 << (Parser.IDENTIFIER - 229))
                        )
                    )
                    != 0
                )
            ):
                self.state = 1570
                self.codeItemRelationClause()
                self.state = 1575
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodeItemRelationClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.opAdd = None  # Token
            self.rightCodeItem = None  # ValueDomainValueContext
            self.rightCondition = None  # ExprComponentContext

        def valueDomainValue(self):
            return self.getTypedRuleContext(Parser.ValueDomainValueContext, 0)

        def QLPAREN(self):
            return self.getToken(Parser.QLPAREN, 0)

        def QRPAREN(self):
            return self.getToken(Parser.QRPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def PLUS(self):
            return self.getToken(Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(Parser.MINUS, 0)

        def getRuleIndex(self):
            return Parser.RULE_codeItemRelationClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCodeItemRelationClause"):
                return visitor.visitCodeItemRelationClause(self)
            else:
                return visitor.visitChildren(self)

    def codeItemRelationClause(self):

        localctx = Parser.CodeItemRelationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_codeItemRelationClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.PLUS or _la == Parser.MINUS:
                self.state = 1576
                localctx.opAdd = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == Parser.PLUS or _la == Parser.MINUS):
                    localctx.opAdd = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 1579
            localctx.rightCodeItem = self.valueDomainValue()
            self.state = 1584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.QLPAREN:
                self.state = 1580
                self.match(Parser.QLPAREN)
                self.state = 1581
                localctx.rightCondition = self.exprComponent(0)
                self.state = 1582
                self.match(Parser.QRPAREN)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueDomainValueContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def INTEGER_CONSTANT(self):
            return self.getToken(Parser.INTEGER_CONSTANT, 0)

        def NUMBER_CONSTANT(self):
            return self.getToken(Parser.NUMBER_CONSTANT, 0)

        def getRuleIndex(self):
            return Parser.RULE_valueDomainValue

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueDomainValue"):
                return visitor.visitValueDomainValue(self)
            else:
                return visitor.visitChildren(self)

    def valueDomainValue(self):

        localctx = Parser.ValueDomainValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_valueDomainValue)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1586
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 229)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 229))
                        & (
                            (1 << (Parser.INTEGER_CONSTANT - 229))
                            | (1 << (Parser.NUMBER_CONSTANT - 229))
                            | (1 << (Parser.IDENTIFIER - 229))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScalarTypeConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Parser.RULE_scalarTypeConstraint

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class RangeConstraintContext(ScalarTypeConstraintContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ScalarTypeConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)

        def scalarItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ScalarItemContext)
            else:
                return self.getTypedRuleContext(Parser.ScalarItemContext, i)

        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRangeConstraint"):
                return visitor.visitRangeConstraint(self)
            else:
                return visitor.visitChildren(self)

    class ConditionConstraintContext(ScalarTypeConstraintContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a VtlParser.ScalarTypeConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QLPAREN(self):
            return self.getToken(Parser.QLPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def QRPAREN(self):
            return self.getToken(Parser.QRPAREN, 0)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConditionConstraint"):
                return visitor.visitConditionConstraint(self)
            else:
                return visitor.visitChildren(self)

    def scalarTypeConstraint(self):

        localctx = Parser.ScalarTypeConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_scalarTypeConstraint)
        self._la = 0  # Token type
        try:
            self.state = 1603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.QLPAREN]:
                localctx = Parser.ConditionConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1588
                self.match(Parser.QLPAREN)
                self.state = 1589
                self.exprComponent(0)
                self.state = 1590
                self.match(Parser.QRPAREN)
                pass
            elif token in [Parser.GLPAREN]:
                localctx = Parser.RangeConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1592
                self.match(Parser.GLPAREN)
                self.state = 1593
                self.scalarItem()
                self.state = 1598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Parser.COMMA:
                    self.state = 1594
                    self.match(Parser.COMMA)
                    self.state = 1595
                    self.scalarItem()
                    self.state = 1600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1601
                self.match(Parser.GRPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentType(self):
            return self.getTypedRuleContext(Parser.ComponentTypeContext, 0)

        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext, 0)

        def multModifier(self):
            return self.getTypedRuleContext(Parser.MultModifierContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_compConstraint

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompConstraint"):
                return visitor.visitCompConstraint(self)
            else:
                return visitor.visitChildren(self)

    def compConstraint(self):

        localctx = Parser.CompConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_compConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            self.componentType()
            self.state = 1608
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.IDENTIFIER]:
                self.state = 1606
                self.componentID()
                pass
            elif token in [Parser.OPTIONAL]:
                self.state = 1607
                self.multModifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultModifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def PLUS(self):
            return self.getToken(Parser.PLUS, 0)

        def MUL(self):
            return self.getToken(Parser.MUL, 0)

        def getRuleIndex(self):
            return Parser.RULE_multModifier

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMultModifier"):
                return visitor.visitMultModifier(self)
            else:
                return visitor.visitChildren(self)

    def multModifier(self):

        localctx = Parser.MultModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_multModifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.match(Parser.OPTIONAL)
            self.state = 1612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Parser.PLUS or _la == Parser.MUL:
                self.state = 1611
                _la = self._input.LA(1)
                if not (_la == Parser.PLUS or _la == Parser.MUL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValidationOutputContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVALID(self):
            return self.getToken(Parser.INVALID, 0)

        def ALL_MEASURES(self):
            return self.getToken(Parser.ALL_MEASURES, 0)

        def ALL(self):
            return self.getToken(Parser.ALL, 0)

        def getRuleIndex(self):
            return Parser.RULE_validationOutput

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValidationOutput"):
                return visitor.visitValidationOutput(self)
            else:
                return visitor.visitChildren(self)

    def validationOutput(self):

        localctx = Parser.ValidationOutputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_validationOutput)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1614
            _la = self._input.LA(1)
            if not (_la == Parser.ALL or _la == Parser.INVALID or _la == Parser.ALL_MEASURES):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValidationModeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_NULL(self):
            return self.getToken(Parser.NON_NULL, 0)

        def NON_ZERO(self):
            return self.getToken(Parser.NON_ZERO, 0)

        def PARTIAL_NULL(self):
            return self.getToken(Parser.PARTIAL_NULL, 0)

        def PARTIAL_ZERO(self):
            return self.getToken(Parser.PARTIAL_ZERO, 0)

        def ALWAYS_NULL(self):
            return self.getToken(Parser.ALWAYS_NULL, 0)

        def ALWAYS_ZERO(self):
            return self.getToken(Parser.ALWAYS_ZERO, 0)

        def getRuleIndex(self):
            return Parser.RULE_validationMode

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValidationMode"):
                return visitor.visitValidationMode(self)
            else:
                return visitor.visitChildren(self)

    def validationMode(self):

        localctx = Parser.ValidationModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_validationMode)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1616
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 213)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 213))
                        & (
                            (1 << (Parser.NON_NULL - 213))
                            | (1 << (Parser.NON_ZERO - 213))
                            | (1 << (Parser.PARTIAL_NULL - 213))
                            | (1 << (Parser.PARTIAL_ZERO - 213))
                            | (1 << (Parser.ALWAYS_NULL - 213))
                            | (1 << (Parser.ALWAYS_ZERO - 213))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionClauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONDITION(self):
            return self.getToken(Parser.CONDITION, 0)

        def componentID(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_conditionClause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConditionClause"):
                return visitor.visitConditionClause(self)
            else:
                return visitor.visitChildren(self)

    def conditionClause(self):

        localctx = Parser.ConditionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_conditionClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self.match(Parser.CONDITION)
            self.state = 1619
            self.componentID()
            self.state = 1624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.COMMA:
                self.state = 1620
                self.match(Parser.COMMA)
                self.state = 1621
                self.componentID()
                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InputModeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATASET(self):
            return self.getToken(Parser.DATASET, 0)

        def DATASET_PRIORITY(self):
            return self.getToken(Parser.DATASET_PRIORITY, 0)

        def getRuleIndex(self):
            return Parser.RULE_inputMode

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInputMode"):
                return visitor.visitInputMode(self)
            else:
                return visitor.visitChildren(self)

    def inputMode(self):

        localctx = Parser.InputModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_inputMode)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627
            _la = self._input.LA(1)
            if not (_la == Parser.DATASET or _la == Parser.DATASET_PRIORITY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImbalanceExprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMBALANCE(self):
            return self.getToken(Parser.IMBALANCE, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_imbalanceExpr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImbalanceExpr"):
                return visitor.visitImbalanceExpr(self)
            else:
                return visitor.visitChildren(self)

    def imbalanceExpr(self):

        localctx = Parser.ImbalanceExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_imbalanceExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            self.match(Parser.IMBALANCE)
            self.state = 1630
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InputModeHierarchyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE(self):
            return self.getToken(Parser.RULE, 0)

        def DATASET(self):
            return self.getToken(Parser.DATASET, 0)

        def RULE_PRIORITY(self):
            return self.getToken(Parser.RULE_PRIORITY, 0)

        def getRuleIndex(self):
            return Parser.RULE_inputModeHierarchy

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInputModeHierarchy"):
                return visitor.visitInputModeHierarchy(self)
            else:
                return visitor.visitChildren(self)

    def inputModeHierarchy(self):

        localctx = Parser.InputModeHierarchyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_inputModeHierarchy)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            _la = self._input.LA(1)
            if not (_la == Parser.DATASET or _la == Parser.RULE or _la == Parser.RULE_PRIORITY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OutputModeHierarchyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPUTED(self):
            return self.getToken(Parser.COMPUTED, 0)

        def ALL(self):
            return self.getToken(Parser.ALL, 0)

        def getRuleIndex(self):
            return Parser.RULE_outputModeHierarchy

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOutputModeHierarchy"):
                return visitor.visitOutputModeHierarchy(self)
            else:
                return visitor.visitChildren(self)

    def outputModeHierarchy(self):

        localctx = Parser.OutputModeHierarchyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_outputModeHierarchy)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634
            _la = self._input.LA(1)
            if not (_la == Parser.ALL or _la == Parser.COMPUTED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_alias

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAlias"):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)

    def alias(self):

        localctx = Parser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarIDContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_varID

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVarID"):
                return visitor.visitVarID(self)
            else:
                return visitor.visitChildren(self)

    def varID(self):

        localctx = Parser.VarIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_varID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1638
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleComponentIdContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_simpleComponentId

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleComponentId"):
                return visitor.visitSimpleComponentId(self)
            else:
                return visitor.visitChildren(self)

    def simpleComponentId(self):

        localctx = Parser.SimpleComponentIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_simpleComponentId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComponentIDContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.IDENTIFIER)
            else:
                return self.getToken(Parser.IDENTIFIER, i)

        def MEMBERSHIP(self):
            return self.getToken(Parser.MEMBERSHIP, 0)

        def getRuleIndex(self):
            return Parser.RULE_componentID

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComponentID"):
                return visitor.visitComponentID(self)
            else:
                return visitor.visitChildren(self)

    def componentID(self):

        localctx = Parser.ComponentIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_componentID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642
            self.match(Parser.IDENTIFIER)
            self.state = 1645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 186, self._ctx)
            if la_ == 1:
                self.state = 1643
                self.match(Parser.MEMBERSHIP)
                self.state = 1644
                self.match(Parser.IDENTIFIER)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)

        def scalarItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ScalarItemContext)
            else:
                return self.getTypedRuleContext(Parser.ScalarItemContext, i)

        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_lists

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLists"):
                return visitor.visitLists(self)
            else:
                return visitor.visitChildren(self)

    def lists(self):

        localctx = Parser.ListsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_lists)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.match(Parser.GLPAREN)
            self.state = 1648
            self.scalarItem()
            self.state = 1653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Parser.COMMA:
                self.state = 1649
                self.match(Parser.COMMA)
                self.state = 1650
                self.scalarItem()
                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1656
            self.match(Parser.GRPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ErCodeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERRORCODE(self):
            return self.getToken(Parser.ERRORCODE, 0)

        def constant(self):
            return self.getTypedRuleContext(Parser.ConstantContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_erCode

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitErCode"):
                return visitor.visitErCode(self)
            else:
                return visitor.visitChildren(self)

    def erCode(self):

        localctx = Parser.ErCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_erCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1658
            self.match(Parser.ERRORCODE)
            self.state = 1659
            self.constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ErLevelContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERRORLEVEL(self):
            return self.getToken(Parser.ERRORLEVEL, 0)

        def constant(self):
            return self.getTypedRuleContext(Parser.ConstantContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_erLevel

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitErLevel"):
                return visitor.visitErLevel(self)
            else:
                return visitor.visitChildren(self)

    def erLevel(self):

        localctx = Parser.ErLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_erLevel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self.match(Parser.ERRORLEVEL)
            self.state = 1662
            self.constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperandContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MT(self):
            return self.getToken(Parser.MT, 0)

        def ME(self):
            return self.getToken(Parser.ME, 0)

        def LE(self):
            return self.getToken(Parser.LE, 0)

        def LT(self):
            return self.getToken(Parser.LT, 0)

        def EQ(self):
            return self.getToken(Parser.EQ, 0)

        def NEQ(self):
            return self.getToken(Parser.NEQ, 0)

        def getRuleIndex(self):
            return Parser.RULE_comparisonOperand

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComparisonOperand"):
                return visitor.visitComparisonOperand(self)
            else:
                return visitor.visitChildren(self)

    def comparisonOperand(self):

        localctx = Parser.ComparisonOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_comparisonOperand)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << Parser.EQ)
                            | (1 << Parser.LT)
                            | (1 << Parser.MT)
                            | (1 << Parser.ME)
                            | (1 << Parser.NEQ)
                            | (1 << Parser.LE)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionalExprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext, 0)

        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def getRuleIndex(self):
            return Parser.RULE_optionalExpr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOptionalExpr"):
                return visitor.visitOptionalExpr(self)
            else:
                return visitor.visitChildren(self)

    def optionalExpr(self):

        localctx = Parser.OptionalExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_optionalExpr)
        try:
            self.state = 1668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                Parser.LPAREN,
                Parser.PLUS,
                Parser.MINUS,
                Parser.EVAL,
                Parser.IF,
                Parser.CURRENT_DATE,
                Parser.NOT,
                Parser.BETWEEN,
                Parser.NULL_CONSTANT,
                Parser.ISNULL,
                Parser.UNION,
                Parser.SYMDIFF,
                Parser.INTERSECT,
                Parser.CHECK,
                Parser.EXISTS_IN,
                Parser.MIN,
                Parser.MAX,
                Parser.ABS,
                Parser.LN,
                Parser.LOG,
                Parser.TRUNC,
                Parser.ROUND,
                Parser.POWER,
                Parser.MOD,
                Parser.LEN,
                Parser.TRIM,
                Parser.UCASE,
                Parser.LCASE,
                Parser.SUBSTR,
                Parser.SUM,
                Parser.AVG,
                Parser.MEDIAN,
                Parser.COUNT,
                Parser.EXP,
                Parser.CHARSET_MATCH,
                Parser.NVL,
                Parser.HIERARCHY,
                Parser.LTRIM,
                Parser.RTRIM,
                Parser.INSTR,
                Parser.REPLACE,
                Parser.CEIL,
                Parser.FLOOR,
                Parser.SQRT,
                Parser.SETDIFF,
                Parser.STDDEV_POP,
                Parser.STDDEV_SAMP,
                Parser.VAR_POP,
                Parser.VAR_SAMP,
                Parser.FIRST_VALUE,
                Parser.LAST_VALUE,
                Parser.LAG,
                Parser.LEAD,
                Parser.RATIO_TO_REPORT,
                Parser.FILL_TIME_SERIES,
                Parser.FLOW_TO_STOCK,
                Parser.STOCK_TO_FLOW,
                Parser.TIMESHIFT,
                Parser.INNER_JOIN,
                Parser.LEFT_JOIN,
                Parser.CROSS_JOIN,
                Parser.FULL_JOIN,
                Parser.PERIOD_INDICATOR,
                Parser.TIME_AGG,
                Parser.CAST,
                Parser.CHECK_DATAPOINT,
                Parser.CHECK_HIERARCHY,
                Parser.INTEGER_CONSTANT,
                Parser.NUMBER_CONSTANT,
                Parser.BOOLEAN_CONSTANT,
                Parser.STRING_CONSTANT,
                Parser.IDENTIFIER,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1666
                self.expr(0)
                pass
            elif token in [Parser.OPTIONAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1667
                self.match(Parser.OPTIONAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionalExprComponentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext, 0)

        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def getRuleIndex(self):
            return Parser.RULE_optionalExprComponent

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOptionalExprComponent"):
                return visitor.visitOptionalExprComponent(self)
            else:
                return visitor.visitChildren(self)

    def optionalExprComponent(self):

        localctx = Parser.OptionalExprComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_optionalExprComponent)
        try:
            self.state = 1672
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                Parser.LPAREN,
                Parser.PLUS,
                Parser.MINUS,
                Parser.EVAL,
                Parser.IF,
                Parser.CURRENT_DATE,
                Parser.NOT,
                Parser.BETWEEN,
                Parser.NULL_CONSTANT,
                Parser.ISNULL,
                Parser.RANK,
                Parser.MIN,
                Parser.MAX,
                Parser.ABS,
                Parser.LN,
                Parser.LOG,
                Parser.TRUNC,
                Parser.ROUND,
                Parser.POWER,
                Parser.MOD,
                Parser.LEN,
                Parser.TRIM,
                Parser.UCASE,
                Parser.LCASE,
                Parser.SUBSTR,
                Parser.SUM,
                Parser.AVG,
                Parser.MEDIAN,
                Parser.COUNT,
                Parser.EXP,
                Parser.CHARSET_MATCH,
                Parser.NVL,
                Parser.LTRIM,
                Parser.RTRIM,
                Parser.INSTR,
                Parser.REPLACE,
                Parser.CEIL,
                Parser.FLOOR,
                Parser.SQRT,
                Parser.STDDEV_POP,
                Parser.STDDEV_SAMP,
                Parser.VAR_POP,
                Parser.VAR_SAMP,
                Parser.FIRST_VALUE,
                Parser.LAST_VALUE,
                Parser.LAG,
                Parser.LEAD,
                Parser.RATIO_TO_REPORT,
                Parser.FILL_TIME_SERIES,
                Parser.FLOW_TO_STOCK,
                Parser.STOCK_TO_FLOW,
                Parser.TIMESHIFT,
                Parser.PERIOD_INDICATOR,
                Parser.TIME_AGG,
                Parser.CAST,
                Parser.INTEGER_CONSTANT,
                Parser.NUMBER_CONSTANT,
                Parser.BOOLEAN_CONSTANT,
                Parser.STRING_CONSTANT,
                Parser.IDENTIFIER,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1670
                self.exprComponent(0)
                pass
            elif token in [Parser.OPTIONAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1671
                self.match(Parser.OPTIONAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComponentRoleContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEASURE(self):
            return self.getToken(Parser.MEASURE, 0)

        def COMPONENT(self):
            return self.getToken(Parser.COMPONENT, 0)

        def DIMENSION(self):
            return self.getToken(Parser.DIMENSION, 0)

        def ATTRIBUTE(self):
            return self.getToken(Parser.ATTRIBUTE, 0)

        def viralAttribute(self):
            return self.getTypedRuleContext(Parser.ViralAttributeContext, 0)

        def getRuleIndex(self):
            return Parser.RULE_componentRole

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComponentRole"):
                return visitor.visitComponentRole(self)
            else:
                return visitor.visitChildren(self)

    def componentRole(self):

        localctx = Parser.ComponentRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_componentRole)
        try:
            self.state = 1679
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.MEASURE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1674
                self.match(Parser.MEASURE)
                pass
            elif token in [Parser.COMPONENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1675
                self.match(Parser.COMPONENT)
                pass
            elif token in [Parser.DIMENSION]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1676
                self.match(Parser.DIMENSION)
                pass
            elif token in [Parser.ATTRIBUTE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1677
                self.match(Parser.ATTRIBUTE)
                pass
            elif token in [Parser.VIRAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1678
                self.viralAttribute()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ViralAttributeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIRAL(self):
            return self.getToken(Parser.VIRAL, 0)

        def ATTRIBUTE(self):
            return self.getToken(Parser.ATTRIBUTE, 0)

        def getRuleIndex(self):
            return Parser.RULE_viralAttribute

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitViralAttribute"):
                return visitor.visitViralAttribute(self)
            else:
                return visitor.visitChildren(self)

    def viralAttribute(self):

        localctx = Parser.ViralAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_viralAttribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1681
            self.match(Parser.VIRAL)
            self.state = 1682
            self.match(Parser.ATTRIBUTE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueDomainIDContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_valueDomainID

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueDomainID"):
                return visitor.visitValueDomainID(self)
            else:
                return visitor.visitChildren(self)

    def valueDomainID(self):

        localctx = Parser.ValueDomainIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_valueDomainID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorIDContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_operatorID

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOperatorID"):
                return visitor.visitOperatorID(self)
            else:
                return visitor.visitChildren(self)

    def operatorID(self):

        localctx = Parser.OperatorIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_operatorID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1686
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoutineNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_routineName

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRoutineName"):
                return visitor.visitRoutineName(self)
            else:
                return visitor.visitChildren(self)

    def routineName(self):

        localctx = Parser.RoutineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_routineName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_CONSTANT(self):
            return self.getToken(Parser.INTEGER_CONSTANT, 0)

        def NUMBER_CONSTANT(self):
            return self.getToken(Parser.NUMBER_CONSTANT, 0)

        def BOOLEAN_CONSTANT(self):
            return self.getToken(Parser.BOOLEAN_CONSTANT, 0)

        def STRING_CONSTANT(self):
            return self.getToken(Parser.STRING_CONSTANT, 0)

        def NULL_CONSTANT(self):
            return self.getToken(Parser.NULL_CONSTANT, 0)

        def getRuleIndex(self):
            return Parser.RULE_constant

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstant"):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)

    def constant(self):

        localctx = Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_constant)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            _la = self._input.LA(1)
            if not (
                _la == Parser.NULL_CONSTANT
                or (
                    (((_la - 229)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 229))
                        & (
                            (1 << (Parser.INTEGER_CONSTANT - 229))
                            | (1 << (Parser.NUMBER_CONSTANT - 229))
                            | (1 << (Parser.BOOLEAN_CONSTANT - 229))
                            | (1 << (Parser.STRING_CONSTANT - 229))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasicScalarTypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(Parser.STRING, 0)

        def INTEGER(self):
            return self.getToken(Parser.INTEGER, 0)

        def NUMBER(self):
            return self.getToken(Parser.NUMBER, 0)

        def BOOLEAN(self):
            return self.getToken(Parser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(Parser.DATE, 0)

        def TIME(self):
            return self.getToken(Parser.TIME, 0)

        def TIME_PERIOD(self):
            return self.getToken(Parser.TIME_PERIOD, 0)

        def DURATION(self):
            return self.getToken(Parser.DURATION, 0)

        def SCALAR(self):
            return self.getToken(Parser.SCALAR, 0)

        def getRuleIndex(self):
            return Parser.RULE_basicScalarType

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBasicScalarType"):
                return visitor.visitBasicScalarType(self)
            else:
                return visitor.visitChildren(self)

    def basicScalarType(self):

        localctx = Parser.BasicScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_basicScalarType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 156)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 156))
                        & (
                            (1 << (Parser.BOOLEAN - 156))
                            | (1 << (Parser.DATE - 156))
                            | (1 << (Parser.TIME_PERIOD - 156))
                            | (1 << (Parser.NUMBER - 156))
                            | (1 << (Parser.STRING - 156))
                            | (1 << (Parser.TIME - 156))
                            | (1 << (Parser.INTEGER - 156))
                            | (1 << (Parser.DURATION - 156))
                        )
                    )
                    != 0
                )
                or _la == Parser.SCALAR
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RetainTypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN_CONSTANT(self):
            return self.getToken(Parser.BOOLEAN_CONSTANT, 0)

        def ALL(self):
            return self.getToken(Parser.ALL, 0)

        def getRuleIndex(self):
            return Parser.RULE_retainType

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRetainType"):
                return visitor.visitRetainType(self)
            else:
                return visitor.visitChildren(self)

    def retainType(self):

        localctx = Parser.RetainTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_retainType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            _la = self._input.LA(1)
            if not (_la == Parser.ALL or _la == Parser.BOOLEAN_CONSTANT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.expr_sempred
        self._predicates[3] = self.exprComponent_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx: ExprContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 9)

        if predIndex == 1:
            return self.precpred(self._ctx, 8)

        if predIndex == 2:
            return self.precpred(self._ctx, 7)

        if predIndex == 3:
            return self.precpred(self._ctx, 5)

        if predIndex == 4:
            return self.precpred(self._ctx, 4)

        if predIndex == 5:
            return self.precpred(self._ctx, 12)

        if predIndex == 6:
            return self.precpred(self._ctx, 11)

        if predIndex == 7:
            return self.precpred(self._ctx, 6)

    def exprComponent_sempred(self, localctx: ExprComponentContext, predIndex: int):
        if predIndex == 8:
            return self.precpred(self._ctx, 9)

        if predIndex == 9:
            return self.precpred(self._ctx, 8)

        if predIndex == 10:
            return self.precpred(self._ctx, 7)

        if predIndex == 11:
            return self.precpred(self._ctx, 5)

        if predIndex == 12:
            return self.precpred(self._ctx, 4)

        if predIndex == 13:
            return self.precpred(self._ctx, 6)

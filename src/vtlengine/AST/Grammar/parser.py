# Generated from Vtl.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
from typing import TextIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00fb")
        buf.write("\u0734\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\3\2\3\2")
        buf.write("\3\2\7\2\u00e2\n\2\f\2\16\2\u00e5\13\2\3\2\3\2\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u00f2\n\3\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\7\4\u010d\n\4\f\4\16")
        buf.write("\4\u0110\13\4\3\4\3\4\3\4\3\4\3\4\5\4\u0117\n\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5")
        buf.write("\4\u0135\n\4\7\4\u0137\n\4\f\4\16\4\u013a\13\4\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\5\5\u014d\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0163")
        buf.write("\n\5\7\5\u0165\n\5\f\5\16\5\u0168\13\5\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\5\6\u0172\n\6\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0180\n\7\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\5\b\u0189\n\b\3\t\3\t\3\t\3\t\7\t\u018f\n")
        buf.write("\t\f\t\16\t\u0192\13\t\3\n\3\n\3\n\3\n\5\n\u0198\n\n\5")
        buf.write("\n\u019a\n\n\3\13\3\13\3\13\3\f\3\f\3\f\3\f\7\f\u01a3")
        buf.write("\n\f\f\f\16\f\u01a6\13\f\3\r\3\r\3\r\3\r\7\r\u01ac\n\r")
        buf.write("\f\r\16\r\u01af\13\r\3\16\3\16\3\16\3\16\3\16\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u01be\n\17\f\17\16")
        buf.write("\17\u01c1\13\17\3\20\3\20\3\20\3\20\7\20\u01c7\n\20\f")
        buf.write("\20\16\20\u01ca\13\20\3\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\5\21\u01d8\n\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\7\22\u01e1\n\22\f\22\16\22\u01e4")
        buf.write("\13\22\5\22\u01e6\n\22\3\22\3\22\3\22\5\22\u01eb\n\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u020c")
        buf.write("\n\22\3\23\3\23\3\23\3\23\3\23\7\23\u0213\n\23\f\23\16")
        buf.write("\23\u0216\13\23\5\23\u0218\n\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\5\23\u0222\n\23\3\23\3\23\3\23\5\23")
        buf.write("\u0227\n\23\7\23\u0229\n\23\f\23\16\23\u022c\13\23\3\23")
        buf.write("\3\23\3\23\5\23\u0231\n\23\3\23\3\23\5\23\u0235\n\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u023f\n\23")
        buf.write("\3\23\3\23\5\23\u0243\n\23\3\23\3\23\5\23\u0247\n\23\3")
        buf.write("\24\3\24\3\24\3\24\3\24\7\24\u024e\n\24\f\24\16\24\u0251")
        buf.write("\13\24\5\24\u0253\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\5\24\u025d\n\24\3\24\3\24\5\24\u0261\n\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u026b\n\24\3")
        buf.write("\24\3\24\3\24\5\24\u0270\n\24\7\24\u0272\n\24\f\24\16")
        buf.write("\24\u0275\13\24\3\24\3\24\3\24\5\24\u027a\n\24\3\24\3")
        buf.write("\24\5\24\u027e\n\24\3\24\3\24\5\24\u0282\n\24\3\25\3\25")
        buf.write("\5\25\u0286\n\25\3\26\3\26\5\26\u028a\n\26\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\5\27\u029a\n\27\3\27\3\27\5\27\u029e\n\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u02a9\n\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u02b4")
        buf.write("\n\27\3\27\3\27\5\27\u02b8\n\27\3\27\3\27\5\27\u02bc\n")
        buf.write("\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\5\30\u02cc\n\30\3\30\3\30\5\30\u02d0")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30")
        buf.write("\u02db\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\5\30\u02e6\n\30\3\30\3\30\5\30\u02ea\n\30\3\30\3\30")
        buf.write("\5\30\u02ee\n\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\5\31\u02fa\n\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u0305\n\31\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0311\n\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u031c\n")
        buf.write("\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u033a\n\33\3")
        buf.write("\33\3\33\5\33\u033e\n\33\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\5\34\u0355\n\34\3\35\3\35\3\35\5")
        buf.write("\35\u035a\n\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0362")
        buf.write("\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0377")
        buf.write("\n\35\3\35\3\35\5\35\u037b\n\35\3\35\3\35\5\35\u037f\n")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u03bd\n\35\3\36\3")
        buf.write("\36\3\36\5\36\u03c2\n\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\5\36\u03ca\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\5\36\u03df\n\36\3\36\3\36\5\36\u03e3\n\36\3\36\3")
        buf.write("\36\5\36\u03e7\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0425")
        buf.write("\n\36\3\37\3\37\3\37\3\37\3\37\6\37\u042c\n\37\r\37\16")
        buf.write("\37\u042d\3\37\3\37\3\37\3\37\3\37\3\37\3\37\6\37\u0437")
        buf.write("\n\37\r\37\16\37\u0438\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\5\37\u0444\n\37\3 \3 \3 \3 \3 \3 \5 \u044c")
        buf.write("\n \3 \3 \5 \u0450\n \3 \5 \u0453\n \3 \5 \u0456\n \3")
        buf.write(" \5 \u0459\n \3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3!\7!\u0466")
        buf.write("\n!\f!\16!\u0469\13!\5!\u046b\n!\3!\5!\u046e\n!\3!\3!")
        buf.write("\3!\3!\3!\3!\3!\3!\5!\u0478\n!\3!\3!\5!\u047c\n!\3!\5")
        buf.write("!\u047f\n!\3!\5!\u0482\n!\3!\5!\u0485\n!\3!\3!\3!\3!\3")
        buf.write("!\3!\5!\u048d\n!\3!\5!\u0490\n!\3!\5!\u0493\n!\3!\5!\u0496")
        buf.write("\n!\3!\3!\5!\u049a\n!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\5$\u04b2\n$\3")
        buf.write("%\3%\3%\3%\3%\5%\u04b9\n%\5%\u04bb\n%\3%\3%\3&\3&\3&\3")
        buf.write("&\3&\3&\5&\u04c5\n&\3&\5&\u04c8\n&\3&\5&\u04cb\n&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u04d7\n&\5&\u04d9\n&\3&\3")
        buf.write("&\3&\5&\u04de\n&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\5&\u04ee\n&\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u04f6\n\'")
        buf.write("\3\'\5\'\u04f9\n\'\3\'\5\'\u04fc\n\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3\'\5\'\u0507\n\'\5\'\u0509\n\'\3\'\3\'")
        buf.write("\3\'\5\'\u050e\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\5\'\u051a\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\5\'\u052a\n\'\3(\3(\3(\3(\3)\3)\3")
        buf.write(")\7)\u0533\n)\f)\16)\u0536\13)\3*\5*\u0539\n*\3*\3*\3")
        buf.write("*\3*\3+\5+\u0540\n+\3+\3+\3+\3+\3,\3,\3,\3,\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\5-\u0552\n-\3-\3-\5-\u0556\n-\3.\3.\3.\7")
        buf.write(".\u055b\n.\f.\16.\u055e\13.\3/\3/\3/\7/\u0563\n/\f/\16")
        buf.write("/\u0566\13/\3/\3/\3/\3/\7/\u056c\n/\f/\16/\u056f\13/\5")
        buf.write("/\u0571\n/\3\60\3\60\3\60\5\60\u0576\n\60\3\61\5\61\u0579")
        buf.write("\n\61\3\61\3\61\3\61\5\61\u057e\n\61\3\61\5\61\u0581\n")
        buf.write("\61\3\61\5\61\u0584\n\61\3\62\3\62\3\62\3\63\3\63\3\63")
        buf.write("\3\63\3\63\7\63\u058e\n\63\f\63\16\63\u0591\13\63\3\64")
        buf.write("\3\64\3\64\3\64\3\64\7\64\u0598\n\64\f\64\16\64\u059b")
        buf.write("\13\64\3\65\3\65\5\65\u059f\n\65\3\66\3\66\3\66\5\66\u05a4")
        buf.write("\n\66\3\66\3\66\3\66\3\66\3\66\3\67\3\67\38\38\38\38\3")
        buf.write("8\38\38\38\38\38\38\58\u05b8\n8\39\39\39\39\39\79\u05bf")
        buf.write("\n9\f9\169\u05c2\139\39\39\39\59\u05c7\n9\3:\3:\3:\3;")
        buf.write("\3;\3;\3;\5;\u05d0\n;\3<\3<\3<\5<\u05d5\n<\3=\3=\5=\u05d9")
        buf.write("\n=\3>\3>\3>\3>\3>\5>\u05e0\n>\3?\3?\3?\5?\u05e5\n?\3")
        buf.write("@\3@\5@\u05e9\n@\3@\5@\u05ec\n@\3@\5@\u05ef\n@\3@\5@\u05f2")
        buf.write("\n@\3A\3A\3A\3A\3A\5A\u05f9\nA\3B\3B\3B\3B\3B\7B\u0600")
        buf.write("\nB\fB\16B\u0603\13B\3B\3B\5B\u0607\nB\3C\3C\5C\u060b")
        buf.write("\nC\3D\3D\3D\3D\3D\5D\u0612\nD\3E\3E\3E\3E\3E\3E\7E\u061a")
        buf.write("\nE\fE\16E\u061d\13E\3E\3E\5E\u0621\nE\3E\3E\3E\3E\3E")
        buf.write("\7E\u0628\nE\fE\16E\u062b\13E\3E\3E\5E\u062f\nE\5E\u0631")
        buf.write("\nE\3F\3F\3F\3F\3F\3F\3F\3F\7F\u063b\nF\fF\16F\u063e\13")
        buf.write("F\3F\3F\5F\u0642\nF\3F\5F\u0645\nF\3F\3F\3F\3F\3F\3F\3")
        buf.write("F\7F\u064e\nF\fF\16F\u0651\13F\3F\3F\5F\u0655\nF\3F\3")
        buf.write("F\5F\u0659\nF\5F\u065b\nF\3G\3G\3H\3H\3I\3I\3I\3I\7I\u0665")
        buf.write("\nI\fI\16I\u0668\13I\3J\3J\3J\5J\u066d\nJ\3K\3K\3K\7K")
        buf.write("\u0672\nK\fK\16K\u0675\13K\3L\3L\5L\u0679\nL\3L\3L\3L")
        buf.write("\3L\5L\u067f\nL\3L\3L\5L\u0683\nL\3L\5L\u0686\nL\3M\3")
        buf.write("M\3M\7M\u068b\nM\fM\16M\u068e\13M\3N\3N\5N\u0692\nN\3")
        buf.write("N\3N\5N\u0696\nN\3N\5N\u0699\nN\3O\3O\3O\5O\u069e\nO\3")
        buf.write("O\3O\3O\3P\3P\3P\7P\u06a6\nP\fP\16P\u06a9\13P\3Q\3Q\3")
        buf.write("Q\3Q\5Q\u06af\nQ\3Q\3Q\5Q\u06b3\nQ\3Q\3Q\7Q\u06b7\nQ\f")
        buf.write("Q\16Q\u06ba\13Q\3R\5R\u06bd\nR\3R\3R\3R\3R\3R\5R\u06c4")
        buf.write("\nR\3S\3S\3T\3T\3T\3T\3T\3T\3T\3T\7T\u06d0\nT\fT\16T\u06d3")
        buf.write("\13T\3T\3T\5T\u06d7\nT\3U\3U\3U\5U\u06dc\nU\3V\3V\5V\u06e0")
        buf.write("\nV\3W\3W\3X\3X\3Y\3Y\3Y\3Y\7Y\u06ea\nY\fY\16Y\u06ed\13")
        buf.write("Y\3Z\3Z\3[\3[\3[\3\\\3\\\3]\3]\3^\3^\3_\3_\3`\3`\3a\3")
        buf.write("a\3a\5a\u0701\na\3b\3b\3b\3b\7b\u0707\nb\fb\16b\u070a")
        buf.write("\13b\3b\3b\3c\3c\3c\3d\3d\3d\3e\3e\3f\3f\5f\u0718\nf\3")
        buf.write("g\3g\5g\u071c\ng\3h\3h\3h\3h\3h\5h\u0723\nh\3i\3i\3i\3")
        buf.write("j\3j\3k\3k\3l\3l\3m\3m\3n\3n\3o\3o\3o\2\4\6\bp\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\2\'\4")
        buf.write("\2\17\20\64\64\3\2\21\22\4\2\17\20``\3\2\62\63\3\2\66")
        buf.write("\67\3\2+,\4\2\u00cc\u00cc\u00ce\u00ce\3\2\u00c3\u00c4")
        buf.write("\3\2\u00c5\u00c6\5\2__ac\u0085\u0086\6\2WWYYnn\u0089\u008b")
        buf.write("\3\2[\\\5\2??ZZ]^\4\2JJ\u00d3\u00d3\3\2\u00a4\u00a5\4")
        buf.write("\2uu\u00f6\u00f6\3\2TU\4\2==\u008d\u008d\4\2JJvv\5\2R")
        buf.write("Seh\u008e\u0091\6\2RSeh\u008e\u0091\u0095\u0096\3\2\u0097")
        buf.write("\u0098\3\2PQ\4\2NN\u0093\u0093\3\2wx\3\2\17\20\4\2\u00f3")
        buf.write("\u00f4\u00f7\u00f7\4\2\17\17\21\21\5\2JJvv\u00ea\u00ea")
        buf.write("\3\2\u00e3\u00e8\4\2{{\u00de\u00de\5\2{{\u0082\u0082\u00dd")
        buf.write("\u00dd\4\2JJ\u00e2\u00e2\3\2\t\16\4\288\u00f3\u00f6\5")
        buf.write("\2\u00aa\u00b0\u00d4\u00d4\u00eb\u00eb\4\2JJ\u00f5\u00f5")
        buf.write("\2\u07ed\2\u00e3\3\2\2\2\4\u00f1\3\2\2\2\6\u0116\3\2\2")
        buf.write("\2\b\u014c\3\2\2\2\n\u0171\3\2\2\2\f\u017f\3\2\2\2\16")
        buf.write("\u0188\3\2\2\2\20\u018a\3\2\2\2\22\u0193\3\2\2\2\24\u019b")
        buf.write("\3\2\2\2\26\u019e\3\2\2\2\30\u01a7\3\2\2\2\32\u01b0\3")
        buf.write("\2\2\2\34\u01b5\3\2\2\2\36\u01c2\3\2\2\2 \u01d7\3\2\2")
        buf.write("\2\"\u020b\3\2\2\2$\u0246\3\2\2\2&\u0281\3\2\2\2(\u0285")
        buf.write("\3\2\2\2*\u0289\3\2\2\2,\u02bb\3\2\2\2.\u02ed\3\2\2\2")
        buf.write("\60\u0304\3\2\2\2\62\u031b\3\2\2\2\64\u033d\3\2\2\2\66")
        buf.write("\u0354\3\2\2\28\u03bc\3\2\2\2:\u0424\3\2\2\2<\u0443\3")
        buf.write("\2\2\2>\u0445\3\2\2\2@\u0499\3\2\2\2B\u049b\3\2\2\2D\u04a2")
        buf.write("\3\2\2\2F\u04b1\3\2\2\2H\u04b3\3\2\2\2J\u04ed\3\2\2\2")
        buf.write("L\u0529\3\2\2\2N\u052b\3\2\2\2P\u052f\3\2\2\2R\u0538\3")
        buf.write("\2\2\2T\u053f\3\2\2\2V\u0545\3\2\2\2X\u0555\3\2\2\2Z\u0557")
        buf.write("\3\2\2\2\\\u055f\3\2\2\2^\u0572\3\2\2\2`\u0578\3\2\2\2")
        buf.write("b\u0585\3\2\2\2d\u0588\3\2\2\2f\u0592\3\2\2\2h\u059c\3")
        buf.write("\2\2\2j\u05a3\3\2\2\2l\u05aa\3\2\2\2n\u05b7\3\2\2\2p\u05c6")
        buf.write("\3\2\2\2r\u05c8\3\2\2\2t\u05cb\3\2\2\2v\u05d4\3\2\2\2")
        buf.write("x\u05d8\3\2\2\2z\u05df\3\2\2\2|\u05e4\3\2\2\2~\u05e8\3")
        buf.write("\2\2\2\u0080\u05f3\3\2\2\2\u0082\u05fa\3\2\2\2\u0084\u060a")
        buf.write("\3\2\2\2\u0086\u060c\3\2\2\2\u0088\u0630\3\2\2\2\u008a")
        buf.write("\u065a\3\2\2\2\u008c\u065c\3\2\2\2\u008e\u065e\3\2\2\2")
        buf.write("\u0090\u0660\3\2\2\2\u0092\u0669\3\2\2\2\u0094\u066e\3")
        buf.write("\2\2\2\u0096\u0678\3\2\2\2\u0098\u0687\3\2\2\2\u009a\u0691")
        buf.write("\3\2\2\2\u009c\u069a\3\2\2\2\u009e\u06a2\3\2\2\2\u00a0")
        buf.write("\u06ae\3\2\2\2\u00a2\u06bc\3\2\2\2\u00a4\u06c5\3\2\2\2")
        buf.write("\u00a6\u06d6\3\2\2\2\u00a8\u06d8\3\2\2\2\u00aa\u06dd\3")
        buf.write("\2\2\2\u00ac\u06e1\3\2\2\2\u00ae\u06e3\3\2\2\2\u00b0\u06e5")
        buf.write("\3\2\2\2\u00b2\u06ee\3\2\2\2\u00b4\u06f0\3\2\2\2\u00b6")
        buf.write("\u06f3\3\2\2\2\u00b8\u06f5\3\2\2\2\u00ba\u06f7\3\2\2\2")
        buf.write("\u00bc\u06f9\3\2\2\2\u00be\u06fb\3\2\2\2\u00c0\u06fd\3")
        buf.write("\2\2\2\u00c2\u0702\3\2\2\2\u00c4\u070d\3\2\2\2\u00c6\u0710")
        buf.write("\3\2\2\2\u00c8\u0713\3\2\2\2\u00ca\u0717\3\2\2\2\u00cc")
        buf.write("\u071b\3\2\2\2\u00ce\u0722\3\2\2\2\u00d0\u0724\3\2\2\2")
        buf.write("\u00d2\u0727\3\2\2\2\u00d4\u0729\3\2\2\2\u00d6\u072b\3")
        buf.write("\2\2\2\u00d8\u072d\3\2\2\2\u00da\u072f\3\2\2\2\u00dc\u0731")
        buf.write("\3\2\2\2\u00de\u00df\5\4\3\2\u00df\u00e0\7\u00f9\2\2\u00e0")
        buf.write("\u00e2\3\2\2\2\u00e1\u00de\3\2\2\2\u00e2\u00e5\3\2\2\2")
        buf.write("\u00e3\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e6\3")
        buf.write("\2\2\2\u00e5\u00e3\3\2\2\2\u00e6\u00e7\7\2\2\3\u00e7\3")
        buf.write("\3\2\2\2\u00e8\u00e9\5\u00bc_\2\u00e9\u00ea\7\26\2\2\u00ea")
        buf.write("\u00eb\5\6\4\2\u00eb\u00f2\3\2\2\2\u00ec\u00ed\5\u00bc")
        buf.write("_\2\u00ed\u00ee\7~\2\2\u00ee\u00ef\5\6\4\2\u00ef\u00f2")
        buf.write("\3\2\2\2\u00f0\u00f2\5\"\22\2\u00f1\u00e8\3\2\2\2\u00f1")
        buf.write("\u00ec\3\2\2\2\u00f1\u00f0\3\2\2\2\u00f2\5\3\2\2\2\u00f3")
        buf.write("\u00f4\b\4\1\2\u00f4\u00f5\7\3\2\2\u00f5\u00f6\5\6\4\2")
        buf.write("\u00f6\u00f7\7\4\2\2\u00f7\u0117\3\2\2\2\u00f8\u0117\5")
        buf.write("\f\7\2\u00f9\u00fa\t\2\2\2\u00fa\u0117\5\6\4\r\u00fb\u00fc")
        buf.write("\7\31\2\2\u00fc\u00fd\5\6\4\2\u00fd\u00fe\7\33\2\2\u00fe")
        buf.write("\u00ff\5\6\4\2\u00ff\u0100\7\34\2\2\u0100\u0101\5\6\4")
        buf.write("\6\u0101\u0117\3\2\2\2\u0102\u0103\7\32\2\2\u0103\u0104")
        buf.write("\7\u00bb\2\2\u0104\u0105\5\6\4\2\u0105\u0106\7\33\2\2")
        buf.write("\u0106\u010e\5\6\4\2\u0107\u0108\7\u00bb\2\2\u0108\u0109")
        buf.write("\5\6\4\2\u0109\u010a\7\33\2\2\u010a\u010b\5\6\4\2\u010b")
        buf.write("\u010d\3\2\2\2\u010c\u0107\3\2\2\2\u010d\u0110\3\2\2\2")
        buf.write("\u010e\u010c\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0111\3")
        buf.write("\2\2\2\u0110\u010e\3\2\2\2\u0111\u0112\7\34\2\2\u0112")
        buf.write("\u0113\5\6\4\5\u0113\u0117\3\2\2\2\u0114\u0117\5\u00d8")
        buf.write("m\2\u0115\u0117\5\u00bc_\2\u0116\u00f3\3\2\2\2\u0116\u00f8")
        buf.write("\3\2\2\2\u0116\u00f9\3\2\2\2\u0116\u00fb\3\2\2\2\u0116")
        buf.write("\u0102\3\2\2\2\u0116\u0114\3\2\2\2\u0116\u0115\3\2\2\2")
        buf.write("\u0117\u0138\3\2\2\2\u0118\u0119\f\f\2\2\u0119\u011a\t")
        buf.write("\3\2\2\u011a\u0137\5\6\4\r\u011b\u011c\f\13\2\2\u011c")
        buf.write("\u011d\t\4\2\2\u011d\u0137\5\6\4\f\u011e\u011f\f\n\2\2")
        buf.write("\u011f\u0120\5\u00c8e\2\u0120\u0121\5\6\4\13\u0121\u0137")
        buf.write("\3\2\2\2\u0122\u0123\f\b\2\2\u0123\u0124\7\61\2\2\u0124")
        buf.write("\u0137\5\6\4\t\u0125\u0126\f\7\2\2\u0126\u0127\t\5\2\2")
        buf.write("\u0127\u0137\5\6\4\b\u0128\u0129\f\17\2\2\u0129\u012a")
        buf.write("\7\5\2\2\u012a\u012b\5\16\b\2\u012b\u012c\7\6\2\2\u012c")
        buf.write("\u0137\3\2\2\2\u012d\u012e\f\16\2\2\u012e\u012f\7\27\2")
        buf.write("\2\u012f\u0137\5\u00be`\2\u0130\u0131\f\t\2\2\u0131\u0134")
        buf.write("\t\6\2\2\u0132\u0135\5\u00c2b\2\u0133\u0135\5\u00d2j\2")
        buf.write("\u0134\u0132\3\2\2\2\u0134\u0133\3\2\2\2\u0135\u0137\3")
        buf.write("\2\2\2\u0136\u0118\3\2\2\2\u0136\u011b\3\2\2\2\u0136\u011e")
        buf.write("\3\2\2\2\u0136\u0122\3\2\2\2\u0136\u0125\3\2\2\2\u0136")
        buf.write("\u0128\3\2\2\2\u0136\u012d\3\2\2\2\u0136\u0130\3\2\2\2")
        buf.write("\u0137\u013a\3\2\2\2\u0138\u0136\3\2\2\2\u0138\u0139\3")
        buf.write("\2\2\2\u0139\7\3\2\2\2\u013a\u0138\3\2\2\2\u013b\u013c")
        buf.write("\b\5\1\2\u013c\u013d\7\3\2\2\u013d\u013e\5\b\5\2\u013e")
        buf.write("\u013f\7\4\2\2\u013f\u014d\3\2\2\2\u0140\u014d\5\n\6\2")
        buf.write("\u0141\u0142\t\2\2\2\u0142\u014d\5\b\5\f\u0143\u0144\7")
        buf.write("\31\2\2\u0144\u0145\5\b\5\2\u0145\u0146\7\33\2\2\u0146")
        buf.write("\u0147\5\b\5\2\u0147\u0148\7\34\2\2\u0148\u0149\5\b\5")
        buf.write("\5\u0149\u014d\3\2\2\2\u014a\u014d\5\u00d8m\2\u014b\u014d")
        buf.write("\5\u00c0a\2\u014c\u013b\3\2\2\2\u014c\u0140\3\2\2\2\u014c")
        buf.write("\u0141\3\2\2\2\u014c\u0143\3\2\2\2\u014c\u014a\3\2\2\2")
        buf.write("\u014c\u014b\3\2\2\2\u014d\u0166\3\2\2\2\u014e\u014f\f")
        buf.write("\13\2\2\u014f\u0150\t\3\2\2\u0150\u0165\5\b\5\f\u0151")
        buf.write("\u0152\f\n\2\2\u0152\u0153\t\4\2\2\u0153\u0165\5\b\5\13")
        buf.write("\u0154\u0155\f\t\2\2\u0155\u0156\5\u00c8e\2\u0156\u0157")
        buf.write("\5\b\5\n\u0157\u0165\3\2\2\2\u0158\u0159\f\7\2\2\u0159")
        buf.write("\u015a\7\61\2\2\u015a\u0165\5\b\5\b\u015b\u015c\f\6\2")
        buf.write("\2\u015c\u015d\t\5\2\2\u015d\u0165\5\b\5\7\u015e\u015f")
        buf.write("\f\b\2\2\u015f\u0162\t\6\2\2\u0160\u0163\5\u00c2b\2\u0161")
        buf.write("\u0163\5\u00d2j\2\u0162\u0160\3\2\2\2\u0162\u0161\3\2")
        buf.write("\2\2\u0163\u0165\3\2\2\2\u0164\u014e\3\2\2\2\u0164\u0151")
        buf.write("\3\2\2\2\u0164\u0154\3\2\2\2\u0164\u0158\3\2\2\2\u0164")
        buf.write("\u015b\3\2\2\2\u0164\u015e\3\2\2\2\u0165\u0168\3\2\2\2")
        buf.write("\u0166\u0164\3\2\2\2\u0166\u0167\3\2\2\2\u0167\t\3\2\2")
        buf.write("\2\u0168\u0166\3\2\2\2\u0169\u0172\5&\24\2\u016a\u0172")
        buf.write("\5.\30\2\u016b\u0172\5\62\32\2\u016c\u0172\5\66\34\2\u016d")
        buf.write("\u0172\5:\36\2\u016e\u0172\5D#\2\u016f\u0172\5F$\2\u0170")
        buf.write("\u0172\5L\'\2\u0171\u0169\3\2\2\2\u0171\u016a\3\2\2\2")
        buf.write("\u0171\u016b\3\2\2\2\u0171\u016c\3\2\2\2\u0171\u016d\3")
        buf.write("\2\2\2\u0171\u016e\3\2\2\2\u0171\u016f\3\2\2\2\u0171\u0170")
        buf.write("\3\2\2\2\u0172\13\3\2\2\2\u0173\u0180\5 \21\2\u0174\u0180")
        buf.write("\5$\23\2\u0175\u0180\5,\27\2\u0176\u0180\5\60\31\2\u0177")
        buf.write("\u0180\5\64\33\2\u0178\u0180\58\35\2\u0179\u0180\5<\37")
        buf.write("\2\u017a\u0180\5> \2\u017b\u0180\5@!\2\u017c\u0180\5B")
        buf.write("\"\2\u017d\u0180\5H%\2\u017e\u0180\5J&\2\u017f\u0173\3")
        buf.write("\2\2\2\u017f\u0174\3\2\2\2\u017f\u0175\3\2\2\2\u017f\u0176")
        buf.write("\3\2\2\2\u017f\u0177\3\2\2\2\u017f\u0178\3\2\2\2\u017f")
        buf.write("\u0179\3\2\2\2\u017f\u017a\3\2\2\2\u017f\u017b\3\2\2\2")
        buf.write("\u017f\u017c\3\2\2\2\u017f\u017d\3\2\2\2\u017f\u017e\3")
        buf.write("\2\2\2\u0180\r\3\2\2\2\u0181\u0189\5\20\t\2\u0182\u0189")
        buf.write("\5\22\n\2\u0183\u0189\5\24\13\2\u0184\u0189\5\26\f\2\u0185")
        buf.write("\u0189\5\30\r\2\u0186\u0189\5\32\16\2\u0187\u0189\5\36")
        buf.write("\20\2\u0188\u0181\3\2\2\2\u0188\u0182\3\2\2\2\u0188\u0183")
        buf.write("\3\2\2\2\u0188\u0184\3\2\2\2\u0188\u0185\3\2\2\2\u0188")
        buf.write("\u0186\3\2\2\2\u0188\u0187\3\2\2\2\u0189\17\3\2\2\2\u018a")
        buf.write("\u018b\7/\2\2\u018b\u0190\5N(\2\u018c\u018d\7\23\2\2\u018d")
        buf.write("\u018f\5N(\2\u018e\u018c\3\2\2\2\u018f\u0192\3\2\2\2\u0190")
        buf.write("\u018e\3\2\2\2\u0190\u0191\3\2\2\2\u0191\21\3\2\2\2\u0192")
        buf.write("\u0190\3\2\2\2\u0193\u0194\7K\2\2\u0194\u0199\5P)\2\u0195")
        buf.write("\u0197\5p9\2\u0196\u0198\5r:\2\u0197\u0196\3\2\2\2\u0197")
        buf.write("\u0198\3\2\2\2\u0198\u019a\3\2\2\2\u0199\u0195\3\2\2\2")
        buf.write("\u0199\u019a\3\2\2\2\u019a\23\3\2\2\2\u019b\u019c\7l\2")
        buf.write("\2\u019c\u019d\5\b\5\2\u019d\25\3\2\2\2\u019e\u019f\7")
        buf.write("-\2\2\u019f\u01a4\5T+\2\u01a0\u01a1\7\23\2\2\u01a1\u01a3")
        buf.write("\5T+\2\u01a2\u01a0\3\2\2\2\u01a3\u01a6\3\2\2\2\u01a4\u01a2")
        buf.write("\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\27\3\2\2\2\u01a6\u01a4")
        buf.write("\3\2\2\2\u01a7\u01a8\t\7\2\2\u01a8\u01ad\5\u00c0a\2\u01a9")
        buf.write("\u01aa\7\23\2\2\u01aa\u01ac\5\u00c0a\2\u01ab\u01a9\3\2")
        buf.write("\2\2\u01ac\u01af\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ad\u01ae")
        buf.write("\3\2\2\2\u01ae\31\3\2\2\2\u01af\u01ad\3\2\2\2\u01b0\u01b1")
        buf.write("\t\b\2\2\u01b1\u01b2\5\u00c0a\2\u01b2\u01b3\7\23\2\2\u01b3")
        buf.write("\u01b4\5\u00c0a\2\u01b4\33\3\2\2\2\u01b5\u01b6\7\u00cd")
        buf.write("\2\2\u01b6\u01b7\5\u00c0a\2\u01b7\u01b8\7\23\2\2\u01b8")
        buf.write("\u01b9\5\u00c0a\2\u01b9\u01ba\7\66\2\2\u01ba\u01bf\5\u00d8")
        buf.write("m\2\u01bb\u01bc\7\23\2\2\u01bc\u01be\5\u00d8m\2\u01bd")
        buf.write("\u01bb\3\2\2\2\u01be\u01c1\3\2\2\2\u01bf\u01bd\3\2\2\2")
        buf.write("\u01bf\u01c0\3\2\2\2\u01c0\35\3\2\2\2\u01c1\u01bf\3\2")
        buf.write("\2\2\u01c2\u01c3\7\u00cf\2\2\u01c3\u01c8\5V,\2\u01c4\u01c5")
        buf.write("\7\23\2\2\u01c5\u01c7\5V,\2\u01c6\u01c4\3\2\2\2\u01c7")
        buf.write("\u01ca\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c8\u01c9\3\2\2\2")
        buf.write("\u01c9\37\3\2\2\2\u01ca\u01c8\3\2\2\2\u01cb\u01cc\t\t")
        buf.write("\2\2\u01cc\u01cd\7\3\2\2\u01cd\u01ce\5\\/\2\u01ce\u01cf")
        buf.write("\5`\61\2\u01cf\u01d0\7\4\2\2\u01d0\u01d8\3\2\2\2\u01d1")
        buf.write("\u01d2\t\n\2\2\u01d2\u01d3\7\3\2\2\u01d3\u01d4\5Z.\2\u01d4")
        buf.write("\u01d5\5`\61\2\u01d5\u01d6\7\4\2\2\u01d6\u01d8\3\2\2\2")
        buf.write("\u01d7\u01cb\3\2\2\2\u01d7\u01d1\3\2\2\2\u01d8!\3\2\2")
        buf.write("\2\u01d9\u01da\7}\2\2\u01da\u01db\7|\2\2\u01db\u01dc\5")
        buf.write("\u00d4k\2\u01dc\u01e5\7\3\2\2\u01dd\u01e2\5t;\2\u01de")
        buf.write("\u01df\7\23\2\2\u01df\u01e1\5t;\2\u01e0\u01de\3\2\2\2")
        buf.write("\u01e1\u01e4\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e2\u01e3\3")
        buf.write("\2\2\2\u01e3\u01e6\3\2\2\2\u01e4\u01e2\3\2\2\2\u01e5\u01dd")
        buf.write("\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7")
        buf.write("\u01ea\7\4\2\2\u01e8\u01e9\7\u00cb\2\2\u01e9\u01eb\5v")
        buf.write("<\2\u01ea\u01e8\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ec")
        buf.write("\3\2\2\2\u01ec\u01ed\7\u00ba\2\2\u01ed\u01ee\5\6\4\2\u01ee")
        buf.write("\u01ef\7\u0083\2\2\u01ef\u01f0\7|\2\2\u01f0\u020c\3\2")
        buf.write("\2\2\u01f1\u01f2\7}\2\2\u01f2\u01f3\7\177\2\2\u01f3\u01f4")
        buf.write("\7\u0081\2\2\u01f4\u01f5\5\u008eH\2\u01f5\u01f6\7\3\2")
        buf.write("\2\u01f6\u01f7\5\u0090I\2\u01f7\u01f8\7\4\2\2\u01f8\u01f9")
        buf.write("\7\u00ba\2\2\u01f9\u01fa\5\u0094K\2\u01fa\u01fb\7\u0083")
        buf.write("\2\2\u01fb\u01fc\7\177\2\2\u01fc\u01fd\7\u0081\2\2\u01fd")
        buf.write("\u020c\3\2\2\2\u01fe\u01ff\7}\2\2\u01ff\u0200\7\u0080")
        buf.write("\2\2\u0200\u0201\7\u0081\2\2\u0201\u0202\5\u008eH\2\u0202")
        buf.write("\u0203\7\3\2\2\u0203\u0204\5\u009cO\2\u0204\u0205\7\4")
        buf.write("\2\2\u0205\u0206\7\u00ba\2\2\u0206\u0207\5\u0098M\2\u0207")
        buf.write("\u0208\7\u0083\2\2\u0208\u0209\7\u0080\2\2\u0209\u020a")
        buf.write("\7\u0081\2\2\u020a\u020c\3\2\2\2\u020b\u01d9\3\2\2\2\u020b")
        buf.write("\u01f1\3\2\2\2\u020b\u01fe\3\2\2\2\u020c#\3\2\2\2\u020d")
        buf.write("\u020e\5\u00d4k\2\u020e\u0217\7\3\2\2\u020f\u0214\5*\26")
        buf.write("\2\u0210\u0211\7\23\2\2\u0211\u0213\5*\26\2\u0212\u0210")
        buf.write("\3\2\2\2\u0213\u0216\3\2\2\2\u0214\u0212\3\2\2\2\u0214")
        buf.write("\u0215\3\2\2\2\u0215\u0218\3\2\2\2\u0216\u0214\3\2\2\2")
        buf.write("\u0217\u020f\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u0219\3")
        buf.write("\2\2\2\u0219\u021a\7\4\2\2\u021a\u0247\3\2\2\2\u021b\u021c")
        buf.write("\7\30\2\2\u021c\u021d\7\3\2\2\u021d\u021e\5\u00d6l\2\u021e")
        buf.write("\u0221\7\3\2\2\u021f\u0222\5\u00bc_\2\u0220\u0222\5X-")
        buf.write("\2\u0221\u021f\3\2\2\2\u0221\u0220\3\2\2\2\u0221\u0222")
        buf.write("\3\2\2\2\u0222\u022a\3\2\2\2\u0223\u0226\7\23\2\2\u0224")
        buf.write("\u0227\5\u00bc_\2\u0225\u0227\5X-\2\u0226\u0224\3\2\2")
        buf.write("\2\u0226\u0225\3\2\2\2\u0227\u0229\3\2\2\2\u0228\u0223")
        buf.write("\3\2\2\2\u0229\u022c\3\2\2\2\u022a\u0228\3\2\2\2\u022a")
        buf.write("\u022b\3\2\2\2\u022b\u022d\3\2\2\2\u022c\u022a\3\2\2\2")
        buf.write("\u022d\u0230\7\4\2\2\u022e\u022f\7\u00f2\2\2\u022f\u0231")
        buf.write("\7\u00f6\2\2\u0230\u022e\3\2\2\2\u0230\u0231\3\2\2\2\u0231")
        buf.write("\u0234\3\2\2\2\u0232\u0233\7\u00cb\2\2\u0233\u0235\5\u0084")
        buf.write("C\2\u0234\u0232\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0236")
        buf.write("\3\2\2\2\u0236\u0237\7\4\2\2\u0237\u0247\3\2\2\2\u0238")
        buf.write("\u0239\7\u00dc\2\2\u0239\u023a\7\3\2\2\u023a\u023b\5\6")
        buf.write("\4\2\u023b\u023e\7\23\2\2\u023c\u023f\5\u00dan\2\u023d")
        buf.write("\u023f\5\u008cG\2\u023e\u023c\3\2\2\2\u023e\u023d\3\2")
        buf.write("\2\2\u023f\u0242\3\2\2\2\u0240\u0241\7\23\2\2\u0241\u0243")
        buf.write("\7\u00f6\2\2\u0242\u0240\3\2\2\2\u0242\u0243\3\2\2\2\u0243")
        buf.write("\u0244\3\2\2\2\u0244\u0245\7\4\2\2\u0245\u0247\3\2\2\2")
        buf.write("\u0246\u020d\3\2\2\2\u0246\u021b\3\2\2\2\u0246\u0238\3")
        buf.write("\2\2\2\u0247%\3\2\2\2\u0248\u0249\5\u00d4k\2\u0249\u0252")
        buf.write("\7\3\2\2\u024a\u024f\5(\25\2\u024b\u024c\7\23\2\2\u024c")
        buf.write("\u024e\5(\25\2\u024d\u024b\3\2\2\2\u024e\u0251\3\2\2\2")
        buf.write("\u024f\u024d\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0253\3")
        buf.write("\2\2\2\u0251\u024f\3\2\2\2\u0252\u024a\3\2\2\2\u0252\u0253")
        buf.write("\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0255\7\4\2\2\u0255")
        buf.write("\u0282\3\2\2\2\u0256\u0257\7\u00dc\2\2\u0257\u0258\7\3")
        buf.write("\2\2\u0258\u0259\5\b\5\2\u0259\u025c\7\23\2\2\u025a\u025d")
        buf.write("\5\u00dan\2\u025b\u025d\5\u008cG\2\u025c\u025a\3\2\2\2")
        buf.write("\u025c\u025b\3\2\2\2\u025d\u0260\3\2\2\2\u025e\u025f\7")
        buf.write("\23\2\2\u025f\u0261\7\u00f6\2\2\u0260\u025e\3\2\2\2\u0260")
        buf.write("\u0261\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u0263\7\4\2\2")
        buf.write("\u0263\u0282\3\2\2\2\u0264\u0265\7\30\2\2\u0265\u0266")
        buf.write("\7\3\2\2\u0266\u0267\5\u00d6l\2\u0267\u026a\7\3\2\2\u0268")
        buf.write("\u026b\5\u00c0a\2\u0269\u026b\5X-\2\u026a\u0268\3\2\2")
        buf.write("\2\u026a\u0269\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u0273")
        buf.write("\3\2\2\2\u026c\u026f\7\23\2\2\u026d\u0270\5\u00c0a\2\u026e")
        buf.write("\u0270\5X-\2\u026f\u026d\3\2\2\2\u026f\u026e\3\2\2\2\u0270")
        buf.write("\u0272\3\2\2\2\u0271\u026c\3\2\2\2\u0272\u0275\3\2\2\2")
        buf.write("\u0273\u0271\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0276\3")
        buf.write("\2\2\2\u0275\u0273\3\2\2\2\u0276\u0279\7\4\2\2\u0277\u0278")
        buf.write("\7\u00f2\2\2\u0278\u027a\7\u00f6\2\2\u0279\u0277\3\2\2")
        buf.write("\2\u0279\u027a\3\2\2\2\u027a\u027d\3\2\2\2\u027b\u027c")
        buf.write("\7\u00cb\2\2\u027c\u027e\5x=\2\u027d\u027b\3\2\2\2\u027d")
        buf.write("\u027e\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u0280\7\4\2\2")
        buf.write("\u0280\u0282\3\2\2\2\u0281\u0248\3\2\2\2\u0281\u0256\3")
        buf.write("\2\2\2\u0281\u0264\3\2\2\2\u0282\'\3\2\2\2\u0283\u0286")
        buf.write("\5\b\5\2\u0284\u0286\7u\2\2\u0285\u0283\3\2\2\2\u0285")
        buf.write("\u0284\3\2\2\2\u0286)\3\2\2\2\u0287\u028a\5\6\4\2\u0288")
        buf.write("\u028a\7u\2\2\u0289\u0287\3\2\2\2\u0289\u0288\3\2\2\2")
        buf.write("\u028a+\3\2\2\2\u028b\u028c\t\13\2\2\u028c\u028d\7\3\2")
        buf.write("\2\u028d\u028e\5\6\4\2\u028e\u028f\7\4\2\2\u028f\u02bc")
        buf.write("\3\2\2\2\u0290\u0291\7d\2\2\u0291\u0292\7\3\2\2\u0292")
        buf.write("\u029d\5\6\4\2\u0293\u0294\7\23\2\2\u0294\u0295\5\u00ca")
        buf.write("f\2\u0295\u0296\3\2\2\2\u0296\u0297\7\23\2\2\u0297\u0298")
        buf.write("\5\u00caf\2\u0298\u029a\3\2\2\2\u0299\u0293\3\2\2\2\u0299")
        buf.write("\u029a\3\2\2\2\u029a\u029e\3\2\2\2\u029b\u029c\7\23\2")
        buf.write("\2\u029c\u029e\5\u00caf\2\u029d\u0299\3\2\2\2\u029d\u029b")
        buf.write("\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a0\7\4\2\2\u02a0")
        buf.write("\u02bc\3\2\2\2\u02a1\u02a2\7\u0088\2\2\u02a2\u02a3\7\3")
        buf.write("\2\2\u02a3\u02a4\5\6\4\2\u02a4\u02a5\7\23\2\2\u02a5\u02a8")
        buf.write("\5\6\4\2\u02a6\u02a7\7\23\2\2\u02a7\u02a9\5\u00caf\2\u02a8")
        buf.write("\u02a6\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02aa\3\2\2\2")
        buf.write("\u02aa\u02ab\7\4\2\2\u02ab\u02bc\3\2\2\2\u02ac\u02ad\7")
        buf.write("\u0087\2\2\u02ad\u02ae\7\3\2\2\u02ae\u02af\5\6\4\2\u02af")
        buf.write("\u02b0\7\23\2\2\u02b0\u02b3\5\6\4\2\u02b1\u02b2\7\23\2")
        buf.write("\2\u02b2\u02b4\5\u00caf\2\u02b3\u02b1\3\2\2\2\u02b3\u02b4")
        buf.write("\3\2\2\2\u02b4\u02b7\3\2\2\2\u02b5\u02b6\7\23\2\2\u02b6")
        buf.write("\u02b8\5\u00caf\2\u02b7\u02b5\3\2\2\2\u02b7\u02b8\3\2")
        buf.write("\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02ba\7\4\2\2\u02ba\u02bc")
        buf.write("\3\2\2\2\u02bb\u028b\3\2\2\2\u02bb\u0290\3\2\2\2\u02bb")
        buf.write("\u02a1\3\2\2\2\u02bb\u02ac\3\2\2\2\u02bc-\3\2\2\2\u02bd")
        buf.write("\u02be\t\13\2\2\u02be\u02bf\7\3\2\2\u02bf\u02c0\5\b\5")
        buf.write("\2\u02c0\u02c1\7\4\2\2\u02c1\u02ee\3\2\2\2\u02c2\u02c3")
        buf.write("\7d\2\2\u02c3\u02c4\7\3\2\2\u02c4\u02cf\5\b\5\2\u02c5")
        buf.write("\u02c6\7\23\2\2\u02c6\u02c7\5\u00ccg\2\u02c7\u02c8\3\2")
        buf.write("\2\2\u02c8\u02c9\7\23\2\2\u02c9\u02ca\5\u00ccg\2\u02ca")
        buf.write("\u02cc\3\2\2\2\u02cb\u02c5\3\2\2\2\u02cb\u02cc\3\2\2\2")
        buf.write("\u02cc\u02d0\3\2\2\2\u02cd\u02ce\7\23\2\2\u02ce\u02d0")
        buf.write("\5\u00ccg\2\u02cf\u02cb\3\2\2\2\u02cf\u02cd\3\2\2\2\u02d0")
        buf.write("\u02d1\3\2\2\2\u02d1\u02d2\7\4\2\2\u02d2\u02ee\3\2\2\2")
        buf.write("\u02d3\u02d4\7\u0088\2\2\u02d4\u02d5\7\3\2\2\u02d5\u02d6")
        buf.write("\5\b\5\2\u02d6\u02d7\7\23\2\2\u02d7\u02da\5\b\5\2\u02d8")
        buf.write("\u02d9\7\23\2\2\u02d9\u02db\5\u00ccg\2\u02da\u02d8\3\2")
        buf.write("\2\2\u02da\u02db\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02dd")
        buf.write("\7\4\2\2\u02dd\u02ee\3\2\2\2\u02de\u02df\7\u0087\2\2\u02df")
        buf.write("\u02e0\7\3\2\2\u02e0\u02e1\5\b\5\2\u02e1\u02e2\7\23\2")
        buf.write("\2\u02e2\u02e5\5\b\5\2\u02e3\u02e4\7\23\2\2\u02e4\u02e6")
        buf.write("\5\u00ccg\2\u02e5\u02e3\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6")
        buf.write("\u02e9\3\2\2\2\u02e7\u02e8\7\23\2\2\u02e8\u02ea\5\u00cc")
        buf.write("g\2\u02e9\u02e7\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea\u02eb")
        buf.write("\3\2\2\2\u02eb\u02ec\7\4\2\2\u02ec\u02ee\3\2\2\2\u02ed")
        buf.write("\u02bd\3\2\2\2\u02ed\u02c2\3\2\2\2\u02ed\u02d3\3\2\2\2")
        buf.write("\u02ed\u02de\3\2\2\2\u02ee/\3\2\2\2\u02ef\u02f0\t\f\2")
        buf.write("\2\u02f0\u02f1\7\3\2\2\u02f1\u02f2\5\6\4\2\u02f2\u02f3")
        buf.write("\7\4\2\2\u02f3\u0305\3\2\2\2\u02f4\u02f5\t\r\2\2\u02f5")
        buf.write("\u02f6\7\3\2\2\u02f6\u02f9\5\6\4\2\u02f7\u02f8\7\23\2")
        buf.write("\2\u02f8\u02fa\5\u00caf\2\u02f9\u02f7\3\2\2\2\u02f9\u02fa")
        buf.write("\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fc\7\4\2\2\u02fc")
        buf.write("\u0305\3\2\2\2\u02fd\u02fe\t\16\2\2\u02fe\u02ff\7\3\2")
        buf.write("\2\u02ff\u0300\5\6\4\2\u0300\u0301\7\23\2\2\u0301\u0302")
        buf.write("\5\6\4\2\u0302\u0303\7\4\2\2\u0303\u0305\3\2\2\2\u0304")
        buf.write("\u02ef\3\2\2\2\u0304\u02f4\3\2\2\2\u0304\u02fd\3\2\2\2")
        buf.write("\u0305\61\3\2\2\2\u0306\u0307\t\f\2\2\u0307\u0308\7\3")
        buf.write("\2\2\u0308\u0309\5\b\5\2\u0309\u030a\7\4\2\2\u030a\u031c")
        buf.write("\3\2\2\2\u030b\u030c\t\r\2\2\u030c\u030d\7\3\2\2\u030d")
        buf.write("\u0310\5\b\5\2\u030e\u030f\7\23\2\2\u030f\u0311\5\u00cc")
        buf.write("g\2\u0310\u030e\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u0312")
        buf.write("\3\2\2\2\u0312\u0313\7\4\2\2\u0313\u031c\3\2\2\2\u0314")
        buf.write("\u0315\t\16\2\2\u0315\u0316\7\3\2\2\u0316\u0317\5\b\5")
        buf.write("\2\u0317\u0318\7\23\2\2\u0318\u0319\5\b\5\2\u0319\u031a")
        buf.write("\7\4\2\2\u031a\u031c\3\2\2\2\u031b\u0306\3\2\2\2\u031b")
        buf.write("\u030b\3\2\2\2\u031b\u0314\3\2\2\2\u031c\63\3\2\2\2\u031d")
        buf.write("\u031e\7\65\2\2\u031e\u031f\7\3\2\2\u031f\u0320\5\6\4")
        buf.write("\2\u0320\u0321\7\23\2\2\u0321\u0322\5\6\4\2\u0322\u0323")
        buf.write("\7\23\2\2\u0323\u0324\5\6\4\2\u0324\u0325\7\4\2\2\u0325")
        buf.write("\u033e\3\2\2\2\u0326\u0327\7q\2\2\u0327\u0328\7\3\2\2")
        buf.write("\u0328\u0329\5\6\4\2\u0329\u032a\7\23\2\2\u032a\u032b")
        buf.write("\5\6\4\2\u032b\u032c\7\4\2\2\u032c\u033e\3\2\2\2\u032d")
        buf.write("\u032e\79\2\2\u032e\u032f\7\3\2\2\u032f\u0330\5\6\4\2")
        buf.write("\u0330\u0331\7\4\2\2\u0331\u033e\3\2\2\2\u0332\u0333\7")
        buf.write("E\2\2\u0333\u0334\7\3\2\2\u0334\u0335\5\6\4\2\u0335\u0336")
        buf.write("\7\23\2\2\u0336\u0339\5\6\4\2\u0337\u0338\7\23\2\2\u0338")
        buf.write("\u033a\5\u00dco\2\u0339\u0337\3\2\2\2\u0339\u033a\3\2")
        buf.write("\2\2\u033a\u033b\3\2\2\2\u033b\u033c\7\4\2\2\u033c\u033e")
        buf.write("\3\2\2\2\u033d\u031d\3\2\2\2\u033d\u0326\3\2\2\2\u033d")
        buf.write("\u032d\3\2\2\2\u033d\u0332\3\2\2\2\u033e\65\3\2\2\2\u033f")
        buf.write("\u0340\7\65\2\2\u0340\u0341\7\3\2\2\u0341\u0342\5\b\5")
        buf.write("\2\u0342\u0343\7\23\2\2\u0343\u0344\5\b\5\2\u0344\u0345")
        buf.write("\7\23\2\2\u0345\u0346\5\b\5\2\u0346\u0347\7\4\2\2\u0347")
        buf.write("\u0355\3\2\2\2\u0348\u0349\7q\2\2\u0349\u034a\7\3\2\2")
        buf.write("\u034a\u034b\5\b\5\2\u034b\u034c\7\23\2\2\u034c\u034d")
        buf.write("\5\b\5\2\u034d\u034e\7\4\2\2\u034e\u0355\3\2\2\2\u034f")
        buf.write("\u0350\79\2\2\u0350\u0351\7\3\2\2\u0351\u0352\5\b\5\2")
        buf.write("\u0352\u0353\7\4\2\2\u0353\u0355\3\2\2\2\u0354\u033f\3")
        buf.write("\2\2\2\u0354\u0348\3\2\2\2\u0354\u034f\3\2\2\2\u0355\67")
        buf.write("\3\2\2\2\u0356\u0357\7\u00d2\2\2\u0357\u0359\7\3\2\2\u0358")
        buf.write("\u035a\5\6\4\2\u0359\u0358\3\2\2\2\u0359\u035a\3\2\2\2")
        buf.write("\u035a\u035b\3\2\2\2\u035b\u03bd\7\4\2\2\u035c\u035d\7")
        buf.write("\u00a3\2\2\u035d\u035e\7\3\2\2\u035e\u0361\5\6\4\2\u035f")
        buf.write("\u0360\7\23\2\2\u0360\u0362\t\17\2\2\u0361\u035f\3\2\2")
        buf.write("\2\u0361\u0362\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0364")
        buf.write("\7\4\2\2\u0364\u03bd\3\2\2\2\u0365\u0366\t\20\2\2\u0366")
        buf.write("\u0367\7\3\2\2\u0367\u0368\5\6\4\2\u0368\u0369\7\4\2\2")
        buf.write("\u0369\u03bd\3\2\2\2\u036a\u036b\7\u00a6\2\2\u036b\u036c")
        buf.write("\7\3\2\2\u036c\u036d\5\6\4\2\u036d\u036e\7\23\2\2\u036e")
        buf.write("\u036f\5l\67\2\u036f\u0370\7\4\2\2\u0370\u03bd\3\2\2\2")
        buf.write("\u0371\u0372\7\u00d5\2\2\u0372\u0373\7\3\2\2\u0373\u0376")
        buf.write("\7\u00f6\2\2\u0374\u0375\7\23\2\2\u0375\u0377\t\21\2\2")
        buf.write("\u0376\u0374\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u037a\3")
        buf.write("\2\2\2\u0378\u0379\7\23\2\2\u0379\u037b\5\u00caf\2\u037a")
        buf.write("\u0378\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037e\3\2\2\2")
        buf.write("\u037c\u037d\7\23\2\2\u037d\u037f\t\22\2\2\u037e\u037c")
        buf.write("\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0380\3\2\2\2\u0380")
        buf.write("\u03bd\7\4\2\2\u0381\u0382\7\37\2\2\u0382\u0383\7\3\2")
        buf.write("\2\u0383\u03bd\7\4\2\2\u0384\u0385\7 \2\2\u0385\u0386")
        buf.write("\7\3\2\2\u0386\u0387\5\6\4\2\u0387\u0388\7\23\2\2\u0388")
        buf.write("\u0389\5\6\4\2\u0389\u038a\7\4\2\2\u038a\u03bd\3\2\2\2")
        buf.write("\u038b\u038c\7!\2\2\u038c\u038d\7\3\2\2\u038d\u038e\5")
        buf.write("\6\4\2\u038e\u038f\7\23\2\2\u038f\u0390\5\6\4\2\u0390")
        buf.write("\u0391\7\23\2\2\u0391\u0392\5\6\4\2\u0392\u0393\7\4\2")
        buf.write("\2\u0393\u03bd\3\2\2\2\u0394\u0395\7\"\2\2\u0395\u0396")
        buf.write("\7\3\2\2\u0396\u0397\5\6\4\2\u0397\u0398\7\4\2\2\u0398")
        buf.write("\u03bd\3\2\2\2\u0399\u039a\7#\2\2\u039a\u039b\7\3\2\2")
        buf.write("\u039b\u039c\5\6\4\2\u039c\u039d\7\4\2\2\u039d\u03bd\3")
        buf.write("\2\2\2\u039e\u039f\7$\2\2\u039f\u03a0\7\3\2\2\u03a0\u03a1")
        buf.write("\5\6\4\2\u03a1\u03a2\7\4\2\2\u03a2\u03bd\3\2\2\2\u03a3")
        buf.write("\u03a4\7%\2\2\u03a4\u03a5\7\3\2\2\u03a5\u03a6\5\6\4\2")
        buf.write("\u03a6\u03a7\7\4\2\2\u03a7\u03bd\3\2\2\2\u03a8\u03a9\7")
        buf.write("&\2\2\u03a9\u03aa\7\3\2\2\u03aa\u03ab\5\6\4\2\u03ab\u03ac")
        buf.write("\7\4\2\2\u03ac\u03bd\3\2\2\2\u03ad\u03ae\7\'\2\2\u03ae")
        buf.write("\u03af\7\3\2\2\u03af\u03b0\5\6\4\2\u03b0\u03b1\7\4\2\2")
        buf.write("\u03b1\u03bd\3\2\2\2\u03b2\u03b3\7(\2\2\u03b3\u03b4\7")
        buf.write("\3\2\2\u03b4\u03b5\5\6\4\2\u03b5\u03b6\7\4\2\2\u03b6\u03bd")
        buf.write("\3\2\2\2\u03b7\u03b8\7)\2\2\u03b8\u03b9\7\3\2\2\u03b9")
        buf.write("\u03ba\5\6\4\2\u03ba\u03bb\7\4\2\2\u03bb\u03bd\3\2\2\2")
        buf.write("\u03bc\u0356\3\2\2\2\u03bc\u035c\3\2\2\2\u03bc\u0365\3")
        buf.write("\2\2\2\u03bc\u036a\3\2\2\2\u03bc\u0371\3\2\2\2\u03bc\u0381")
        buf.write("\3\2\2\2\u03bc\u0384\3\2\2\2\u03bc\u038b\3\2\2\2\u03bc")
        buf.write("\u0394\3\2\2\2\u03bc\u0399\3\2\2\2\u03bc\u039e\3\2\2\2")
        buf.write("\u03bc\u03a3\3\2\2\2\u03bc\u03a8\3\2\2\2\u03bc\u03ad\3")
        buf.write("\2\2\2\u03bc\u03b2\3\2\2\2\u03bc\u03b7\3\2\2\2\u03bd9")
        buf.write("\3\2\2\2\u03be\u03bf\7\u00d2\2\2\u03bf\u03c1\7\3\2\2\u03c0")
        buf.write("\u03c2\5\b\5\2\u03c1\u03c0\3\2\2\2\u03c1\u03c2\3\2\2\2")
        buf.write("\u03c2\u03c3\3\2\2\2\u03c3\u0425\7\4\2\2\u03c4\u03c5\7")
        buf.write("\u00a3\2\2\u03c5\u03c6\7\3\2\2\u03c6\u03c9\5\b\5\2\u03c7")
        buf.write("\u03c8\7\23\2\2\u03c8\u03ca\t\17\2\2\u03c9\u03c7\3\2\2")
        buf.write("\2\u03c9\u03ca\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cc")
        buf.write("\7\4\2\2\u03cc\u0425\3\2\2\2\u03cd\u03ce\t\20\2\2\u03ce")
        buf.write("\u03cf\7\3\2\2\u03cf\u03d0\5\b\5\2\u03d0\u03d1\7\4\2\2")
        buf.write("\u03d1\u0425\3\2\2\2\u03d2\u03d3\7\u00a6\2\2\u03d3\u03d4")
        buf.write("\7\3\2\2\u03d4\u03d5\5\b\5\2\u03d5\u03d6\7\23\2\2\u03d6")
        buf.write("\u03d7\5l\67\2\u03d7\u03d8\7\4\2\2\u03d8\u0425\3\2\2\2")
        buf.write("\u03d9\u03da\7\u00d5\2\2\u03da\u03db\7\3\2\2\u03db\u03de")
        buf.write("\7\u00f6\2\2\u03dc\u03dd\7\23\2\2\u03dd\u03df\t\21\2\2")
        buf.write("\u03de\u03dc\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e2\3")
        buf.write("\2\2\2\u03e0\u03e1\7\23\2\2\u03e1\u03e3\5\u00ccg\2\u03e2")
        buf.write("\u03e0\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e6\3\2\2\2")
        buf.write("\u03e4\u03e5\7\23\2\2\u03e5\u03e7\t\22\2\2\u03e6\u03e4")
        buf.write("\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8")
        buf.write("\u0425\7\4\2\2\u03e9\u03ea\7\37\2\2\u03ea\u03eb\7\3\2")
        buf.write("\2\u03eb\u0425\7\4\2\2\u03ec\u03ed\7 \2\2\u03ed\u03ee")
        buf.write("\7\3\2\2\u03ee\u03ef\5\6\4\2\u03ef\u03f0\7\23\2\2\u03f0")
        buf.write("\u03f1\5\6\4\2\u03f1\u03f2\7\4\2\2\u03f2\u0425\3\2\2\2")
        buf.write("\u03f3\u03f4\7!\2\2\u03f4\u03f5\7\3\2\2\u03f5\u03f6\5")
        buf.write("\6\4\2\u03f6\u03f7\7\23\2\2\u03f7\u03f8\5\6\4\2\u03f8")
        buf.write("\u03f9\7\23\2\2\u03f9\u03fa\5\6\4\2\u03fa\u03fb\7\4\2")
        buf.write("\2\u03fb\u0425\3\2\2\2\u03fc\u03fd\7\"\2\2\u03fd\u03fe")
        buf.write("\7\3\2\2\u03fe\u03ff\5\6\4\2\u03ff\u0400\7\4\2\2\u0400")
        buf.write("\u0425\3\2\2\2\u0401\u0402\7#\2\2\u0402\u0403\7\3\2\2")
        buf.write("\u0403\u0404\5\6\4\2\u0404\u0405\7\4\2\2\u0405\u0425\3")
        buf.write("\2\2\2\u0406\u0407\7$\2\2\u0407\u0408\7\3\2\2\u0408\u0409")
        buf.write("\5\6\4\2\u0409\u040a\7\4\2\2\u040a\u0425\3\2\2\2\u040b")
        buf.write("\u040c\7%\2\2\u040c\u040d\7\3\2\2\u040d\u040e\5\6\4\2")
        buf.write("\u040e\u040f\7\4\2\2\u040f\u0425\3\2\2\2\u0410\u0411\7")
        buf.write("&\2\2\u0411\u0412\7\3\2\2\u0412\u0413\5\6\4\2\u0413\u0414")
        buf.write("\7\4\2\2\u0414\u0425\3\2\2\2\u0415\u0416\7\'\2\2\u0416")
        buf.write("\u0417\7\3\2\2\u0417\u0418\5\6\4\2\u0418\u0419\7\4\2\2")
        buf.write("\u0419\u0425\3\2\2\2\u041a\u041b\7(\2\2\u041b\u041c\7")
        buf.write("\3\2\2\u041c\u041d\5\6\4\2\u041d\u041e\7\4\2\2\u041e\u0425")
        buf.write("\3\2\2\2\u041f\u0420\7)\2\2\u0420\u0421\7\3\2\2\u0421")
        buf.write("\u0422\5\6\4\2\u0422\u0423\7\4\2\2\u0423\u0425\3\2\2\2")
        buf.write("\u0424\u03be\3\2\2\2\u0424\u03c4\3\2\2\2\u0424\u03cd\3")
        buf.write("\2\2\2\u0424\u03d2\3\2\2\2\u0424\u03d9\3\2\2\2\u0424\u03e9")
        buf.write("\3\2\2\2\u0424\u03ec\3\2\2\2\u0424\u03f3\3\2\2\2\u0424")
        buf.write("\u03fc\3\2\2\2\u0424\u0401\3\2\2\2\u0424\u0406\3\2\2\2")
        buf.write("\u0424\u040b\3\2\2\2\u0424\u0410\3\2\2\2\u0424\u0415\3")
        buf.write("\2\2\2\u0424\u041a\3\2\2\2\u0424\u041f\3\2\2\2\u0425;")
        buf.write("\3\2\2\2\u0426\u0427\7;\2\2\u0427\u0428\7\3\2\2\u0428")
        buf.write("\u042b\5\6\4\2\u0429\u042a\7\23\2\2\u042a\u042c\5\6\4")
        buf.write("\2\u042b\u0429\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u042b")
        buf.write("\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u042f\3\2\2\2\u042f")
        buf.write("\u0430\7\4\2\2\u0430\u0444\3\2\2\2\u0431\u0432\7>\2\2")
        buf.write("\u0432\u0433\7\3\2\2\u0433\u0436\5\6\4\2\u0434\u0435\7")
        buf.write("\23\2\2\u0435\u0437\5\6\4\2\u0436\u0434\3\2\2\2\u0437")
        buf.write("\u0438\3\2\2\2\u0438\u0436\3\2\2\2\u0438\u0439\3\2\2\2")
        buf.write("\u0439\u043a\3\2\2\2\u043a\u043b\7\4\2\2\u043b\u0444\3")
        buf.write("\2\2\2\u043c\u043d\t\23\2\2\u043d\u043e\7\3\2\2\u043e")
        buf.write("\u043f\5\6\4\2\u043f\u0440\7\23\2\2\u0440\u0441\5\6\4")
        buf.write("\2\u0441\u0442\7\4\2\2\u0442\u0444\3\2\2\2\u0443\u0426")
        buf.write("\3\2\2\2\u0443\u0431\3\2\2\2\u0443\u043c\3\2\2\2\u0444")
        buf.write("=\3\2\2\2\u0445\u0446\7t\2\2\u0446\u0447\7\3\2\2\u0447")
        buf.write("\u0448\5\6\4\2\u0448\u0449\7\23\2\2\u0449\u044b\7\u00f7")
        buf.write("\2\2\u044a\u044c\5\u00b0Y\2\u044b\u044a\3\2\2\2\u044b")
        buf.write("\u044c\3\2\2\2\u044c\u044f\3\2\2\2\u044d\u044e\7\u0082")
        buf.write("\2\2\u044e\u0450\5\u00c0a\2\u044f\u044d\3\2\2\2\u044f")
        buf.write("\u0450\3\2\2\2\u0450\u0452\3\2\2\2\u0451\u0453\5\u00ae")
        buf.write("X\2\u0452\u0451\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0455")
        buf.write("\3\2\2\2\u0454\u0456\5\u00b6\\\2\u0455\u0454\3\2\2\2\u0455")
        buf.write("\u0456\3\2\2\2\u0456\u0458\3\2\2\2\u0457\u0459\5\u00b8")
        buf.write("]\2\u0458\u0457\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045a")
        buf.write("\3\2\2\2\u045a\u045b\7\4\2\2\u045b?\3\2\2\2\u045c\u045d")
        buf.write("\7\u00e0\2\2\u045d\u045e\7\3\2\2\u045e\u045f\5\6\4\2\u045f")
        buf.write("\u0460\7\23\2\2\u0460\u046a\7\u00f7\2\2\u0461\u0462\7")
        buf.write("\u00e9\2\2\u0462\u0467\5\u00c0a\2\u0463\u0464\7\23\2\2")
        buf.write("\u0464\u0466\5\u00c0a\2\u0465\u0463\3\2\2\2\u0466\u0469")
        buf.write("\3\2\2\2\u0467\u0465\3\2\2\2\u0467\u0468\3\2\2\2\u0468")
        buf.write("\u046b\3\2\2\2\u0469\u0467\3\2\2\2\u046a\u0461\3\2\2\2")
        buf.write("\u046a\u046b\3\2\2\2\u046b\u046d\3\2\2\2\u046c\u046e\5")
        buf.write("\u00acW\2\u046d\u046c\3\2\2\2\u046d\u046e\3\2\2\2\u046e")
        buf.write("\u046f\3\2\2\2\u046f\u0470\7\4\2\2\u0470\u049a\3\2\2\2")
        buf.write("\u0471\u0472\7\u00e1\2\2\u0472\u0473\7\3\2\2\u0473\u0474")
        buf.write("\5\6\4\2\u0474\u0475\7\23\2\2\u0475\u0477\7\u00f7\2\2")
        buf.write("\u0476\u0478\5\u00b0Y\2\u0477\u0476\3\2\2\2\u0477\u0478")
        buf.write("\3\2\2\2\u0478\u047b\3\2\2\2\u0479\u047a\7\u0082\2\2\u047a")
        buf.write("\u047c\5\u00c0a\2\u047b\u0479\3\2\2\2\u047b\u047c\3\2")
        buf.write("\2\2\u047c\u047e\3\2\2\2\u047d\u047f\5\u00aeX\2\u047e")
        buf.write("\u047d\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0481\3\2\2\2")
        buf.write("\u0480\u0482\5\u00b2Z\2\u0481\u0480\3\2\2\2\u0481\u0482")
        buf.write("\3\2\2\2\u0482\u0484\3\2\2\2\u0483\u0485\5\u00acW\2\u0484")
        buf.write("\u0483\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0486\3\2\2\2")
        buf.write("\u0486\u0487\7\4\2\2\u0487\u049a\3\2\2\2\u0488\u0489\7")
        buf.write("D\2\2\u0489\u048a\7\3\2\2\u048a\u048c\5\6\4\2\u048b\u048d")
        buf.write("\5\u00c4c\2\u048c\u048b\3\2\2\2\u048c\u048d\3\2\2\2\u048d")
        buf.write("\u048f\3\2\2\2\u048e\u0490\5\u00c6d\2\u048f\u048e\3\2")
        buf.write("\2\2\u048f\u0490\3\2\2\2\u0490\u0492\3\2\2\2\u0491\u0493")
        buf.write("\5\u00b4[\2\u0492\u0491\3\2\2\2\u0492\u0493\3\2\2\2\u0493")
        buf.write("\u0495\3\2\2\2\u0494\u0496\t\24\2\2\u0495\u0494\3\2\2")
        buf.write("\2\u0495\u0496\3\2\2\2\u0496\u0497\3\2\2\2\u0497\u0498")
        buf.write("\7\4\2\2\u0498\u049a\3\2\2\2\u0499\u045c\3\2\2\2\u0499")
        buf.write("\u0471\3\2\2\2\u0499\u0488\3\2\2\2\u049aA\3\2\2\2\u049b")
        buf.write("\u049c\7s\2\2\u049c\u049d\7\3\2\2\u049d\u049e\5\6\4\2")
        buf.write("\u049e\u049f\7\23\2\2\u049f\u04a0\5\6\4\2\u04a0\u04a1")
        buf.write("\7\4\2\2\u04a1C\3\2\2\2\u04a2\u04a3\7s\2\2\u04a3\u04a4")
        buf.write("\7\3\2\2\u04a4\u04a5\5\b\5\2\u04a5\u04a6\7\23\2\2\u04a6")
        buf.write("\u04a7\5\b\5\2\u04a7\u04a8\7\4\2\2\u04a8E\3\2\2\2\u04a9")
        buf.write("\u04aa\t\25\2\2\u04aa\u04ab\7\3\2\2\u04ab\u04ac\5\b\5")
        buf.write("\2\u04ac\u04ad\7\4\2\2\u04ad\u04b2\3\2\2\2\u04ae\u04af")
        buf.write("\7h\2\2\u04af\u04b0\7\3\2\2\u04b0\u04b2\7\4\2\2\u04b1")
        buf.write("\u04a9\3\2\2\2\u04b1\u04ae\3\2\2\2\u04b2G\3\2\2\2\u04b3")
        buf.write("\u04b4\t\25\2\2\u04b4\u04b5\7\3\2\2\u04b5\u04ba\5\6\4")
        buf.write("\2\u04b6\u04b8\5p9\2\u04b7\u04b9\5r:\2\u04b8\u04b7\3\2")
        buf.write("\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04bb\3\2\2\2\u04ba\u04b6")
        buf.write("\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc")
        buf.write("\u04bd\7\4\2\2\u04bdI\3\2\2\2\u04be\u04bf\t\26\2\2\u04bf")
        buf.write("\u04c0\7\3\2\2\u04c0\u04c1\5\6\4\2\u04c1\u04c2\7\u009a")
        buf.write("\2\2\u04c2\u04c4\7\3\2\2\u04c3\u04c5\5d\63\2\u04c4\u04c3")
        buf.write("\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c7\3\2\2\2\u04c6")
        buf.write("\u04c8\5f\64\2\u04c7\u04c6\3\2\2\2\u04c7\u04c8\3\2\2\2")
        buf.write("\u04c8\u04ca\3\2\2\2\u04c9\u04cb\5j\66\2\u04ca\u04c9\3")
        buf.write("\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04cd")
        buf.write("\7\4\2\2\u04cd\u04ce\7\4\2\2\u04ce\u04ee\3\2\2\2\u04cf")
        buf.write("\u04d0\t\27\2\2\u04d0\u04d1\7\3\2\2\u04d1\u04d8\5\6\4")
        buf.write("\2\u04d2\u04d3\7\23\2\2\u04d3\u04d6\5l\67\2\u04d4\u04d5")
        buf.write("\7\23\2\2\u04d5\u04d7\5X-\2\u04d6\u04d4\3\2\2\2\u04d6")
        buf.write("\u04d7\3\2\2\2\u04d7\u04d9\3\2\2\2\u04d8\u04d2\3\2\2\2")
        buf.write("\u04d8\u04d9\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04db\7")
        buf.write("\u009a\2\2\u04db\u04dd\7\3\2\2\u04dc\u04de\5d\63\2\u04dd")
        buf.write("\u04dc\3\2\2\2\u04dd\u04de\3\2\2\2\u04de\u04df\3\2\2\2")
        buf.write("\u04df\u04e0\5f\64\2\u04e0\u04e1\3\2\2\2\u04e1\u04e2\7")
        buf.write("\4\2\2\u04e2\u04e3\7\4\2\2\u04e3\u04ee\3\2\2\2\u04e4\u04e5")
        buf.write("\7\u0099\2\2\u04e5\u04e6\7\3\2\2\u04e6\u04e7\5\6\4\2\u04e7")
        buf.write("\u04e8\7\u009a\2\2\u04e8\u04e9\7\3\2\2\u04e9\u04ea\5d")
        buf.write("\63\2\u04ea\u04eb\7\4\2\2\u04eb\u04ec\7\4\2\2\u04ec\u04ee")
        buf.write("\3\2\2\2\u04ed\u04be\3\2\2\2\u04ed\u04cf\3\2\2\2\u04ed")
        buf.write("\u04e4\3\2\2\2\u04eeK\3\2\2\2\u04ef\u04f0\t\26\2\2\u04f0")
        buf.write("\u04f1\7\3\2\2\u04f1\u04f2\5\b\5\2\u04f2\u04f3\7\u009a")
        buf.write("\2\2\u04f3\u04f5\7\3\2\2\u04f4\u04f6\5d\63\2\u04f5\u04f4")
        buf.write("\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6\u04f8\3\2\2\2\u04f7")
        buf.write("\u04f9\5f\64\2\u04f8\u04f7\3\2\2\2\u04f8\u04f9\3\2\2\2")
        buf.write("\u04f9\u04fb\3\2\2\2\u04fa\u04fc\5j\66\2\u04fb\u04fa\3")
        buf.write("\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u04fe")
        buf.write("\7\4\2\2\u04fe\u04ff\7\4\2\2\u04ff\u052a\3\2\2\2\u0500")
        buf.write("\u0501\t\27\2\2\u0501\u0502\7\3\2\2\u0502\u0508\5\b\5")
        buf.write("\2\u0503\u0504\7\23\2\2\u0504\u0506\5l\67\2\u0505\u0507")
        buf.write("\5X-\2\u0506\u0505\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u0509")
        buf.write("\3\2\2\2\u0508\u0503\3\2\2\2\u0508\u0509\3\2\2\2\u0509")
        buf.write("\u050a\3\2\2\2\u050a\u050b\7\u009a\2\2\u050b\u050d\7\3")
        buf.write("\2\2\u050c\u050e\5d\63\2\u050d\u050c\3\2\2\2\u050d\u050e")
        buf.write("\3\2\2\2\u050e\u050f\3\2\2\2\u050f\u0510\5f\64\2\u0510")
        buf.write("\u0511\3\2\2\2\u0511\u0512\7\4\2\2\u0512\u0513\7\4\2\2")
        buf.write("\u0513\u052a\3\2\2\2\u0514\u0515\7O\2\2\u0515\u0516\7")
        buf.write("\3\2\2\u0516\u0517\7\u009a\2\2\u0517\u0519\7\3\2\2\u0518")
        buf.write("\u051a\5d\63\2\u0519\u0518\3\2\2\2\u0519\u051a\3\2\2\2")
        buf.write("\u051a\u051b\3\2\2\2\u051b\u051c\5f\64\2\u051c\u051d\3")
        buf.write("\2\2\2\u051d\u051e\7\4\2\2\u051e\u051f\7\4\2\2\u051f\u052a")
        buf.write("\3\2\2\2\u0520\u0521\7\u0099\2\2\u0521\u0522\7\3\2\2\u0522")
        buf.write("\u0523\5\b\5\2\u0523\u0524\7\u009a\2\2\u0524\u0525\7\3")
        buf.write("\2\2\u0525\u0526\5d\63\2\u0526\u0527\7\4\2\2\u0527\u0528")
        buf.write("\7\4\2\2\u0528\u052a\3\2\2\2\u0529\u04ef\3\2\2\2\u0529")
        buf.write("\u0500\3\2\2\2\u0529\u0514\3\2\2\2\u0529\u0520\3\2\2\2")
        buf.write("\u052aM\3\2\2\2\u052b\u052c\5\u00c0a\2\u052c\u052d\7F")
        buf.write("\2\2\u052d\u052e\5\u00c0a\2\u052eO\3\2\2\2\u052f\u0534")
        buf.write("\5R*\2\u0530\u0531\7\23\2\2\u0531\u0533\5R*\2\u0532\u0530")
        buf.write("\3\2\2\2\u0533\u0536\3\2\2\2\u0534\u0532\3\2\2\2\u0534")
        buf.write("\u0535\3\2\2\2\u0535Q\3\2\2\2\u0536\u0534\3\2\2\2\u0537")
        buf.write("\u0539\5\u00ceh\2\u0538\u0537\3\2\2\2\u0538\u0539\3\2")
        buf.write("\2\2\u0539\u053a\3\2\2\2\u053a\u053b\5\u00c0a\2\u053b")
        buf.write("\u053c\7\26\2\2\u053c\u053d\5F$\2\u053dS\3\2\2\2\u053e")
        buf.write("\u0540\5\u00ceh\2\u053f\u053e\3\2\2\2\u053f\u0540\3\2")
        buf.write("\2\2\u0540\u0541\3\2\2\2\u0541\u0542\5\u00c0a\2\u0542")
        buf.write("\u0543\7\26\2\2\u0543\u0544\5\b\5\2\u0544U\3\2\2\2\u0545")
        buf.write("\u0546\5\u00c0a\2\u0546\u0547\7\t\2\2\u0547\u0548\5X-")
        buf.write("\2\u0548W\3\2\2\2\u0549\u0556\5\u00d8m\2\u054a\u054b\7")
        buf.write("\u00dc\2\2\u054b\u054c\7\3\2\2\u054c\u054d\5\u00d8m\2")
        buf.write("\u054d\u054e\7\23\2\2\u054e\u0551\5\u00dan\2\u054f\u0550")
        buf.write("\7\23\2\2\u0550\u0552\7\u00f6\2\2\u0551\u054f\3\2\2\2")
        buf.write("\u0551\u0552\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0554\7")
        buf.write("\4\2\2\u0554\u0556\3\2\2\2\u0555\u0549\3\2\2\2\u0555\u054a")
        buf.write("\3\2\2\2\u0556Y\3\2\2\2\u0557\u055c\5^\60\2\u0558\u0559")
        buf.write("\7\23\2\2\u0559\u055b\5^\60\2\u055a\u0558\3\2\2\2\u055b")
        buf.write("\u055e\3\2\2\2\u055c\u055a\3\2\2\2\u055c\u055d\3\2\2\2")
        buf.write("\u055d[\3\2\2\2\u055e\u055c\3\2\2\2\u055f\u0564\5^\60")
        buf.write("\2\u0560\u0561\7\23\2\2\u0561\u0563\5^\60\2\u0562\u0560")
        buf.write("\3\2\2\2\u0563\u0566\3\2\2\2\u0564\u0562\3\2\2\2\u0564")
        buf.write("\u0565\3\2\2\2\u0565\u0570\3\2\2\2\u0566\u0564\3\2\2\2")
        buf.write("\u0567\u0568\7\35\2\2\u0568\u056d\5\u00c0a\2\u0569\u056a")
        buf.write("\7\23\2\2\u056a\u056c\5\u00c0a\2\u056b\u0569\3\2\2\2\u056c")
        buf.write("\u056f\3\2\2\2\u056d\u056b\3\2\2\2\u056d\u056e\3\2\2\2")
        buf.write("\u056e\u0571\3\2\2\2\u056f\u056d\3\2\2\2\u0570\u0567\3")
        buf.write("\2\2\2\u0570\u0571\3\2\2\2\u0571]\3\2\2\2\u0572\u0575")
        buf.write("\5\6\4\2\u0573\u0574\7\60\2\2\u0574\u0576\5\u00ba^\2\u0575")
        buf.write("\u0573\3\2\2\2\u0575\u0576\3\2\2\2\u0576_\3\2\2\2\u0577")
        buf.write("\u0579\5\24\13\2\u0578\u0577\3\2\2\2\u0578\u0579\3\2\2")
        buf.write("\2\u0579\u057d\3\2\2\2\u057a\u057e\5\26\f\2\u057b\u057e")
        buf.write("\5b\62\2\u057c\u057e\5\22\n\2\u057d\u057a\3\2\2\2\u057d")
        buf.write("\u057b\3\2\2\2\u057d\u057c\3\2\2\2\u057d\u057e\3\2\2\2")
        buf.write("\u057e\u0580\3\2\2\2\u057f\u0581\5\30\r\2\u0580\u057f")
        buf.write("\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0583\3\2\2\2\u0582")
        buf.write("\u0584\5\20\t\2\u0583\u0582\3\2\2\2\u0583\u0584\3\2\2")
        buf.write("\2\u0584a\3\2\2\2\u0585\u0586\7\u00d0\2\2\u0586\u0587")
        buf.write("\5\6\4\2\u0587c\3\2\2\2\u0588\u0589\7\u009e\2\2\u0589")
        buf.write("\u058a\7N\2\2\u058a\u058f\5\u00c0a\2\u058b\u058c\7\23")
        buf.write("\2\2\u058c\u058e\5\u00c0a\2\u058d\u058b\3\2\2\2\u058e")
        buf.write("\u0591\3\2\2\2\u058f\u058d\3\2\2\2\u058f\u0590\3\2\2\2")
        buf.write("\u0590e\3\2\2\2\u0591\u058f\3\2\2\2\u0592\u0593\7M\2\2")
        buf.write("\u0593\u0594\7N\2\2\u0594\u0599\5h\65\2\u0595\u0596\7")
        buf.write("\23\2\2\u0596\u0598\5h\65\2\u0597\u0595\3\2\2\2\u0598")
        buf.write("\u059b\3\2\2\2\u0599\u0597\3\2\2\2\u0599\u059a\3\2\2\2")
        buf.write("\u059ag\3\2\2\2\u059b\u0599\3\2\2\2\u059c\u059e\5\u00c0")
        buf.write("a\2\u059d\u059f\t\30\2\2\u059e\u059d\3\2\2\2\u059e\u059f")
        buf.write("\3\2\2\2\u059fi\3\2\2\2\u05a0\u05a1\7y\2\2\u05a1\u05a4")
        buf.write("\7\u00be\2\2\u05a2\u05a4\7\u00a0\2\2\u05a3\u05a0\3\2\2")
        buf.write("\2\u05a3\u05a2\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5\u05a6")
        buf.write("\7\65\2\2\u05a6\u05a7\5n8\2\u05a7\u05a8\7\61\2\2\u05a8")
        buf.write("\u05a9\5n8\2\u05a9k\3\2\2\2\u05aa\u05ab\7\u00f3\2\2\u05ab")
        buf.write("m\3\2\2\2\u05ac\u05ad\7\u00f3\2\2\u05ad\u05b8\7\u009b")
        buf.write("\2\2\u05ae\u05af\7\u00f3\2\2\u05af\u05b8\7\u009c\2\2\u05b0")
        buf.write("\u05b1\7\u00a1\2\2\u05b1\u05b2\7y\2\2\u05b2\u05b8\7\u00bf")
        buf.write("\2\2\u05b3\u05b4\7\u009d\2\2\u05b4\u05b8\7\u009b\2\2\u05b5")
        buf.write("\u05b6\7\u009d\2\2\u05b6\u05b8\7\u009c\2\2\u05b7\u05ac")
        buf.write("\3\2\2\2\u05b7\u05ae\3\2\2\2\u05b7\u05b0\3\2\2\2\u05b7")
        buf.write("\u05b3\3\2\2\2\u05b7\u05b5\3\2\2\2\u05b8o\3\2\2\2\u05b9")
        buf.write("\u05ba\7\u0092\2\2\u05ba\u05bb\t\31\2\2\u05bb\u05c0\5")
        buf.write("\u00c0a\2\u05bc\u05bd\7\23\2\2\u05bd\u05bf\5\u00c0a\2")
        buf.write("\u05be\u05bc\3\2\2\2\u05bf\u05c2\3\2\2\2\u05c0\u05be\3")
        buf.write("\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c7\3\2\2\2\u05c2\u05c0")
        buf.write("\3\2\2\2\u05c3\u05c4\7\u0092\2\2\u05c4\u05c5\7J\2\2\u05c5")
        buf.write("\u05c7\5\b\5\2\u05c6\u05b9\3\2\2\2\u05c6\u05c3\3\2\2\2")
        buf.write("\u05c7q\3\2\2\2\u05c8\u05c9\7\u0094\2\2\u05c9\u05ca\5")
        buf.write("\b\5\2\u05cas\3\2\2\2\u05cb\u05cc\5\u00bc_\2\u05cc\u05cf")
        buf.write("\5z>\2\u05cd\u05ce\7\u00df\2\2\u05ce\u05d0\5X-\2\u05cf")
        buf.write("\u05cd\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0u\3\2\2\2\u05d1")
        buf.write("\u05d5\5~@\2\u05d2\u05d5\5\u0082B\2\u05d3\u05d5\5\u0080")
        buf.write("A\2\u05d4\u05d1\3\2\2\2\u05d4\u05d2\3\2\2\2\u05d4\u05d3")
        buf.write("\3\2\2\2\u05d5w\3\2\2\2\u05d6\u05d9\5\u0080A\2\u05d7\u05d9")
        buf.write("\5~@\2\u05d8\u05d6\3\2\2\2\u05d8\u05d7\3\2\2\2\u05d9y")
        buf.write("\3\2\2\2\u05da\u05e0\5~@\2\u05db\u05e0\5\u0082B\2\u05dc")
        buf.write("\u05e0\5\u0086D\2\u05dd\u05e0\5|?\2\u05de\u05e0\5\u0080")
        buf.write("A\2\u05df\u05da\3\2\2\2\u05df\u05db\3\2\2\2\u05df\u05dc")
        buf.write("\3\2\2\2\u05df\u05dd\3\2\2\2\u05df\u05de\3\2\2\2\u05e0")
        buf.write("{\3\2\2\2\u05e1\u05e5\7\u0081\2\2\u05e2\u05e5\5\u0088")
        buf.write("E\2\u05e3\u05e5\5\u008aF\2\u05e4\u05e1\3\2\2\2\u05e4\u05e2")
        buf.write("\3\2\2\2\u05e4\u05e3\3\2\2\2\u05e5}\3\2\2\2\u05e6\u05e9")
        buf.write("\5\u00dan\2\u05e7\u05e9\5\u008cG\2\u05e8\u05e6\3\2\2\2")
        buf.write("\u05e8\u05e7\3\2\2\2\u05e9\u05eb\3\2\2\2\u05ea\u05ec\5")
        buf.write("\u00a6T\2\u05eb\u05ea\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec")
        buf.write("\u05f1\3\2\2\2\u05ed\u05ef\7\64\2\2\u05ee\u05ed\3\2\2")
        buf.write("\2\u05ee\u05ef\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f2")
        buf.write("\78\2\2\u05f1\u05ee\3\2\2\2\u05f1\u05f2\3\2\2\2\u05f2")
        buf.write("\177\3\2\2\2\u05f3\u05f8\5\u00ceh\2\u05f4\u05f5\7\n\2")
        buf.write("\2\u05f5\u05f6\5~@\2\u05f6\u05f7\7\13\2\2\u05f7\u05f9")
        buf.write("\3\2\2\2\u05f8\u05f4\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9")
        buf.write("\u0081\3\2\2\2\u05fa\u0606\7{\2\2\u05fb\u05fc\7\7\2\2")
        buf.write("\u05fc\u0601\5\u00a8U\2\u05fd\u05fe\7\23\2\2\u05fe\u0600")
        buf.write("\5\u00a8U\2\u05ff\u05fd\3\2\2\2\u0600\u0603\3\2\2\2\u0601")
        buf.write("\u05ff\3\2\2\2\u0601\u0602\3\2\2\2\u0602\u0604\3\2\2\2")
        buf.write("\u0603\u0601\3\2\2\2\u0604\u0605\7\b\2\2\u0605\u0607\3")
        buf.write("\2\2\2\u0606\u05fb\3\2\2\2\u0606\u0607\3\2\2\2\u0607\u0083")
        buf.write("\3\2\2\2\u0608\u060b\5\u0082B\2\u0609\u060b\5~@\2\u060a")
        buf.write("\u0608\3\2\2\2\u060a\u0609\3\2\2\2\u060b\u0085\3\2\2\2")
        buf.write("\u060c\u0611\7\u00f1\2\2\u060d\u060e\7\n\2\2\u060e\u060f")
        buf.write("\5~@\2\u060f\u0610\7\13\2\2\u0610\u0612\3\2\2\2\u0611")
        buf.write("\u060d\3\2\2\2\u0611\u0612\3\2\2\2\u0612\u0087\3\2\2\2")
        buf.write("\u0613\u0631\7\177\2\2\u0614\u0620\7\u00ed\2\2\u0615\u0616")
        buf.write("\7\7\2\2\u0616\u061b\5\u008cG\2\u0617\u0618\7\21\2\2\u0618")
        buf.write("\u061a\5\u008cG\2\u0619\u0617\3\2\2\2\u061a\u061d\3\2")
        buf.write("\2\2\u061b\u0619\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u061e")
        buf.write("\3\2\2\2\u061d\u061b\3\2\2\2\u061e\u061f\7\b\2\2\u061f")
        buf.write("\u0621\3\2\2\2\u0620\u0615\3\2\2\2\u0620\u0621\3\2\2\2")
        buf.write("\u0621\u0631\3\2\2\2\u0622\u062e\7\u00ee\2\2\u0623\u0624")
        buf.write("\7\7\2\2\u0624\u0629\5\u00bc_\2\u0625\u0626\7\21\2\2\u0626")
        buf.write("\u0628\5\u00bc_\2\u0627\u0625\3\2\2\2\u0628\u062b\3\2")
        buf.write("\2\2\u0629\u0627\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u062c")
        buf.write("\3\2\2\2\u062b\u0629\3\2\2\2\u062c\u062d\7\b\2\2\u062d")
        buf.write("\u062f\3\2\2\2\u062e\u0623\3\2\2\2\u062e\u062f\3\2\2\2")
        buf.write("\u062f\u0631\3\2\2\2\u0630\u0613\3\2\2\2\u0630\u0614\3")
        buf.write("\2\2\2\u0630\u0622\3\2\2\2\u0631\u0089\3\2\2\2\u0632\u065b")
        buf.write("\7\u0080\2\2\u0633\u0644\7\u00ef\2\2\u0634\u0635\7\7\2")
        buf.write("\2\u0635\u0641\7\u00f7\2\2\u0636\u0637\7\3\2\2\u0637\u063c")
        buf.write("\5\u008cG\2\u0638\u0639\7\21\2\2\u0639\u063b\5\u008cG")
        buf.write("\2\u063a\u0638\3\2\2\2\u063b\u063e\3\2\2\2\u063c\u063a")
        buf.write("\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063f\3\2\2\2\u063e")
        buf.write("\u063c\3\2\2\2\u063f\u0640\7\4\2\2\u0640\u0642\3\2\2\2")
        buf.write("\u0641\u0636\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0643\3")
        buf.write("\2\2\2\u0643\u0645\7\b\2\2\u0644\u0634\3\2\2\2\u0644\u0645")
        buf.write("\3\2\2\2\u0645\u065b\3\2\2\2\u0646\u0658\7\u00f0\2\2\u0647")
        buf.write("\u0648\7\7\2\2\u0648\u0654\5\u00bc_\2\u0649\u064a\7\3")
        buf.write("\2\2\u064a\u064f\5\u00bc_\2\u064b\u064c\7\21\2\2\u064c")
        buf.write("\u064e\5\u00bc_\2\u064d\u064b\3\2\2\2\u064e\u0651\3\2")
        buf.write("\2\2\u064f\u064d\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u0652")
        buf.write("\3\2\2\2\u0651\u064f\3\2\2\2\u0652\u0653\7\4\2\2\u0653")
        buf.write("\u0655\3\2\2\2\u0654\u0649\3\2\2\2\u0654\u0655\3\2\2\2")
        buf.write("\u0655\u0656\3\2\2\2\u0656\u0657\7\b\2\2\u0657\u0659\3")
        buf.write("\2\2\2\u0658\u0647\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u065b")
        buf.write("\3\2\2\2\u065a\u0632\3\2\2\2\u065a\u0633\3\2\2\2\u065a")
        buf.write("\u0646\3\2\2\2\u065b\u008b\3\2\2\2\u065c\u065d\7\u00f7")
        buf.write("\2\2\u065d\u008d\3\2\2\2\u065e\u065f\7\u00f7\2\2\u065f")
        buf.write("\u008f\3\2\2\2\u0660\u0661\t\32\2\2\u0661\u0666\5\u0092")
        buf.write("J\2\u0662\u0663\7\23\2\2\u0663\u0665\5\u0092J\2\u0664")
        buf.write("\u0662\3\2\2\2\u0665\u0668\3\2\2\2\u0666\u0664\3\2\2\2")
        buf.write("\u0666\u0667\3\2\2\2\u0667\u0091\3\2\2\2\u0668\u0666\3")
        buf.write("\2\2\2\u0669\u066c\5\u00bc_\2\u066a\u066b\7\60\2\2\u066b")
        buf.write("\u066d\5\u00ba^\2\u066c\u066a\3\2\2\2\u066c\u066d\3\2")
        buf.write("\2\2\u066d\u0093\3\2\2\2\u066e\u0673\5\u0096L\2\u066f")
        buf.write("\u0670\7\u00f9\2\2\u0670\u0672\5\u0096L\2\u0671\u066f")
        buf.write("\3\2\2\2\u0672\u0675\3\2\2\2\u0673\u0671\3\2\2\2\u0673")
        buf.write("\u0674\3\2\2\2\u0674\u0095\3\2\2\2\u0675\u0673\3\2\2\2")
        buf.write("\u0676\u0677\7\u00f7\2\2\u0677\u0679\7\25\2\2\u0678\u0676")
        buf.write("\3\2\2\2\u0678\u0679\3\2\2\2\u0679\u067e\3\2\2\2\u067a")
        buf.write("\u067b\7\u00bb\2\2\u067b\u067c\5\b\5\2\u067c\u067d\7\33")
        buf.write("\2\2\u067d\u067f\3\2\2\2\u067e\u067a\3\2\2\2\u067e\u067f")
        buf.write("\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0682\5\b\5\2\u0681")
        buf.write("\u0683\5\u00c4c\2\u0682\u0681\3\2\2\2\u0682\u0683\3\2")
        buf.write("\2\2\u0683\u0685\3\2\2\2\u0684\u0686\5\u00c6d\2\u0685")
        buf.write("\u0684\3\2\2\2\u0685\u0686\3\2\2\2\u0686\u0097\3\2\2\2")
        buf.write("\u0687\u068c\5\u009aN\2\u0688\u0689\7\u00f9\2\2\u0689")
        buf.write("\u068b\5\u009aN\2\u068a\u0688\3\2\2\2\u068b\u068e\3\2")
        buf.write("\2\2\u068c\u068a\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u0099")
        buf.write("\3\2\2\2\u068e\u068c\3\2\2\2\u068f\u0690\7\u00f7\2\2\u0690")
        buf.write("\u0692\7\25\2\2\u0691\u068f\3\2\2\2\u0691\u0692\3\2\2")
        buf.write("\2\u0692\u0693\3\2\2\2\u0693\u0695\5\u00a0Q\2\u0694\u0696")
        buf.write("\5\u00c4c\2\u0695\u0694\3\2\2\2\u0695\u0696\3\2\2\2\u0696")
        buf.write("\u0698\3\2\2\2\u0697\u0699\5\u00c6d\2\u0698\u0697\3\2")
        buf.write("\2\2\u0698\u0699\3\2\2\2\u0699\u009b\3\2\2\2\u069a\u069d")
        buf.write("\t\32\2\2\u069b\u069c\7\u00a9\2\2\u069c\u069e\5\u009e")
        buf.write("P\2\u069d\u069b\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u069f")
        buf.write("\3\2\2\2\u069f\u06a0\7\u0082\2\2\u06a0\u06a1\7\u00f7\2")
        buf.write("\2\u06a1\u009d\3\2\2\2\u06a2\u06a7\5\u0092J\2\u06a3\u06a4")
        buf.write("\7\23\2\2\u06a4\u06a6\5\u0092J\2\u06a5\u06a3\3\2\2\2\u06a6")
        buf.write("\u06a9\3\2\2\2\u06a7\u06a5\3\2\2\2\u06a7\u06a8\3\2\2\2")
        buf.write("\u06a8\u009f\3\2\2\2\u06a9\u06a7\3\2\2\2\u06aa\u06ab\7")
        buf.write("\u00bb\2\2\u06ab\u06ac\5\b\5\2\u06ac\u06ad\7\33\2\2\u06ad")
        buf.write("\u06af\3\2\2\2\u06ae\u06aa\3\2\2\2\u06ae\u06af\3\2\2\2")
        buf.write("\u06af\u06b0\3\2\2\2\u06b0\u06b2\5\u00a4S\2\u06b1\u06b3")
        buf.write("\5\u00c8e\2\u06b2\u06b1\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3")
        buf.write("\u06b4\3\2\2\2\u06b4\u06b8\5\u00a2R\2\u06b5\u06b7\5\u00a2")
        buf.write("R\2\u06b6\u06b5\3\2\2\2\u06b7\u06ba\3\2\2\2\u06b8\u06b6")
        buf.write("\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u00a1\3\2\2\2\u06ba")
        buf.write("\u06b8\3\2\2\2\u06bb\u06bd\t\33\2\2\u06bc\u06bb\3\2\2")
        buf.write("\2\u06bc\u06bd\3\2\2\2\u06bd\u06be\3\2\2\2\u06be\u06c3")
        buf.write("\5\u00a4S\2\u06bf\u06c0\7\5\2\2\u06c0\u06c1\5\b\5\2\u06c1")
        buf.write("\u06c2\7\6\2\2\u06c2\u06c4\3\2\2\2\u06c3\u06bf\3\2\2\2")
        buf.write("\u06c3\u06c4\3\2\2\2\u06c4\u00a3\3\2\2\2\u06c5\u06c6\t")
        buf.write("\34\2\2\u06c6\u00a5\3\2\2\2\u06c7\u06c8\7\5\2\2\u06c8")
        buf.write("\u06c9\5\b\5\2\u06c9\u06ca\7\6\2\2\u06ca\u06d7\3\2\2\2")
        buf.write("\u06cb\u06cc\7\7\2\2\u06cc\u06d1\5X-\2\u06cd\u06ce\7\23")
        buf.write("\2\2\u06ce\u06d0\5X-\2\u06cf\u06cd\3\2\2\2\u06d0\u06d3")
        buf.write("\3\2\2\2\u06d1\u06cf\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2")
        buf.write("\u06d4\3\2\2\2\u06d3\u06d1\3\2\2\2\u06d4\u06d5\7\b\2\2")
        buf.write("\u06d5\u06d7\3\2\2\2\u06d6\u06c7\3\2\2\2\u06d6\u06cb\3")
        buf.write("\2\2\2\u06d7\u00a7\3\2\2\2\u06d8\u06db\5\u0080A\2\u06d9")
        buf.write("\u06dc\5\u00c0a\2\u06da\u06dc\5\u00aaV\2\u06db\u06d9\3")
        buf.write("\2\2\2\u06db\u06da\3\2\2\2\u06dc\u00a9\3\2\2\2\u06dd\u06df")
        buf.write("\7u\2\2\u06de\u06e0\t\35\2\2\u06df\u06de\3\2\2\2\u06df")
        buf.write("\u06e0\3\2\2\2\u06e0\u00ab\3\2\2\2\u06e1\u06e2\t\36\2")
        buf.write("\2\u06e2\u00ad\3\2\2\2\u06e3\u06e4\t\37\2\2\u06e4\u00af")
        buf.write("\3\2\2\2\u06e5\u06e6\7\u00a9\2\2\u06e6\u06eb\5\u00c0a")
        buf.write("\2\u06e7\u06e8\7\23\2\2\u06e8\u06ea\5\u00c0a\2\u06e9\u06e7")
        buf.write("\3\2\2\2\u06ea\u06ed\3\2\2\2\u06eb\u06e9\3\2\2\2\u06eb")
        buf.write("\u06ec\3\2\2\2\u06ec\u00b1\3\2\2\2\u06ed\u06eb\3\2\2\2")
        buf.write("\u06ee\u06ef\t \2\2\u06ef\u00b3\3\2\2\2\u06f0\u06f1\7")
        buf.write("H\2\2\u06f1\u06f2\5\6\4\2\u06f2\u00b5\3\2\2\2\u06f3\u06f4")
        buf.write("\t!\2\2\u06f4\u00b7\3\2\2\2\u06f5\u06f6\t\"\2\2\u06f6")
        buf.write("\u00b9\3\2\2\2\u06f7\u06f8\7\u00f7\2\2\u06f8\u00bb\3\2")
        buf.write("\2\2\u06f9\u06fa\7\u00f7\2\2\u06fa\u00bd\3\2\2\2\u06fb")
        buf.write("\u06fc\7\u00f7\2\2\u06fc\u00bf\3\2\2\2\u06fd\u0700\7\u00f7")
        buf.write("\2\2\u06fe\u06ff\7\27\2\2\u06ff\u0701\7\u00f7\2\2\u0700")
        buf.write("\u06fe\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u00c1\3\2\2\2")
        buf.write("\u0702\u0703\7\7\2\2\u0703\u0708\5X-\2\u0704\u0705\7\23")
        buf.write("\2\2\u0705\u0707\5X-\2\u0706\u0704\3\2\2\2\u0707\u070a")
        buf.write("\3\2\2\2\u0708\u0706\3\2\2\2\u0708\u0709\3\2\2\2\u0709")
        buf.write("\u070b\3\2\2\2\u070a\u0708\3\2\2\2\u070b\u070c\7\b\2\2")
        buf.write("\u070c\u00c3\3\2\2\2\u070d\u070e\7I\2\2\u070e\u070f\5")
        buf.write("\u00d8m\2\u070f\u00c5\3\2\2\2\u0710\u0711\7L\2\2\u0711")
        buf.write("\u0712\5\u00d8m\2\u0712\u00c7\3\2\2\2\u0713\u0714\t#\2")
        buf.write("\2\u0714\u00c9\3\2\2\2\u0715\u0718\5\6\4\2\u0716\u0718")
        buf.write("\7u\2\2\u0717\u0715\3\2\2\2\u0717\u0716\3\2\2\2\u0718")
        buf.write("\u00cb\3\2\2\2\u0719\u071c\5\b\5\2\u071a\u071c\7u\2\2")
        buf.write("\u071b\u0719\3\2\2\2\u071b\u071a\3\2\2\2\u071c\u00cd\3")
        buf.write("\2\2\2\u071d\u0723\7j\2\2\u071e\u0723\7\u00ec\2\2\u071f")
        buf.write("\u0723\7i\2\2\u0720\u0723\7k\2\2\u0721\u0723\5\u00d0i")
        buf.write("\2\u0722\u071d\3\2\2\2\u0722\u071e\3\2\2\2\u0722\u071f")
        buf.write("\3\2\2\2\u0722\u0720\3\2\2\2\u0722\u0721\3\2\2\2\u0723")
        buf.write("\u00cf\3\2\2\2\u0724\u0725\7p\2\2\u0725\u0726\7k\2\2\u0726")
        buf.write("\u00d1\3\2\2\2\u0727\u0728\7\u00f7\2\2\u0728\u00d3\3\2")
        buf.write("\2\2\u0729\u072a\7\u00f7\2\2\u072a\u00d5\3\2\2\2\u072b")
        buf.write("\u072c\7\u00f7\2\2\u072c\u00d7\3\2\2\2\u072d\u072e\t$")
        buf.write("\2\2\u072e\u00d9\3\2\2\2\u072f\u0730\t%\2\2\u0730\u00db")
        buf.write("\3\2\2\2\u0731\u0732\t&\2\2\u0732\u00dd\3\2\2\2\u00c3")
        buf.write("\u00e3\u00f1\u010e\u0116\u0134\u0136\u0138\u014c\u0162")
        buf.write("\u0164\u0166\u0171\u017f\u0188\u0190\u0197\u0199\u01a4")
        buf.write("\u01ad\u01bf\u01c8\u01d7\u01e2\u01e5\u01ea\u020b\u0214")
        buf.write("\u0217\u0221\u0226\u022a\u0230\u0234\u023e\u0242\u0246")
        buf.write("\u024f\u0252\u025c\u0260\u026a\u026f\u0273\u0279\u027d")
        buf.write("\u0281\u0285\u0289\u0299\u029d\u02a8\u02b3\u02b7\u02bb")
        buf.write("\u02cb\u02cf\u02da\u02e5\u02e9\u02ed\u02f9\u0304\u0310")
        buf.write("\u031b\u0339\u033d\u0354\u0359\u0361\u0376\u037a\u037e")
        buf.write("\u03bc\u03c1\u03c9\u03de\u03e2\u03e6\u0424\u042d\u0438")
        buf.write("\u0443\u044b\u044f\u0452\u0455\u0458\u0467\u046a\u046d")
        buf.write("\u0477\u047b\u047e\u0481\u0484\u048c\u048f\u0492\u0495")
        buf.write("\u0499\u04b1\u04b8\u04ba\u04c4\u04c7\u04ca\u04d6\u04d8")
        buf.write("\u04dd\u04ed\u04f5\u04f8\u04fb\u0506\u0508\u050d\u0519")
        buf.write("\u0529\u0534\u0538\u053f\u0551\u0555\u055c\u0564\u056d")
        buf.write("\u0570\u0575\u0578\u057d\u0580\u0583\u058f\u0599\u059e")
        buf.write("\u05a3\u05b7\u05c0\u05c6\u05cf\u05d4\u05d8\u05df\u05e4")
        buf.write("\u05e8\u05eb\u05ee\u05f1\u05f8\u0601\u0606\u060a\u0611")
        buf.write("\u061b\u0620\u0629\u062e\u0630\u063c\u0641\u0644\u064f")
        buf.write("\u0654\u0658\u065a\u0666\u066c\u0673\u0678\u067e\u0682")
        buf.write("\u0685\u068c\u0691\u0695\u0698\u069d\u06a7\u06ae\u06b2")
        buf.write("\u06b8\u06bc\u06c3\u06d1\u06d6\u06db\u06df\u06eb\u0700")
        buf.write("\u0708\u0717\u071b\u0722")
        return buf.getvalue()


class Parser ( Parser ):

    grammarFileName = "Vtl.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "'='", "'<'", "'>'", "'>='", "'<>'", "'<='", "'+'", 
                     "'-'", "'*'", "'/'", "','", "'->'", "':'", "':='", 
                     "'#'", "'eval'", "'if'", "'case'", "'then'", "'else'", 
                     "'using'", "'with'", "'current_date'", "'datediff'", 
                     "'dateadd'", "'year'", "'month'", "'dayofmonth'", "'dayofyear'", 
                     "'daytoyear'", "'daytomonth'", "'yeartoday'", "'monthtoday'", 
                     "'on'", "'drop'", "'keep'", "'calc'", "'attrcalc'", 
                     "'rename'", "'as'", "'and'", "'or'", "'xor'", "'not'", 
                     "'between'", "'in'", "'not_in'", "'null'", "'isnull'", 
                     "'ex'", "'union'", "'diff'", "'symdiff'", "'intersect'", 
                     "'random'", "'keys'", "'intyear'", "'intmonth'", "'intday'", 
                     "'check'", "'exists_in'", "'to'", "'return'", "'imbalance'", 
                     "'errorcode'", "'all'", "'aggr'", "'errorlevel'", "'order'", 
                     "'by'", "'rank'", "'asc'", "'desc'", "'min'", "'max'", 
                     "'first'", "'last'", "'indexof'", "'abs'", "'key'", 
                     "'ln'", "'log'", "'trunc'", "'round'", "'power'", "'mod'", 
                     "'length'", "'||'", "'trim'", "'upper'", "'lower'", 
                     "'substr'", "'sum'", "'avg'", "'median'", "'count'", 
                     "'identifier'", "'measure'", "'attribute'", "'filter'", 
                     "'merge'", "'exp'", "'componentRole'", "'viral'", "'match_characters'", 
                     "'type'", "'nvl'", "'hierarchy'", "'_'", "'invalid'", 
                     "'valuedomain'", "'variable'", "'data'", "'structure'", 
                     "'dataset'", "'operator'", "'define'", "'<-'", "'datapoint'", 
                     "'hierarchical'", "'ruleset'", "'rule'", "'end'", "'alterDataset'", 
                     "'ltrim'", "'rtrim'", "'instr'", "'replace'", "'ceil'", 
                     "'floor'", "'sqrt'", "'any'", "'setdiff'", "'stddev_pop'", 
                     "'stddev_samp'", "'var_pop'", "'var_samp'", "'group'", 
                     "'except'", "'having'", "'first_value'", "'last_value'", 
                     "'lag'", "'lead'", "'ratio_to_report'", "'over'", "'preceding'", 
                     "'following'", "'unbounded'", "'partition'", "'rows'", 
                     "'range'", "'current'", "'valid'", "'fill_time_series'", 
                     "'flow_to_stock'", "'stock_to_flow'", "'timeshift'", 
                     "'measures'", "'no_measures'", "'condition'", "'boolean'", 
                     "'date'", "'time_period'", "'number'", "'string'", 
                     "'time'", "'integer'", "'float'", "'list'", "'record'", 
                     "'restrict'", "'yyyy'", "'mm'", "'dd'", "'maxLength'", 
                     "'regexp'", "'is'", "'when'", "'from'", "'aggregates'", 
                     "'points'", "'point'", "'total'", "'partial'", "'always'", 
                     "'inner_join'", "'left_join'", "'cross_join'", "'full_join'", 
                     "'maps_from'", "'maps_to'", "'map_to'", "'map_from'", 
                     "'returns'", "'pivot'", "'customPivot'", "'unpivot'", 
                     "'sub'", "'apply'", "'conditioned'", "'period_indicator'", 
                     "'single'", "'duration'", "'time_agg'", "'unit'", "'Value'", 
                     "'valuedomains'", "'variables'", "'input'", "'output'", 
                     "'cast'", "'rule_priority'", "'dataset_priority'", 
                     "'default'", "'check_datapoint'", "'check_hierarchy'", 
                     "'computed'", "'non_null'", "'non_zero'", "'partial_null'", 
                     "'partial_zero'", "'always_null'", "'always_zero'", 
                     "'components'", "'all_measures'", "'scalar'", "'component'", 
                     "'datapoint_on_valuedomains'", "'datapoint_on_variables'", 
                     "'hierarchical_on_valuedomains'", "'hierarchical_on_variables'", 
                     "'set'", "'language'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "';'" ]

    symbolicNames = [ "<INVALID>", "LPAREN", "RPAREN", "QLPAREN", "QRPAREN", 
                      "GLPAREN", "GRPAREN", "EQ", "LT", "MT", "ME", "NEQ", 
                      "LE", "PLUS", "MINUS", "MUL", "DIV", "COMMA", "POINTER", 
                      "COLON", "ASSIGN", "MEMBERSHIP", "EVAL", "IF", "CASE", 
                      "THEN", "ELSE", "USING", "WITH", "CURRENT_DATE", "DATEDIFF", 
                      "DATEADD", "YEAR_OP", "MONTH_OP", "DAYOFMONTH", "DAYOFYEAR", 
                      "DAYTOYEAR", "DAYTOMONTH", "YEARTODAY", "MONTHTODAY", 
                      "ON", "DROP", "KEEP", "CALC", "ATTRCALC", "RENAME", 
                      "AS", "AND", "OR", "XOR", "NOT", "BETWEEN", "IN", 
                      "NOT_IN", "NULL_CONSTANT", "ISNULL", "EX", "UNION", 
                      "DIFF", "SYMDIFF", "INTERSECT", "RANDOM", "KEYS", 
                      "INTYEAR", "INTMONTH", "INTDAY", "CHECK", "EXISTS_IN", 
                      "TO", "RETURN", "IMBALANCE", "ERRORCODE", "ALL", "AGGREGATE", 
                      "ERRORLEVEL", "ORDER", "BY", "RANK", "ASC", "DESC", 
                      "MIN", "MAX", "FIRST", "LAST", "INDEXOF", "ABS", "KEY", 
                      "LN", "LOG", "TRUNC", "ROUND", "POWER", "MOD", "LEN", 
                      "CONCAT", "TRIM", "UCASE", "LCASE", "SUBSTR", "SUM", 
                      "AVG", "MEDIAN", "COUNT", "DIMENSION", "MEASURE", 
                      "ATTRIBUTE", "FILTER", "MERGE", "EXP", "ROLE", "VIRAL", 
                      "CHARSET_MATCH", "TYPE", "NVL", "HIERARCHY", "OPTIONAL", 
                      "INVALID", "VALUE_DOMAIN", "VARIABLE", "DATA", "STRUCTURE", 
                      "DATASET", "OPERATOR", "DEFINE", "PUT_SYMBOL", "DATAPOINT", 
                      "HIERARCHICAL", "RULESET", "RULE", "END", "ALTER_DATASET", 
                      "LTRIM", "RTRIM", "INSTR", "REPLACE", "CEIL", "FLOOR", 
                      "SQRT", "ANY", "SETDIFF", "STDDEV_POP", "STDDEV_SAMP", 
                      "VAR_POP", "VAR_SAMP", "GROUP", "EXCEPT", "HAVING", 
                      "FIRST_VALUE", "LAST_VALUE", "LAG", "LEAD", "RATIO_TO_REPORT", 
                      "OVER", "PRECEDING", "FOLLOWING", "UNBOUNDED", "PARTITION", 
                      "ROWS", "RANGE", "CURRENT", "VALID", "FILL_TIME_SERIES", 
                      "FLOW_TO_STOCK", "STOCK_TO_FLOW", "TIMESHIFT", "MEASURES", 
                      "NO_MEASURES", "CONDITION", "BOOLEAN", "DATE", "TIME_PERIOD", 
                      "NUMBER", "STRING", "TIME", "INTEGER", "FLOAT", "LIST", 
                      "RECORD", "RESTRICT", "YYYY", "MM", "DD", "MAX_LENGTH", 
                      "REGEXP", "IS", "WHEN", "FROM", "AGGREGATES", "POINTS", 
                      "POINT", "TOTAL", "PARTIAL", "ALWAYS", "INNER_JOIN", 
                      "LEFT_JOIN", "CROSS_JOIN", "FULL_JOIN", "MAPS_FROM", 
                      "MAPS_TO", "MAP_TO", "MAP_FROM", "RETURNS", "PIVOT", 
                      "CUSTOMPIVOT", "UNPIVOT", "SUBSPACE", "APPLY", "CONDITIONED", 
                      "PERIOD_INDICATOR", "SINGLE", "DURATION", "TIME_AGG", 
                      "UNIT", "VALUE", "VALUEDOMAINS", "VARIABLES", "INPUT", 
                      "OUTPUT", "CAST", "RULE_PRIORITY", "DATASET_PRIORITY", 
                      "DEFAULT", "CHECK_DATAPOINT", "CHECK_HIERARCHY", "COMPUTED", 
                      "NON_NULL", "NON_ZERO", "PARTIAL_NULL", "PARTIAL_ZERO", 
                      "ALWAYS_NULL", "ALWAYS_ZERO", "COMPONENTS", "ALL_MEASURES", 
                      "SCALAR", "COMPONENT", "DATAPOINT_ON_VD", "DATAPOINT_ON_VAR", 
                      "HIERARCHICAL_ON_VD", "HIERARCHICAL_ON_VAR", "SET", 
                      "LANGUAGE", "INTEGER_CONSTANT", "NUMBER_CONSTANT", 
                      "BOOLEAN_CONSTANT", "STRING_CONSTANT", "IDENTIFIER", 
                      "WS", "EOL", "ML_COMMENT", "SL_COMMENT" ]

    RULE_start = 0
    RULE_statement = 1
    RULE_expr = 2
    RULE_exprComponent = 3
    RULE_functionsComponents = 4
    RULE_functions = 5
    RULE_datasetClause = 6
    RULE_renameClause = 7
    RULE_aggrClause = 8
    RULE_filterClause = 9
    RULE_calcClause = 10
    RULE_keepOrDropClause = 11
    RULE_pivotOrUnpivotClause = 12
    RULE_customPivotClause = 13
    RULE_subspaceClause = 14
    RULE_joinOperators = 15
    RULE_defOperators = 16
    RULE_genericOperators = 17
    RULE_genericOperatorsComponent = 18
    RULE_parameterComponent = 19
    RULE_parameter = 20
    RULE_stringOperators = 21
    RULE_stringOperatorsComponent = 22
    RULE_numericOperators = 23
    RULE_numericOperatorsComponent = 24
    RULE_comparisonOperators = 25
    RULE_comparisonOperatorsComponent = 26
    RULE_timeOperators = 27
    RULE_timeOperatorsComponent = 28
    RULE_setOperators = 29
    RULE_hierarchyOperators = 30
    RULE_validationOperators = 31
    RULE_conditionalOperators = 32
    RULE_conditionalOperatorsComponent = 33
    RULE_aggrOperators = 34
    RULE_aggrOperatorsGrouping = 35
    RULE_anFunction = 36
    RULE_anFunctionComponent = 37
    RULE_renameClauseItem = 38
    RULE_aggregateClause = 39
    RULE_aggrFunctionClause = 40
    RULE_calcClauseItem = 41
    RULE_subspaceClauseItem = 42
    RULE_scalarItem = 43
    RULE_joinClauseWithoutUsing = 44
    RULE_joinClause = 45
    RULE_joinClauseItem = 46
    RULE_joinBody = 47
    RULE_joinApplyClause = 48
    RULE_partitionByClause = 49
    RULE_orderByClause = 50
    RULE_orderByItem = 51
    RULE_windowingClause = 52
    RULE_signedInteger = 53
    RULE_limitClauseItem = 54
    RULE_groupingClause = 55
    RULE_havingClause = 56
    RULE_parameterItem = 57
    RULE_outputParameterType = 58
    RULE_outputParameterTypeComponent = 59
    RULE_inputParameterType = 60
    RULE_rulesetType = 61
    RULE_scalarType = 62
    RULE_componentType = 63
    RULE_datasetType = 64
    RULE_evalDatasetType = 65
    RULE_scalarSetType = 66
    RULE_dpRuleset = 67
    RULE_hrRuleset = 68
    RULE_valueDomainName = 69
    RULE_rulesetID = 70
    RULE_rulesetSignature = 71
    RULE_signature = 72
    RULE_ruleClauseDatapoint = 73
    RULE_ruleItemDatapoint = 74
    RULE_ruleClauseHierarchical = 75
    RULE_ruleItemHierarchical = 76
    RULE_hierRuleSignature = 77
    RULE_valueDomainSignature = 78
    RULE_codeItemRelation = 79
    RULE_codeItemRelationClause = 80
    RULE_valueDomainValue = 81
    RULE_scalarTypeConstraint = 82
    RULE_compConstraint = 83
    RULE_multModifier = 84
    RULE_validationOutput = 85
    RULE_validationMode = 86
    RULE_conditionClause = 87
    RULE_inputMode = 88
    RULE_imbalanceExpr = 89
    RULE_inputModeHierarchy = 90
    RULE_outputModeHierarchy = 91
    RULE_alias = 92
    RULE_varID = 93
    RULE_simpleComponentId = 94
    RULE_componentID = 95
    RULE_lists = 96
    RULE_erCode = 97
    RULE_erLevel = 98
    RULE_comparisonOperand = 99
    RULE_optionalExpr = 100
    RULE_optionalExprComponent = 101
    RULE_componentRole = 102
    RULE_viralAttribute = 103
    RULE_valueDomainID = 104
    RULE_operatorID = 105
    RULE_routineName = 106
    RULE_constant = 107
    RULE_basicScalarType = 108
    RULE_retainType = 109

    ruleNames =  [ "start", "statement", "expr", "exprComponent", "functionsComponents", 
                   "functions", "datasetClause", "renameClause", "aggrClause", 
                   "filterClause", "calcClause", "keepOrDropClause", "pivotOrUnpivotClause", 
                   "customPivotClause", "subspaceClause", "joinOperators", 
                   "defOperators", "genericOperators", "genericOperatorsComponent", 
                   "parameterComponent", "parameter", "stringOperators", 
                   "stringOperatorsComponent", "numericOperators", "numericOperatorsComponent", 
                   "comparisonOperators", "comparisonOperatorsComponent", 
                   "timeOperators", "timeOperatorsComponent", "setOperators", 
                   "hierarchyOperators", "validationOperators", "conditionalOperators", 
                   "conditionalOperatorsComponent", "aggrOperators", "aggrOperatorsGrouping", 
                   "anFunction", "anFunctionComponent", "renameClauseItem", 
                   "aggregateClause", "aggrFunctionClause", "calcClauseItem", 
                   "subspaceClauseItem", "scalarItem", "joinClauseWithoutUsing", 
                   "joinClause", "joinClauseItem", "joinBody", "joinApplyClause", 
                   "partitionByClause", "orderByClause", "orderByItem", 
                   "windowingClause", "signedInteger", "limitClauseItem", 
                   "groupingClause", "havingClause", "parameterItem", "outputParameterType", 
                   "outputParameterTypeComponent", "inputParameterType", 
                   "rulesetType", "scalarType", "componentType", "datasetType", 
                   "evalDatasetType", "scalarSetType", "dpRuleset", "hrRuleset", 
                   "valueDomainName", "rulesetID", "rulesetSignature", "signature", 
                   "ruleClauseDatapoint", "ruleItemDatapoint", "ruleClauseHierarchical", 
                   "ruleItemHierarchical", "hierRuleSignature", "valueDomainSignature", 
                   "codeItemRelation", "codeItemRelationClause", "valueDomainValue", 
                   "scalarTypeConstraint", "compConstraint", "multModifier", 
                   "validationOutput", "validationMode", "conditionClause", 
                   "inputMode", "imbalanceExpr", "inputModeHierarchy", "outputModeHierarchy", 
                   "alias", "varID", "simpleComponentId", "componentID", 
                   "lists", "erCode", "erLevel", "comparisonOperand", "optionalExpr", 
                   "optionalExprComponent", "componentRole", "viralAttribute", 
                   "valueDomainID", "operatorID", "routineName", "constant", 
                   "basicScalarType", "retainType" ]

    EOF = Token.EOF
    LPAREN=1
    RPAREN=2
    QLPAREN=3
    QRPAREN=4
    GLPAREN=5
    GRPAREN=6
    EQ=7
    LT=8
    MT=9
    ME=10
    NEQ=11
    LE=12
    PLUS=13
    MINUS=14
    MUL=15
    DIV=16
    COMMA=17
    POINTER=18
    COLON=19
    ASSIGN=20
    MEMBERSHIP=21
    EVAL=22
    IF=23
    CASE=24
    THEN=25
    ELSE=26
    USING=27
    WITH=28
    CURRENT_DATE=29
    DATEDIFF=30
    DATEADD=31
    YEAR_OP=32
    MONTH_OP=33
    DAYOFMONTH=34
    DAYOFYEAR=35
    DAYTOYEAR=36
    DAYTOMONTH=37
    YEARTODAY=38
    MONTHTODAY=39
    ON=40
    DROP=41
    KEEP=42
    CALC=43
    ATTRCALC=44
    RENAME=45
    AS=46
    AND=47
    OR=48
    XOR=49
    NOT=50
    BETWEEN=51
    IN=52
    NOT_IN=53
    NULL_CONSTANT=54
    ISNULL=55
    EX=56
    UNION=57
    DIFF=58
    SYMDIFF=59
    INTERSECT=60
    RANDOM=61
    KEYS=62
    INTYEAR=63
    INTMONTH=64
    INTDAY=65
    CHECK=66
    EXISTS_IN=67
    TO=68
    RETURN=69
    IMBALANCE=70
    ERRORCODE=71
    ALL=72
    AGGREGATE=73
    ERRORLEVEL=74
    ORDER=75
    BY=76
    RANK=77
    ASC=78
    DESC=79
    MIN=80
    MAX=81
    FIRST=82
    LAST=83
    INDEXOF=84
    ABS=85
    KEY=86
    LN=87
    LOG=88
    TRUNC=89
    ROUND=90
    POWER=91
    MOD=92
    LEN=93
    CONCAT=94
    TRIM=95
    UCASE=96
    LCASE=97
    SUBSTR=98
    SUM=99
    AVG=100
    MEDIAN=101
    COUNT=102
    DIMENSION=103
    MEASURE=104
    ATTRIBUTE=105
    FILTER=106
    MERGE=107
    EXP=108
    ROLE=109
    VIRAL=110
    CHARSET_MATCH=111
    TYPE=112
    NVL=113
    HIERARCHY=114
    OPTIONAL=115
    INVALID=116
    VALUE_DOMAIN=117
    VARIABLE=118
    DATA=119
    STRUCTURE=120
    DATASET=121
    OPERATOR=122
    DEFINE=123
    PUT_SYMBOL=124
    DATAPOINT=125
    HIERARCHICAL=126
    RULESET=127
    RULE=128
    END=129
    ALTER_DATASET=130
    LTRIM=131
    RTRIM=132
    INSTR=133
    REPLACE=134
    CEIL=135
    FLOOR=136
    SQRT=137
    ANY=138
    SETDIFF=139
    STDDEV_POP=140
    STDDEV_SAMP=141
    VAR_POP=142
    VAR_SAMP=143
    GROUP=144
    EXCEPT=145
    HAVING=146
    FIRST_VALUE=147
    LAST_VALUE=148
    LAG=149
    LEAD=150
    RATIO_TO_REPORT=151
    OVER=152
    PRECEDING=153
    FOLLOWING=154
    UNBOUNDED=155
    PARTITION=156
    ROWS=157
    RANGE=158
    CURRENT=159
    VALID=160
    FILL_TIME_SERIES=161
    FLOW_TO_STOCK=162
    STOCK_TO_FLOW=163
    TIMESHIFT=164
    MEASURES=165
    NO_MEASURES=166
    CONDITION=167
    BOOLEAN=168
    DATE=169
    TIME_PERIOD=170
    NUMBER=171
    STRING=172
    TIME=173
    INTEGER=174
    FLOAT=175
    LIST=176
    RECORD=177
    RESTRICT=178
    YYYY=179
    MM=180
    DD=181
    MAX_LENGTH=182
    REGEXP=183
    IS=184
    WHEN=185
    FROM=186
    AGGREGATES=187
    POINTS=188
    POINT=189
    TOTAL=190
    PARTIAL=191
    ALWAYS=192
    INNER_JOIN=193
    LEFT_JOIN=194
    CROSS_JOIN=195
    FULL_JOIN=196
    MAPS_FROM=197
    MAPS_TO=198
    MAP_TO=199
    MAP_FROM=200
    RETURNS=201
    PIVOT=202
    CUSTOMPIVOT=203
    UNPIVOT=204
    SUBSPACE=205
    APPLY=206
    CONDITIONED=207
    PERIOD_INDICATOR=208
    SINGLE=209
    DURATION=210
    TIME_AGG=211
    UNIT=212
    VALUE=213
    VALUEDOMAINS=214
    VARIABLES=215
    INPUT=216
    OUTPUT=217
    CAST=218
    RULE_PRIORITY=219
    DATASET_PRIORITY=220
    DEFAULT=221
    CHECK_DATAPOINT=222
    CHECK_HIERARCHY=223
    COMPUTED=224
    NON_NULL=225
    NON_ZERO=226
    PARTIAL_NULL=227
    PARTIAL_ZERO=228
    ALWAYS_NULL=229
    ALWAYS_ZERO=230
    COMPONENTS=231
    ALL_MEASURES=232
    SCALAR=233
    COMPONENT=234
    DATAPOINT_ON_VD=235
    DATAPOINT_ON_VAR=236
    HIERARCHICAL_ON_VD=237
    HIERARCHICAL_ON_VAR=238
    SET=239
    LANGUAGE=240
    INTEGER_CONSTANT=241
    NUMBER_CONSTANT=242
    BOOLEAN_CONSTANT=243
    STRING_CONSTANT=244
    IDENTIFIER=245
    WS=246
    EOL=247
    ML_COMMENT=248
    SL_COMMENT=249

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Parser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Parser.StatementContext,i)


        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.EOL)
            else:
                return self.getToken(Parser.EOL, i)

        def getRuleIndex(self):
            return Parser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = Parser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.DEFINE or _la==Parser.IDENTIFIER:
                self.state = 220
                self.statement()
                self.state = 221
                self.match(Parser.EOL)
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 228
            self.match(Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefineExpressionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def defOperators(self):
            return self.getTypedRuleContext(Parser.DefOperatorsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefineExpression" ):
                listener.enterDefineExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefineExpression" ):
                listener.exitDefineExpression(self)


    class TemporaryAssignmentContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def varID(self):
            return self.getTypedRuleContext(Parser.VarIDContext,0)

        def ASSIGN(self):
            return self.getToken(Parser.ASSIGN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporaryAssignment" ):
                listener.enterTemporaryAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporaryAssignment" ):
                listener.exitTemporaryAssignment(self)


    class PersistAssignmentContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def varID(self):
            return self.getTypedRuleContext(Parser.VarIDContext,0)

        def PUT_SYMBOL(self):
            return self.getToken(Parser.PUT_SYMBOL, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPersistAssignment" ):
                listener.enterPersistAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPersistAssignment" ):
                listener.exitPersistAssignment(self)



    def statement(self):

        localctx = Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                localctx = Parser.TemporaryAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 230
                self.varID()
                self.state = 231
                self.match(Parser.ASSIGN)
                self.state = 232
                self.expr(0)
                pass

            elif la_ == 2:
                localctx = Parser.PersistAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 234
                self.varID()
                self.state = 235
                self.match(Parser.PUT_SYMBOL)
                self.state = 236
                self.expr(0)
                pass

            elif la_ == 3:
                localctx = Parser.DefineExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 238
                self.defOperators()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class VarIdExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def varID(self):
            return self.getTypedRuleContext(Parser.VarIDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarIdExpr" ):
                listener.enterVarIdExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarIdExpr" ):
                listener.exitVarIdExpr(self)


    class MembershipExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def MEMBERSHIP(self):
            return self.getToken(Parser.MEMBERSHIP, 0)
        def simpleComponentId(self):
            return self.getTypedRuleContext(Parser.SimpleComponentIdContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMembershipExpr" ):
                listener.enterMembershipExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMembershipExpr" ):
                listener.exitMembershipExpr(self)


    class InNotInExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def IN(self):
            return self.getToken(Parser.IN, 0)
        def NOT_IN(self):
            return self.getToken(Parser.NOT_IN, 0)
        def lists(self):
            return self.getTypedRuleContext(Parser.ListsContext,0)

        def valueDomainID(self):
            return self.getTypedRuleContext(Parser.ValueDomainIDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInNotInExpr" ):
                listener.enterInNotInExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInNotInExpr" ):
                listener.exitInNotInExpr(self)


    class BooleanExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)

        def AND(self):
            return self.getToken(Parser.AND, 0)
        def OR(self):
            return self.getToken(Parser.OR, 0)
        def XOR(self):
            return self.getToken(Parser.XOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanExpr" ):
                listener.enterBooleanExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanExpr" ):
                listener.exitBooleanExpr(self)


    class ComparisonExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # ComparisonOperandContext
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)

        def comparisonOperand(self):
            return self.getTypedRuleContext(Parser.ComparisonOperandContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpr" ):
                listener.enterComparisonExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpr" ):
                listener.exitComparisonExpr(self)


    class UnaryExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def PLUS(self):
            return self.getToken(Parser.PLUS, 0)
        def MINUS(self):
            return self.getToken(Parser.MINUS, 0)
        def NOT(self):
            return self.getToken(Parser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpr" ):
                listener.enterUnaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpr" ):
                listener.exitUnaryExpr(self)


    class FunctionsExpressionContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functions(self):
            return self.getTypedRuleContext(Parser.FunctionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionsExpression" ):
                listener.enterFunctionsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionsExpression" ):
                listener.exitFunctionsExpression(self)


    class IfExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.conditionalExpr = None # ExprContext
            self.thenExpr = None # ExprContext
            self.elseExpr = None # ExprContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(Parser.IF, 0)
        def THEN(self):
            return self.getToken(Parser.THEN, 0)
        def ELSE(self):
            return self.getToken(Parser.ELSE, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)


    class ClauseExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.dataset = None # ExprContext
            self.clause = None # DatasetClauseContext
            self.copyFrom(ctx)

        def QLPAREN(self):
            return self.getToken(Parser.QLPAREN, 0)
        def QRPAREN(self):
            return self.getToken(Parser.QRPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def datasetClause(self):
            return self.getTypedRuleContext(Parser.DatasetClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClauseExpr" ):
                listener.enterClauseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClauseExpr" ):
                listener.exitClauseExpr(self)


    class CaseExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(Parser.CASE, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.WHEN)
            else:
                return self.getToken(Parser.WHEN, i)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.THEN)
            else:
                return self.getToken(Parser.THEN, i)
        def ELSE(self):
            return self.getToken(Parser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)


    class ArithmeticExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)

        def MUL(self):
            return self.getToken(Parser.MUL, 0)
        def DIV(self):
            return self.getToken(Parser.DIV, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticExpr" ):
                listener.enterArithmeticExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticExpr" ):
                listener.exitArithmeticExpr(self)


    class ParenthesisExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpr" ):
                listener.enterParenthesisExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpr" ):
                listener.exitParenthesisExpr(self)


    class ConstantExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(Parser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpr" ):
                listener.enterConstantExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpr" ):
                listener.exitConstantExpr(self)


    class ArithmeticExprOrConcatContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)

        def PLUS(self):
            return self.getToken(Parser.PLUS, 0)
        def MINUS(self):
            return self.getToken(Parser.MINUS, 0)
        def CONCAT(self):
            return self.getToken(Parser.CONCAT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticExprOrConcat" ):
                listener.enterArithmeticExprOrConcat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticExprOrConcat" ):
                listener.exitArithmeticExprOrConcat(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Parser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 4
        self.enterRecursionRule(localctx, 4, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                localctx = Parser.ParenthesisExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 242
                self.match(Parser.LPAREN)
                self.state = 243
                self.expr(0)
                self.state = 244
                self.match(Parser.RPAREN)
                pass

            elif la_ == 2:
                localctx = Parser.FunctionsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 246
                self.functions()
                pass

            elif la_ == 3:
                localctx = Parser.UnaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 247
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Parser.PLUS) | (1 << Parser.MINUS) | (1 << Parser.NOT))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 248
                localctx.right = self.expr(11)
                pass

            elif la_ == 4:
                localctx = Parser.IfExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 249
                self.match(Parser.IF)
                self.state = 250
                localctx.conditionalExpr = self.expr(0)
                self.state = 251
                self.match(Parser.THEN)
                self.state = 252
                localctx.thenExpr = self.expr(0)
                self.state = 253
                self.match(Parser.ELSE)
                self.state = 254
                localctx.elseExpr = self.expr(4)
                pass

            elif la_ == 5:
                localctx = Parser.CaseExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 256
                self.match(Parser.CASE)
                self.state = 257
                self.match(Parser.WHEN)
                self.state = 258
                self.expr(0)
                self.state = 259
                self.match(Parser.THEN)
                self.state = 260
                self.expr(0)
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Parser.WHEN:
                    self.state = 261
                    self.match(Parser.WHEN)
                    self.state = 262
                    self.expr(0)
                    self.state = 263
                    self.match(Parser.THEN)
                    self.state = 264
                    self.expr(0)
                    self.state = 270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 271
                self.match(Parser.ELSE)
                self.state = 272
                self.expr(3)
                pass

            elif la_ == 6:
                localctx = Parser.ConstantExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 274
                self.constant()
                pass

            elif la_ == 7:
                localctx = Parser.VarIdExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 275
                self.varID()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 310
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 308
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                    if la_ == 1:
                        localctx = Parser.ArithmeticExprContext(self, Parser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 278
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 279
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==Parser.MUL or _la==Parser.DIV):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 280
                        localctx.right = self.expr(11)
                        pass

                    elif la_ == 2:
                        localctx = Parser.ArithmeticExprOrConcatContext(self, Parser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 281
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 282
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==Parser.PLUS or _la==Parser.MINUS or _la==Parser.CONCAT):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 283
                        localctx.right = self.expr(10)
                        pass

                    elif la_ == 3:
                        localctx = Parser.ComparisonExprContext(self, Parser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 284
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 285
                        localctx.op = self.comparisonOperand()
                        self.state = 286
                        localctx.right = self.expr(9)
                        pass

                    elif la_ == 4:
                        localctx = Parser.BooleanExprContext(self, Parser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 288
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 289
                        localctx.op = self.match(Parser.AND)
                        self.state = 290
                        localctx.right = self.expr(7)
                        pass

                    elif la_ == 5:
                        localctx = Parser.BooleanExprContext(self, Parser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 291
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 292
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==Parser.OR or _la==Parser.XOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 293
                        localctx.right = self.expr(6)
                        pass

                    elif la_ == 6:
                        localctx = Parser.ClauseExprContext(self, Parser.ExprContext(self, _parentctx, _parentState))
                        localctx.dataset = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 294
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 295
                        self.match(Parser.QLPAREN)
                        self.state = 296
                        localctx.clause = self.datasetClause()
                        self.state = 297
                        self.match(Parser.QRPAREN)
                        pass

                    elif la_ == 7:
                        localctx = Parser.MembershipExprContext(self, Parser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 299
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 300
                        self.match(Parser.MEMBERSHIP)
                        self.state = 301
                        self.simpleComponentId()
                        pass

                    elif la_ == 8:
                        localctx = Parser.InNotInExprContext(self, Parser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 302
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 303
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==Parser.IN or _la==Parser.NOT_IN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 306
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Parser.GLPAREN]:
                            self.state = 304
                            self.lists()
                            pass
                        elif token in [Parser.IDENTIFIER]:
                            self.state = 305
                            self.valueDomainID()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 312
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExprComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_exprComponent

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ArithmeticExprCompContext(ExprComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprComponentContext
            super().__init__(parser)
            self.left = None # ExprComponentContext
            self.op = None # Token
            self.right = None # ExprComponentContext
            self.copyFrom(ctx)

        def exprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext,i)

        def MUL(self):
            return self.getToken(Parser.MUL, 0)
        def DIV(self):
            return self.getToken(Parser.DIV, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticExprComp" ):
                listener.enterArithmeticExprComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticExprComp" ):
                listener.exitArithmeticExprComp(self)


    class IfExprCompContext(ExprComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprComponentContext
            super().__init__(parser)
            self.conditionalExpr = None # ExprComponentContext
            self.thenExpr = None # ExprComponentContext
            self.elseExpr = None # ExprComponentContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(Parser.IF, 0)
        def THEN(self):
            return self.getToken(Parser.THEN, 0)
        def ELSE(self):
            return self.getToken(Parser.ELSE, 0)
        def exprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExprComp" ):
                listener.enterIfExprComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExprComp" ):
                listener.exitIfExprComp(self)


    class ComparisonExprCompContext(ExprComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprComponentContext
            super().__init__(parser)
            self.left = None # ExprComponentContext
            self.right = None # ExprComponentContext
            self.copyFrom(ctx)

        def comparisonOperand(self):
            return self.getTypedRuleContext(Parser.ComparisonOperandContext,0)

        def exprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExprComp" ):
                listener.enterComparisonExprComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExprComp" ):
                listener.exitComparisonExprComp(self)


    class FunctionsExpressionCompContext(ExprComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionsComponents(self):
            return self.getTypedRuleContext(Parser.FunctionsComponentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionsExpressionComp" ):
                listener.enterFunctionsExpressionComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionsExpressionComp" ):
                listener.exitFunctionsExpressionComp(self)


    class CompIdContext(ExprComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompId" ):
                listener.enterCompId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompId" ):
                listener.exitCompId(self)


    class ConstantExprCompContext(ExprComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(Parser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExprComp" ):
                listener.enterConstantExprComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExprComp" ):
                listener.exitConstantExprComp(self)


    class ArithmeticExprOrConcatCompContext(ExprComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprComponentContext
            super().__init__(parser)
            self.left = None # ExprComponentContext
            self.op = None # Token
            self.right = None # ExprComponentContext
            self.copyFrom(ctx)

        def exprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext,i)

        def PLUS(self):
            return self.getToken(Parser.PLUS, 0)
        def MINUS(self):
            return self.getToken(Parser.MINUS, 0)
        def CONCAT(self):
            return self.getToken(Parser.CONCAT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticExprOrConcatComp" ):
                listener.enterArithmeticExprOrConcatComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticExprOrConcatComp" ):
                listener.exitArithmeticExprOrConcatComp(self)


    class ParenthesisExprCompContext(ExprComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExprComp" ):
                listener.enterParenthesisExprComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExprComp" ):
                listener.exitParenthesisExprComp(self)


    class InNotInExprCompContext(ExprComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprComponentContext
            super().__init__(parser)
            self.left = None # ExprComponentContext
            self.op = None # Token
            self.copyFrom(ctx)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def IN(self):
            return self.getToken(Parser.IN, 0)
        def NOT_IN(self):
            return self.getToken(Parser.NOT_IN, 0)
        def lists(self):
            return self.getTypedRuleContext(Parser.ListsContext,0)

        def valueDomainID(self):
            return self.getTypedRuleContext(Parser.ValueDomainIDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInNotInExprComp" ):
                listener.enterInNotInExprComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInNotInExprComp" ):
                listener.exitInNotInExprComp(self)


    class UnaryExprCompContext(ExprComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprComponentContext
            super().__init__(parser)
            self.op = None # Token
            self.right = None # ExprComponentContext
            self.copyFrom(ctx)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def PLUS(self):
            return self.getToken(Parser.PLUS, 0)
        def MINUS(self):
            return self.getToken(Parser.MINUS, 0)
        def NOT(self):
            return self.getToken(Parser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExprComp" ):
                listener.enterUnaryExprComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExprComp" ):
                listener.exitUnaryExprComp(self)


    class BooleanExprCompContext(ExprComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ExprComponentContext
            super().__init__(parser)
            self.left = None # ExprComponentContext
            self.op = None # Token
            self.right = None # ExprComponentContext
            self.copyFrom(ctx)

        def exprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext,i)

        def AND(self):
            return self.getToken(Parser.AND, 0)
        def OR(self):
            return self.getToken(Parser.OR, 0)
        def XOR(self):
            return self.getToken(Parser.XOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanExprComp" ):
                listener.enterBooleanExprComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanExprComp" ):
                listener.exitBooleanExprComp(self)



    def exprComponent(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Parser.ExprComponentContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 6
        self.enterRecursionRule(localctx, 6, self.RULE_exprComponent, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                localctx = Parser.ParenthesisExprCompContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 314
                self.match(Parser.LPAREN)
                self.state = 315
                self.exprComponent(0)
                self.state = 316
                self.match(Parser.RPAREN)
                pass

            elif la_ == 2:
                localctx = Parser.FunctionsExpressionCompContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 318
                self.functionsComponents()
                pass

            elif la_ == 3:
                localctx = Parser.UnaryExprCompContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 319
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Parser.PLUS) | (1 << Parser.MINUS) | (1 << Parser.NOT))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 320
                localctx.right = self.exprComponent(10)
                pass

            elif la_ == 4:
                localctx = Parser.IfExprCompContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 321
                self.match(Parser.IF)
                self.state = 322
                localctx.conditionalExpr = self.exprComponent(0)
                self.state = 323
                self.match(Parser.THEN)
                self.state = 324
                localctx.thenExpr = self.exprComponent(0)
                self.state = 325
                self.match(Parser.ELSE)
                self.state = 326
                localctx.elseExpr = self.exprComponent(3)
                pass

            elif la_ == 5:
                localctx = Parser.ConstantExprCompContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 328
                self.constant()
                pass

            elif la_ == 6:
                localctx = Parser.CompIdContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 329
                self.componentID()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 356
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 354
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        localctx = Parser.ArithmeticExprCompContext(self, Parser.ExprComponentContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprComponent)
                        self.state = 332
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 333
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==Parser.MUL or _la==Parser.DIV):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 334
                        localctx.right = self.exprComponent(10)
                        pass

                    elif la_ == 2:
                        localctx = Parser.ArithmeticExprOrConcatCompContext(self, Parser.ExprComponentContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprComponent)
                        self.state = 335
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 336
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==Parser.PLUS or _la==Parser.MINUS or _la==Parser.CONCAT):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 337
                        localctx.right = self.exprComponent(9)
                        pass

                    elif la_ == 3:
                        localctx = Parser.ComparisonExprCompContext(self, Parser.ExprComponentContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprComponent)
                        self.state = 338
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 339
                        self.comparisonOperand()
                        self.state = 340
                        localctx.right = self.exprComponent(8)
                        pass

                    elif la_ == 4:
                        localctx = Parser.BooleanExprCompContext(self, Parser.ExprComponentContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprComponent)
                        self.state = 342
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 343
                        localctx.op = self.match(Parser.AND)
                        self.state = 344
                        localctx.right = self.exprComponent(6)
                        pass

                    elif la_ == 5:
                        localctx = Parser.BooleanExprCompContext(self, Parser.ExprComponentContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprComponent)
                        self.state = 345
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 346
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==Parser.OR or _la==Parser.XOR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 347
                        localctx.right = self.exprComponent(5)
                        pass

                    elif la_ == 6:
                        localctx = Parser.InNotInExprCompContext(self, Parser.ExprComponentContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_exprComponent)
                        self.state = 348
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 349
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==Parser.IN or _la==Parser.NOT_IN):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 352
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Parser.GLPAREN]:
                            self.state = 350
                            self.lists()
                            pass
                        elif token in [Parser.IDENTIFIER]:
                            self.state = 351
                            self.valueDomainID()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 358
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class FunctionsComponentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_functionsComponents

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NumericFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numericOperatorsComponent(self):
            return self.getTypedRuleContext(Parser.NumericOperatorsComponentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericFunctionsComponents" ):
                listener.enterNumericFunctionsComponents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericFunctionsComponents" ):
                listener.exitNumericFunctionsComponents(self)


    class StringFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringOperatorsComponent(self):
            return self.getTypedRuleContext(Parser.StringOperatorsComponentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringFunctionsComponents" ):
                listener.enterStringFunctionsComponents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringFunctionsComponents" ):
                listener.exitStringFunctionsComponents(self)


    class ComparisonFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def comparisonOperatorsComponent(self):
            return self.getTypedRuleContext(Parser.ComparisonOperatorsComponentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonFunctionsComponents" ):
                listener.enterComparisonFunctionsComponents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonFunctionsComponents" ):
                listener.exitComparisonFunctionsComponents(self)


    class TimeFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def timeOperatorsComponent(self):
            return self.getTypedRuleContext(Parser.TimeOperatorsComponentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeFunctionsComponents" ):
                listener.enterTimeFunctionsComponents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeFunctionsComponents" ):
                listener.exitTimeFunctionsComponents(self)


    class GenericFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def genericOperatorsComponent(self):
            return self.getTypedRuleContext(Parser.GenericOperatorsComponentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericFunctionsComponents" ):
                listener.enterGenericFunctionsComponents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericFunctionsComponents" ):
                listener.exitGenericFunctionsComponents(self)


    class AnalyticFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def anFunctionComponent(self):
            return self.getTypedRuleContext(Parser.AnFunctionComponentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyticFunctionsComponents" ):
                listener.enterAnalyticFunctionsComponents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyticFunctionsComponents" ):
                listener.exitAnalyticFunctionsComponents(self)


    class ConditionalFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def conditionalOperatorsComponent(self):
            return self.getTypedRuleContext(Parser.ConditionalOperatorsComponentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalFunctionsComponents" ):
                listener.enterConditionalFunctionsComponents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalFunctionsComponents" ):
                listener.exitConditionalFunctionsComponents(self)


    class AggregateFunctionsComponentsContext(FunctionsComponentsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsComponentsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggrOperators(self):
            return self.getTypedRuleContext(Parser.AggrOperatorsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateFunctionsComponents" ):
                listener.enterAggregateFunctionsComponents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateFunctionsComponents" ):
                listener.exitAggregateFunctionsComponents(self)



    def functionsComponents(self):

        localctx = Parser.FunctionsComponentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_functionsComponents)
        try:
            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                localctx = Parser.GenericFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 359
                self.genericOperatorsComponent()
                pass

            elif la_ == 2:
                localctx = Parser.StringFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 360
                self.stringOperatorsComponent()
                pass

            elif la_ == 3:
                localctx = Parser.NumericFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 361
                self.numericOperatorsComponent()
                pass

            elif la_ == 4:
                localctx = Parser.ComparisonFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 362
                self.comparisonOperatorsComponent()
                pass

            elif la_ == 5:
                localctx = Parser.TimeFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 363
                self.timeOperatorsComponent()
                pass

            elif la_ == 6:
                localctx = Parser.ConditionalFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 364
                self.conditionalOperatorsComponent()
                pass

            elif la_ == 7:
                localctx = Parser.AggregateFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 365
                self.aggrOperators()
                pass

            elif la_ == 8:
                localctx = Parser.AnalyticFunctionsComponentsContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 366
                self.anFunctionComponent()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_functions

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HierarchyFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hierarchyOperators(self):
            return self.getTypedRuleContext(Parser.HierarchyOperatorsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHierarchyFunctions" ):
                listener.enterHierarchyFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHierarchyFunctions" ):
                listener.exitHierarchyFunctions(self)


    class StringFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringOperators(self):
            return self.getTypedRuleContext(Parser.StringOperatorsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringFunctions" ):
                listener.enterStringFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringFunctions" ):
                listener.exitStringFunctions(self)


    class ValidationFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def validationOperators(self):
            return self.getTypedRuleContext(Parser.ValidationOperatorsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValidationFunctions" ):
                listener.enterValidationFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValidationFunctions" ):
                listener.exitValidationFunctions(self)


    class GenericFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def genericOperators(self):
            return self.getTypedRuleContext(Parser.GenericOperatorsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericFunctions" ):
                listener.enterGenericFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericFunctions" ):
                listener.exitGenericFunctions(self)


    class ConditionalFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def conditionalOperators(self):
            return self.getTypedRuleContext(Parser.ConditionalOperatorsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalFunctions" ):
                listener.enterConditionalFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalFunctions" ):
                listener.exitConditionalFunctions(self)


    class AggregateFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggrOperatorsGrouping(self):
            return self.getTypedRuleContext(Parser.AggrOperatorsGroupingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateFunctions" ):
                listener.enterAggregateFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateFunctions" ):
                listener.exitAggregateFunctions(self)


    class JoinFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinOperators(self):
            return self.getTypedRuleContext(Parser.JoinOperatorsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinFunctions" ):
                listener.enterJoinFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinFunctions" ):
                listener.exitJoinFunctions(self)


    class ComparisonFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def comparisonOperators(self):
            return self.getTypedRuleContext(Parser.ComparisonOperatorsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonFunctions" ):
                listener.enterComparisonFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonFunctions" ):
                listener.exitComparisonFunctions(self)


    class NumericFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numericOperators(self):
            return self.getTypedRuleContext(Parser.NumericOperatorsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericFunctions" ):
                listener.enterNumericFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericFunctions" ):
                listener.exitNumericFunctions(self)


    class TimeFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def timeOperators(self):
            return self.getTypedRuleContext(Parser.TimeOperatorsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeFunctions" ):
                listener.enterTimeFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeFunctions" ):
                listener.exitTimeFunctions(self)


    class SetFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setOperators(self):
            return self.getTypedRuleContext(Parser.SetOperatorsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetFunctions" ):
                listener.enterSetFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetFunctions" ):
                listener.exitSetFunctions(self)


    class AnalyticFunctionsContext(FunctionsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.FunctionsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def anFunction(self):
            return self.getTypedRuleContext(Parser.AnFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyticFunctions" ):
                listener.enterAnalyticFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyticFunctions" ):
                listener.exitAnalyticFunctions(self)



    def functions(self):

        localctx = Parser.FunctionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_functions)
        try:
            self.state = 381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                localctx = Parser.JoinFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 369
                self.joinOperators()
                pass

            elif la_ == 2:
                localctx = Parser.GenericFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 370
                self.genericOperators()
                pass

            elif la_ == 3:
                localctx = Parser.StringFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 371
                self.stringOperators()
                pass

            elif la_ == 4:
                localctx = Parser.NumericFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 372
                self.numericOperators()
                pass

            elif la_ == 5:
                localctx = Parser.ComparisonFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 373
                self.comparisonOperators()
                pass

            elif la_ == 6:
                localctx = Parser.TimeFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 374
                self.timeOperators()
                pass

            elif la_ == 7:
                localctx = Parser.SetFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 375
                self.setOperators()
                pass

            elif la_ == 8:
                localctx = Parser.HierarchyFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 376
                self.hierarchyOperators()
                pass

            elif la_ == 9:
                localctx = Parser.ValidationFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 377
                self.validationOperators()
                pass

            elif la_ == 10:
                localctx = Parser.ConditionalFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 378
                self.conditionalOperators()
                pass

            elif la_ == 11:
                localctx = Parser.AggregateFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 379
                self.aggrOperatorsGrouping()
                pass

            elif la_ == 12:
                localctx = Parser.AnalyticFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 380
                self.anFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatasetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def renameClause(self):
            return self.getTypedRuleContext(Parser.RenameClauseContext,0)


        def aggrClause(self):
            return self.getTypedRuleContext(Parser.AggrClauseContext,0)


        def filterClause(self):
            return self.getTypedRuleContext(Parser.FilterClauseContext,0)


        def calcClause(self):
            return self.getTypedRuleContext(Parser.CalcClauseContext,0)


        def keepOrDropClause(self):
            return self.getTypedRuleContext(Parser.KeepOrDropClauseContext,0)


        def pivotOrUnpivotClause(self):
            return self.getTypedRuleContext(Parser.PivotOrUnpivotClauseContext,0)


        def subspaceClause(self):
            return self.getTypedRuleContext(Parser.SubspaceClauseContext,0)


        def getRuleIndex(self):
            return Parser.RULE_datasetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatasetClause" ):
                listener.enterDatasetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatasetClause" ):
                listener.exitDatasetClause(self)




    def datasetClause(self):

        localctx = Parser.DatasetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_datasetClause)
        try:
            self.state = 390
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.RENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 383
                self.renameClause()
                pass
            elif token in [Parser.AGGREGATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 384
                self.aggrClause()
                pass
            elif token in [Parser.FILTER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 385
                self.filterClause()
                pass
            elif token in [Parser.CALC]:
                self.enterOuterAlt(localctx, 4)
                self.state = 386
                self.calcClause()
                pass
            elif token in [Parser.DROP, Parser.KEEP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 387
                self.keepOrDropClause()
                pass
            elif token in [Parser.PIVOT, Parser.UNPIVOT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 388
                self.pivotOrUnpivotClause()
                pass
            elif token in [Parser.SUBSPACE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 389
                self.subspaceClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RenameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(Parser.RENAME, 0)

        def renameClauseItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.RenameClauseItemContext)
            else:
                return self.getTypedRuleContext(Parser.RenameClauseItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_renameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameClause" ):
                listener.enterRenameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameClause" ):
                listener.exitRenameClause(self)




    def renameClause(self):

        localctx = Parser.RenameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_renameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(Parser.RENAME)
            self.state = 393
            self.renameClauseItem()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 394
                self.match(Parser.COMMA)
                self.state = 395
                self.renameClauseItem()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggrClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AGGREGATE(self):
            return self.getToken(Parser.AGGREGATE, 0)

        def aggregateClause(self):
            return self.getTypedRuleContext(Parser.AggregateClauseContext,0)


        def groupingClause(self):
            return self.getTypedRuleContext(Parser.GroupingClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(Parser.HavingClauseContext,0)


        def getRuleIndex(self):
            return Parser.RULE_aggrClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggrClause" ):
                listener.enterAggrClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggrClause" ):
                listener.exitAggrClause(self)




    def aggrClause(self):

        localctx = Parser.AggrClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_aggrClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(Parser.AGGREGATE)
            self.state = 402
            self.aggregateClause()
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.GROUP:
                self.state = 403
                self.groupingClause()
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.HAVING:
                    self.state = 404
                    self.havingClause()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FilterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(Parser.FILTER, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)


        def getRuleIndex(self):
            return Parser.RULE_filterClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilterClause" ):
                listener.enterFilterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilterClause" ):
                listener.exitFilterClause(self)




    def filterClause(self):

        localctx = Parser.FilterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_filterClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(Parser.FILTER)
            self.state = 410
            self.exprComponent(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalcClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALC(self):
            return self.getToken(Parser.CALC, 0)

        def calcClauseItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.CalcClauseItemContext)
            else:
                return self.getTypedRuleContext(Parser.CalcClauseItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_calcClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalcClause" ):
                listener.enterCalcClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalcClause" ):
                listener.exitCalcClause(self)




    def calcClause(self):

        localctx = Parser.CalcClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_calcClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(Parser.CALC)
            self.state = 413
            self.calcClauseItem()
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 414
                self.match(Parser.COMMA)
                self.state = 415
                self.calcClauseItem()
                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeepOrDropClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def componentID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext,i)


        def KEEP(self):
            return self.getToken(Parser.KEEP, 0)

        def DROP(self):
            return self.getToken(Parser.DROP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_keepOrDropClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeepOrDropClause" ):
                listener.enterKeepOrDropClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeepOrDropClause" ):
                listener.exitKeepOrDropClause(self)




    def keepOrDropClause(self):

        localctx = Parser.KeepOrDropClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_keepOrDropClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==Parser.DROP or _la==Parser.KEEP):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 422
            self.componentID()
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 423
                self.match(Parser.COMMA)
                self.state = 424
                self.componentID()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PivotOrUnpivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token
            self.id_ = None # ComponentIDContext
            self.mea = None # ComponentIDContext

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def componentID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext,i)


        def PIVOT(self):
            return self.getToken(Parser.PIVOT, 0)

        def UNPIVOT(self):
            return self.getToken(Parser.UNPIVOT, 0)

        def getRuleIndex(self):
            return Parser.RULE_pivotOrUnpivotClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotOrUnpivotClause" ):
                listener.enterPivotOrUnpivotClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotOrUnpivotClause" ):
                listener.exitPivotOrUnpivotClause(self)




    def pivotOrUnpivotClause(self):

        localctx = Parser.PivotOrUnpivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_pivotOrUnpivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==Parser.PIVOT or _la==Parser.UNPIVOT):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 431
            localctx.id_ = self.componentID()
            self.state = 432
            self.match(Parser.COMMA)
            self.state = 433
            localctx.mea = self.componentID()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CustomPivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.id_ = None # ComponentIDContext
            self.mea = None # ComponentIDContext

        def CUSTOMPIVOT(self):
            return self.getToken(Parser.CUSTOMPIVOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def IN(self):
            return self.getToken(Parser.IN, 0)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ConstantContext)
            else:
                return self.getTypedRuleContext(Parser.ConstantContext,i)


        def componentID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext,i)


        def getRuleIndex(self):
            return Parser.RULE_customPivotClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustomPivotClause" ):
                listener.enterCustomPivotClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustomPivotClause" ):
                listener.exitCustomPivotClause(self)




    def customPivotClause(self):

        localctx = Parser.CustomPivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_customPivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(Parser.CUSTOMPIVOT)
            self.state = 436
            localctx.id_ = self.componentID()
            self.state = 437
            self.match(Parser.COMMA)
            self.state = 438
            localctx.mea = self.componentID()
            self.state = 439
            self.match(Parser.IN)
            self.state = 440
            self.constant()
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 441
                self.match(Parser.COMMA)
                self.state = 442
                self.constant()
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubspaceClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSPACE(self):
            return self.getToken(Parser.SUBSPACE, 0)

        def subspaceClauseItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.SubspaceClauseItemContext)
            else:
                return self.getTypedRuleContext(Parser.SubspaceClauseItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_subspaceClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubspaceClause" ):
                listener.enterSubspaceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubspaceClause" ):
                listener.exitSubspaceClause(self)




    def subspaceClause(self):

        localctx = Parser.SubspaceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_subspaceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.match(Parser.SUBSPACE)
            self.state = 449
            self.subspaceClauseItem()
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 450
                self.match(Parser.COMMA)
                self.state = 451
                self.subspaceClauseItem()
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_joinOperators

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinExprContext(JoinOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.JoinOperatorsContext
            super().__init__(parser)
            self.joinKeyword = None # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def joinClause(self):
            return self.getTypedRuleContext(Parser.JoinClauseContext,0)

        def joinBody(self):
            return self.getTypedRuleContext(Parser.JoinBodyContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def INNER_JOIN(self):
            return self.getToken(Parser.INNER_JOIN, 0)
        def LEFT_JOIN(self):
            return self.getToken(Parser.LEFT_JOIN, 0)
        def joinClauseWithoutUsing(self):
            return self.getTypedRuleContext(Parser.JoinClauseWithoutUsingContext,0)

        def FULL_JOIN(self):
            return self.getToken(Parser.FULL_JOIN, 0)
        def CROSS_JOIN(self):
            return self.getToken(Parser.CROSS_JOIN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinExpr" ):
                listener.enterJoinExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinExpr" ):
                listener.exitJoinExpr(self)



    def joinOperators(self):

        localctx = Parser.JoinOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_joinOperators)
        self._la = 0 # Token type
        try:
            self.state = 469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.INNER_JOIN, Parser.LEFT_JOIN]:
                localctx = Parser.JoinExprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 457
                localctx.joinKeyword = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==Parser.INNER_JOIN or _la==Parser.LEFT_JOIN):
                    localctx.joinKeyword = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 458
                self.match(Parser.LPAREN)
                self.state = 459
                self.joinClause()
                self.state = 460
                self.joinBody()
                self.state = 461
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CROSS_JOIN, Parser.FULL_JOIN]:
                localctx = Parser.JoinExprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                localctx.joinKeyword = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==Parser.CROSS_JOIN or _la==Parser.FULL_JOIN):
                    localctx.joinKeyword = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 464
                self.match(Parser.LPAREN)
                self.state = 465
                self.joinClauseWithoutUsing()
                self.state = 466
                self.joinBody()
                self.state = 467
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_defOperators

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefOperatorContext(DefOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.DefOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(Parser.DEFINE, 0)
        def OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.OPERATOR)
            else:
                return self.getToken(Parser.OPERATOR, i)
        def operatorID(self):
            return self.getTypedRuleContext(Parser.OperatorIDContext,0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def IS(self):
            return self.getToken(Parser.IS, 0)
        def END(self):
            return self.getToken(Parser.END, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def parameterItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ParameterItemContext)
            else:
                return self.getTypedRuleContext(Parser.ParameterItemContext,i)

        def RETURNS(self):
            return self.getToken(Parser.RETURNS, 0)
        def outputParameterType(self):
            return self.getTypedRuleContext(Parser.OutputParameterTypeContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefOperator" ):
                listener.enterDefOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefOperator" ):
                listener.exitDefOperator(self)


    class DefHierarchicalContext(DefOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.DefOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(Parser.DEFINE, 0)
        def HIERARCHICAL(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.HIERARCHICAL)
            else:
                return self.getToken(Parser.HIERARCHICAL, i)
        def RULESET(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.RULESET)
            else:
                return self.getToken(Parser.RULESET, i)
        def rulesetID(self):
            return self.getTypedRuleContext(Parser.RulesetIDContext,0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def hierRuleSignature(self):
            return self.getTypedRuleContext(Parser.HierRuleSignatureContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def IS(self):
            return self.getToken(Parser.IS, 0)
        def ruleClauseHierarchical(self):
            return self.getTypedRuleContext(Parser.RuleClauseHierarchicalContext,0)

        def END(self):
            return self.getToken(Parser.END, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefHierarchical" ):
                listener.enterDefHierarchical(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefHierarchical" ):
                listener.exitDefHierarchical(self)


    class DefDatapointRulesetContext(DefOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.DefOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFINE(self):
            return self.getToken(Parser.DEFINE, 0)
        def DATAPOINT(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.DATAPOINT)
            else:
                return self.getToken(Parser.DATAPOINT, i)
        def RULESET(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.RULESET)
            else:
                return self.getToken(Parser.RULESET, i)
        def rulesetID(self):
            return self.getTypedRuleContext(Parser.RulesetIDContext,0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def rulesetSignature(self):
            return self.getTypedRuleContext(Parser.RulesetSignatureContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def IS(self):
            return self.getToken(Parser.IS, 0)
        def ruleClauseDatapoint(self):
            return self.getTypedRuleContext(Parser.RuleClauseDatapointContext,0)

        def END(self):
            return self.getToken(Parser.END, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefDatapointRuleset" ):
                listener.enterDefDatapointRuleset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefDatapointRuleset" ):
                listener.exitDefDatapointRuleset(self)



    def defOperators(self):

        localctx = Parser.DefOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_defOperators)
        self._la = 0 # Token type
        try:
            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                localctx = Parser.DefOperatorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 471
                self.match(Parser.DEFINE)
                self.state = 472
                self.match(Parser.OPERATOR)
                self.state = 473
                self.operatorID()
                self.state = 474
                self.match(Parser.LPAREN)
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.IDENTIFIER:
                    self.state = 475
                    self.parameterItem()
                    self.state = 480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==Parser.COMMA:
                        self.state = 476
                        self.match(Parser.COMMA)
                        self.state = 477
                        self.parameterItem()
                        self.state = 482
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 485
                self.match(Parser.RPAREN)
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.RETURNS:
                    self.state = 486
                    self.match(Parser.RETURNS)
                    self.state = 487
                    self.outputParameterType()


                self.state = 490
                self.match(Parser.IS)

                self.state = 491
                self.expr(0)
                self.state = 492
                self.match(Parser.END)
                self.state = 493
                self.match(Parser.OPERATOR)
                pass

            elif la_ == 2:
                localctx = Parser.DefDatapointRulesetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.match(Parser.DEFINE)
                self.state = 496
                self.match(Parser.DATAPOINT)
                self.state = 497
                self.match(Parser.RULESET)
                self.state = 498
                self.rulesetID()
                self.state = 499
                self.match(Parser.LPAREN)
                self.state = 500
                self.rulesetSignature()
                self.state = 501
                self.match(Parser.RPAREN)
                self.state = 502
                self.match(Parser.IS)
                self.state = 503
                self.ruleClauseDatapoint()
                self.state = 504
                self.match(Parser.END)
                self.state = 505
                self.match(Parser.DATAPOINT)
                self.state = 506
                self.match(Parser.RULESET)
                pass

            elif la_ == 3:
                localctx = Parser.DefHierarchicalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 508
                self.match(Parser.DEFINE)
                self.state = 509
                self.match(Parser.HIERARCHICAL)
                self.state = 510
                self.match(Parser.RULESET)
                self.state = 511
                self.rulesetID()
                self.state = 512
                self.match(Parser.LPAREN)
                self.state = 513
                self.hierRuleSignature()
                self.state = 514
                self.match(Parser.RPAREN)
                self.state = 515
                self.match(Parser.IS)
                self.state = 516
                self.ruleClauseHierarchical()
                self.state = 517
                self.match(Parser.END)
                self.state = 518
                self.match(Parser.HIERARCHICAL)
                self.state = 519
                self.match(Parser.RULESET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_genericOperators

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class EvalAtomContext(GenericOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.GenericOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EVAL(self):
            return self.getToken(Parser.EVAL, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)
        def routineName(self):
            return self.getTypedRuleContext(Parser.RoutineNameContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)
        def varID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.VarIDContext)
            else:
                return self.getTypedRuleContext(Parser.VarIDContext,i)

        def scalarItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ScalarItemContext)
            else:
                return self.getTypedRuleContext(Parser.ScalarItemContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def LANGUAGE(self):
            return self.getToken(Parser.LANGUAGE, 0)
        def STRING_CONSTANT(self):
            return self.getToken(Parser.STRING_CONSTANT, 0)
        def RETURNS(self):
            return self.getToken(Parser.RETURNS, 0)
        def evalDatasetType(self):
            return self.getTypedRuleContext(Parser.EvalDatasetTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvalAtom" ):
                listener.enterEvalAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvalAtom" ):
                listener.exitEvalAtom(self)


    class CastExprDatasetContext(GenericOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.GenericOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(Parser.CAST, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def basicScalarType(self):
            return self.getTypedRuleContext(Parser.BasicScalarTypeContext,0)

        def valueDomainName(self):
            return self.getTypedRuleContext(Parser.ValueDomainNameContext,0)

        def STRING_CONSTANT(self):
            return self.getToken(Parser.STRING_CONSTANT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExprDataset" ):
                listener.enterCastExprDataset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExprDataset" ):
                listener.exitCastExprDataset(self)


    class CallDatasetContext(GenericOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.GenericOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def operatorID(self):
            return self.getTypedRuleContext(Parser.OperatorIDContext,0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ParameterContext)
            else:
                return self.getTypedRuleContext(Parser.ParameterContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallDataset" ):
                listener.enterCallDataset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallDataset" ):
                listener.exitCallDataset(self)



    def genericOperators(self):

        localctx = Parser.GenericOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_genericOperators)
        self._la = 0 # Token type
        try:
            self.state = 580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.IDENTIFIER]:
                localctx = Parser.CallDatasetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 523
                self.operatorID()
                self.state = 524
                self.match(Parser.LPAREN)
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Parser.LPAREN) | (1 << Parser.PLUS) | (1 << Parser.MINUS) | (1 << Parser.EVAL) | (1 << Parser.IF) | (1 << Parser.CASE) | (1 << Parser.CURRENT_DATE) | (1 << Parser.DATEDIFF) | (1 << Parser.DATEADD) | (1 << Parser.YEAR_OP) | (1 << Parser.MONTH_OP) | (1 << Parser.DAYOFMONTH) | (1 << Parser.DAYOFYEAR) | (1 << Parser.DAYTOYEAR) | (1 << Parser.DAYTOMONTH) | (1 << Parser.YEARTODAY) | (1 << Parser.MONTHTODAY) | (1 << Parser.NOT) | (1 << Parser.BETWEEN) | (1 << Parser.NULL_CONSTANT) | (1 << Parser.ISNULL) | (1 << Parser.UNION) | (1 << Parser.SYMDIFF) | (1 << Parser.INTERSECT) | (1 << Parser.RANDOM))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Parser.CHECK - 66)) | (1 << (Parser.EXISTS_IN - 66)) | (1 << (Parser.MIN - 66)) | (1 << (Parser.MAX - 66)) | (1 << (Parser.ABS - 66)) | (1 << (Parser.LN - 66)) | (1 << (Parser.LOG - 66)) | (1 << (Parser.TRUNC - 66)) | (1 << (Parser.ROUND - 66)) | (1 << (Parser.POWER - 66)) | (1 << (Parser.MOD - 66)) | (1 << (Parser.LEN - 66)) | (1 << (Parser.TRIM - 66)) | (1 << (Parser.UCASE - 66)) | (1 << (Parser.LCASE - 66)) | (1 << (Parser.SUBSTR - 66)) | (1 << (Parser.SUM - 66)) | (1 << (Parser.AVG - 66)) | (1 << (Parser.MEDIAN - 66)) | (1 << (Parser.COUNT - 66)) | (1 << (Parser.EXP - 66)) | (1 << (Parser.CHARSET_MATCH - 66)) | (1 << (Parser.NVL - 66)) | (1 << (Parser.HIERARCHY - 66)) | (1 << (Parser.OPTIONAL - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Parser.LTRIM - 131)) | (1 << (Parser.RTRIM - 131)) | (1 << (Parser.INSTR - 131)) | (1 << (Parser.REPLACE - 131)) | (1 << (Parser.CEIL - 131)) | (1 << (Parser.FLOOR - 131)) | (1 << (Parser.SQRT - 131)) | (1 << (Parser.SETDIFF - 131)) | (1 << (Parser.STDDEV_POP - 131)) | (1 << (Parser.STDDEV_SAMP - 131)) | (1 << (Parser.VAR_POP - 131)) | (1 << (Parser.VAR_SAMP - 131)) | (1 << (Parser.FIRST_VALUE - 131)) | (1 << (Parser.LAST_VALUE - 131)) | (1 << (Parser.LAG - 131)) | (1 << (Parser.LEAD - 131)) | (1 << (Parser.RATIO_TO_REPORT - 131)) | (1 << (Parser.FILL_TIME_SERIES - 131)) | (1 << (Parser.FLOW_TO_STOCK - 131)) | (1 << (Parser.STOCK_TO_FLOW - 131)) | (1 << (Parser.TIMESHIFT - 131)) | (1 << (Parser.INNER_JOIN - 131)) | (1 << (Parser.LEFT_JOIN - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Parser.CROSS_JOIN - 195)) | (1 << (Parser.FULL_JOIN - 195)) | (1 << (Parser.PERIOD_INDICATOR - 195)) | (1 << (Parser.TIME_AGG - 195)) | (1 << (Parser.CAST - 195)) | (1 << (Parser.CHECK_DATAPOINT - 195)) | (1 << (Parser.CHECK_HIERARCHY - 195)) | (1 << (Parser.INTEGER_CONSTANT - 195)) | (1 << (Parser.NUMBER_CONSTANT - 195)) | (1 << (Parser.BOOLEAN_CONSTANT - 195)) | (1 << (Parser.STRING_CONSTANT - 195)) | (1 << (Parser.IDENTIFIER - 195)))) != 0):
                    self.state = 525
                    self.parameter()
                    self.state = 530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==Parser.COMMA:
                        self.state = 526
                        self.match(Parser.COMMA)
                        self.state = 527
                        self.parameter()
                        self.state = 532
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 535
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.EVAL]:
                localctx = Parser.EvalAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                self.match(Parser.EVAL)
                self.state = 538
                self.match(Parser.LPAREN)
                self.state = 539
                self.routineName()
                self.state = 540
                self.match(Parser.LPAREN)
                self.state = 543
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Parser.IDENTIFIER]:
                    self.state = 541
                    self.varID()
                    pass
                elif token in [Parser.NULL_CONSTANT, Parser.CAST, Parser.INTEGER_CONSTANT, Parser.NUMBER_CONSTANT, Parser.BOOLEAN_CONSTANT, Parser.STRING_CONSTANT]:
                    self.state = 542
                    self.scalarItem()
                    pass
                elif token in [Parser.RPAREN, Parser.COMMA]:
                    pass
                else:
                    pass
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Parser.COMMA:
                    self.state = 545
                    self.match(Parser.COMMA)
                    self.state = 548
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Parser.IDENTIFIER]:
                        self.state = 546
                        self.varID()
                        pass
                    elif token in [Parser.NULL_CONSTANT, Parser.CAST, Parser.INTEGER_CONSTANT, Parser.NUMBER_CONSTANT, Parser.BOOLEAN_CONSTANT, Parser.STRING_CONSTANT]:
                        self.state = 547
                        self.scalarItem()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 555
                self.match(Parser.RPAREN)
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.LANGUAGE:
                    self.state = 556
                    self.match(Parser.LANGUAGE)
                    self.state = 557
                    self.match(Parser.STRING_CONSTANT)


                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.RETURNS:
                    self.state = 560
                    self.match(Parser.RETURNS)
                    self.state = 561
                    self.evalDatasetType()


                self.state = 564
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CAST]:
                localctx = Parser.CastExprDatasetContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 566
                self.match(Parser.CAST)
                self.state = 567
                self.match(Parser.LPAREN)
                self.state = 568
                self.expr(0)
                self.state = 569
                self.match(Parser.COMMA)
                self.state = 572
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Parser.BOOLEAN, Parser.DATE, Parser.TIME_PERIOD, Parser.NUMBER, Parser.STRING, Parser.TIME, Parser.INTEGER, Parser.DURATION, Parser.SCALAR]:
                    self.state = 570
                    self.basicScalarType()
                    pass
                elif token in [Parser.IDENTIFIER]:
                    self.state = 571
                    self.valueDomainName()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 574
                    self.match(Parser.COMMA)
                    self.state = 575
                    self.match(Parser.STRING_CONSTANT)


                self.state = 578
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericOperatorsComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_genericOperatorsComponent

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class EvalAtomComponentContext(GenericOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.GenericOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EVAL(self):
            return self.getToken(Parser.EVAL, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)
        def routineName(self):
            return self.getTypedRuleContext(Parser.RoutineNameContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)
        def componentID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext,i)

        def scalarItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ScalarItemContext)
            else:
                return self.getTypedRuleContext(Parser.ScalarItemContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def LANGUAGE(self):
            return self.getToken(Parser.LANGUAGE, 0)
        def STRING_CONSTANT(self):
            return self.getToken(Parser.STRING_CONSTANT, 0)
        def RETURNS(self):
            return self.getToken(Parser.RETURNS, 0)
        def outputParameterTypeComponent(self):
            return self.getTypedRuleContext(Parser.OutputParameterTypeComponentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvalAtomComponent" ):
                listener.enterEvalAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvalAtomComponent" ):
                listener.exitEvalAtomComponent(self)


    class CastExprComponentContext(GenericOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.GenericOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(Parser.CAST, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def basicScalarType(self):
            return self.getTypedRuleContext(Parser.BasicScalarTypeContext,0)

        def valueDomainName(self):
            return self.getTypedRuleContext(Parser.ValueDomainNameContext,0)

        def STRING_CONSTANT(self):
            return self.getToken(Parser.STRING_CONSTANT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExprComponent" ):
                listener.enterCastExprComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExprComponent" ):
                listener.exitCastExprComponent(self)


    class CallComponentContext(GenericOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.GenericOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def operatorID(self):
            return self.getTypedRuleContext(Parser.OperatorIDContext,0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def parameterComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ParameterComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ParameterComponentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallComponent" ):
                listener.enterCallComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallComponent" ):
                listener.exitCallComponent(self)



    def genericOperatorsComponent(self):

        localctx = Parser.GenericOperatorsComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_genericOperatorsComponent)
        self._la = 0 # Token type
        try:
            self.state = 639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.IDENTIFIER]:
                localctx = Parser.CallComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 582
                self.operatorID()
                self.state = 583
                self.match(Parser.LPAREN)
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Parser.LPAREN) | (1 << Parser.PLUS) | (1 << Parser.MINUS) | (1 << Parser.EVAL) | (1 << Parser.IF) | (1 << Parser.CURRENT_DATE) | (1 << Parser.DATEDIFF) | (1 << Parser.DATEADD) | (1 << Parser.YEAR_OP) | (1 << Parser.MONTH_OP) | (1 << Parser.DAYOFMONTH) | (1 << Parser.DAYOFYEAR) | (1 << Parser.DAYTOYEAR) | (1 << Parser.DAYTOMONTH) | (1 << Parser.YEARTODAY) | (1 << Parser.MONTHTODAY) | (1 << Parser.NOT) | (1 << Parser.BETWEEN) | (1 << Parser.NULL_CONSTANT) | (1 << Parser.ISNULL) | (1 << Parser.RANDOM))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (Parser.RANK - 77)) | (1 << (Parser.MIN - 77)) | (1 << (Parser.MAX - 77)) | (1 << (Parser.ABS - 77)) | (1 << (Parser.LN - 77)) | (1 << (Parser.LOG - 77)) | (1 << (Parser.TRUNC - 77)) | (1 << (Parser.ROUND - 77)) | (1 << (Parser.POWER - 77)) | (1 << (Parser.MOD - 77)) | (1 << (Parser.LEN - 77)) | (1 << (Parser.TRIM - 77)) | (1 << (Parser.UCASE - 77)) | (1 << (Parser.LCASE - 77)) | (1 << (Parser.SUBSTR - 77)) | (1 << (Parser.SUM - 77)) | (1 << (Parser.AVG - 77)) | (1 << (Parser.MEDIAN - 77)) | (1 << (Parser.COUNT - 77)) | (1 << (Parser.EXP - 77)) | (1 << (Parser.CHARSET_MATCH - 77)) | (1 << (Parser.NVL - 77)) | (1 << (Parser.OPTIONAL - 77)) | (1 << (Parser.LTRIM - 77)) | (1 << (Parser.RTRIM - 77)) | (1 << (Parser.INSTR - 77)) | (1 << (Parser.REPLACE - 77)) | (1 << (Parser.CEIL - 77)) | (1 << (Parser.FLOOR - 77)) | (1 << (Parser.SQRT - 77)) | (1 << (Parser.STDDEV_POP - 77)))) != 0) or ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & ((1 << (Parser.STDDEV_SAMP - 141)) | (1 << (Parser.VAR_POP - 141)) | (1 << (Parser.VAR_SAMP - 141)) | (1 << (Parser.FIRST_VALUE - 141)) | (1 << (Parser.LAST_VALUE - 141)) | (1 << (Parser.LAG - 141)) | (1 << (Parser.LEAD - 141)) | (1 << (Parser.RATIO_TO_REPORT - 141)) | (1 << (Parser.FILL_TIME_SERIES - 141)) | (1 << (Parser.FLOW_TO_STOCK - 141)) | (1 << (Parser.STOCK_TO_FLOW - 141)) | (1 << (Parser.TIMESHIFT - 141)))) != 0) or ((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & ((1 << (Parser.PERIOD_INDICATOR - 208)) | (1 << (Parser.TIME_AGG - 208)) | (1 << (Parser.CAST - 208)) | (1 << (Parser.INTEGER_CONSTANT - 208)) | (1 << (Parser.NUMBER_CONSTANT - 208)) | (1 << (Parser.BOOLEAN_CONSTANT - 208)) | (1 << (Parser.STRING_CONSTANT - 208)) | (1 << (Parser.IDENTIFIER - 208)))) != 0):
                    self.state = 584
                    self.parameterComponent()
                    self.state = 589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==Parser.COMMA:
                        self.state = 585
                        self.match(Parser.COMMA)
                        self.state = 586
                        self.parameterComponent()
                        self.state = 591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 594
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CAST]:
                localctx = Parser.CastExprComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                self.match(Parser.CAST)
                self.state = 597
                self.match(Parser.LPAREN)
                self.state = 598
                self.exprComponent(0)
                self.state = 599
                self.match(Parser.COMMA)
                self.state = 602
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Parser.BOOLEAN, Parser.DATE, Parser.TIME_PERIOD, Parser.NUMBER, Parser.STRING, Parser.TIME, Parser.INTEGER, Parser.DURATION, Parser.SCALAR]:
                    self.state = 600
                    self.basicScalarType()
                    pass
                elif token in [Parser.IDENTIFIER]:
                    self.state = 601
                    self.valueDomainName()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 604
                    self.match(Parser.COMMA)
                    self.state = 605
                    self.match(Parser.STRING_CONSTANT)


                self.state = 608
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.EVAL]:
                localctx = Parser.EvalAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 610
                self.match(Parser.EVAL)
                self.state = 611
                self.match(Parser.LPAREN)
                self.state = 612
                self.routineName()
                self.state = 613
                self.match(Parser.LPAREN)
                self.state = 616
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Parser.IDENTIFIER]:
                    self.state = 614
                    self.componentID()
                    pass
                elif token in [Parser.NULL_CONSTANT, Parser.CAST, Parser.INTEGER_CONSTANT, Parser.NUMBER_CONSTANT, Parser.BOOLEAN_CONSTANT, Parser.STRING_CONSTANT]:
                    self.state = 615
                    self.scalarItem()
                    pass
                elif token in [Parser.RPAREN, Parser.COMMA]:
                    pass
                else:
                    pass
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Parser.COMMA:
                    self.state = 618
                    self.match(Parser.COMMA)
                    self.state = 621
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Parser.IDENTIFIER]:
                        self.state = 619
                        self.componentID()
                        pass
                    elif token in [Parser.NULL_CONSTANT, Parser.CAST, Parser.INTEGER_CONSTANT, Parser.NUMBER_CONSTANT, Parser.BOOLEAN_CONSTANT, Parser.STRING_CONSTANT]:
                        self.state = 620
                        self.scalarItem()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 628
                self.match(Parser.RPAREN)
                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.LANGUAGE:
                    self.state = 629
                    self.match(Parser.LANGUAGE)
                    self.state = 630
                    self.match(Parser.STRING_CONSTANT)


                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.RETURNS:
                    self.state = 633
                    self.match(Parser.RETURNS)
                    self.state = 634
                    self.outputParameterTypeComponent()


                self.state = 637
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)


        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def getRuleIndex(self):
            return Parser.RULE_parameterComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterComponent" ):
                listener.enterParameterComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterComponent" ):
                listener.exitParameterComponent(self)




    def parameterComponent(self):

        localctx = Parser.ParameterComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_parameterComponent)
        try:
            self.state = 643
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.LPAREN, Parser.PLUS, Parser.MINUS, Parser.EVAL, Parser.IF, Parser.CURRENT_DATE, Parser.DATEDIFF, Parser.DATEADD, Parser.YEAR_OP, Parser.MONTH_OP, Parser.DAYOFMONTH, Parser.DAYOFYEAR, Parser.DAYTOYEAR, Parser.DAYTOMONTH, Parser.YEARTODAY, Parser.MONTHTODAY, Parser.NOT, Parser.BETWEEN, Parser.NULL_CONSTANT, Parser.ISNULL, Parser.RANDOM, Parser.RANK, Parser.MIN, Parser.MAX, Parser.ABS, Parser.LN, Parser.LOG, Parser.TRUNC, Parser.ROUND, Parser.POWER, Parser.MOD, Parser.LEN, Parser.TRIM, Parser.UCASE, Parser.LCASE, Parser.SUBSTR, Parser.SUM, Parser.AVG, Parser.MEDIAN, Parser.COUNT, Parser.EXP, Parser.CHARSET_MATCH, Parser.NVL, Parser.LTRIM, Parser.RTRIM, Parser.INSTR, Parser.REPLACE, Parser.CEIL, Parser.FLOOR, Parser.SQRT, Parser.STDDEV_POP, Parser.STDDEV_SAMP, Parser.VAR_POP, Parser.VAR_SAMP, Parser.FIRST_VALUE, Parser.LAST_VALUE, Parser.LAG, Parser.LEAD, Parser.RATIO_TO_REPORT, Parser.FILL_TIME_SERIES, Parser.FLOW_TO_STOCK, Parser.STOCK_TO_FLOW, Parser.TIMESHIFT, Parser.PERIOD_INDICATOR, Parser.TIME_AGG, Parser.CAST, Parser.INTEGER_CONSTANT, Parser.NUMBER_CONSTANT, Parser.BOOLEAN_CONSTANT, Parser.STRING_CONSTANT, Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 641
                self.exprComponent(0)
                pass
            elif token in [Parser.OPTIONAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 642
                self.match(Parser.OPTIONAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)


        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def getRuleIndex(self):
            return Parser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = Parser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_parameter)
        try:
            self.state = 647
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.LPAREN, Parser.PLUS, Parser.MINUS, Parser.EVAL, Parser.IF, Parser.CASE, Parser.CURRENT_DATE, Parser.DATEDIFF, Parser.DATEADD, Parser.YEAR_OP, Parser.MONTH_OP, Parser.DAYOFMONTH, Parser.DAYOFYEAR, Parser.DAYTOYEAR, Parser.DAYTOMONTH, Parser.YEARTODAY, Parser.MONTHTODAY, Parser.NOT, Parser.BETWEEN, Parser.NULL_CONSTANT, Parser.ISNULL, Parser.UNION, Parser.SYMDIFF, Parser.INTERSECT, Parser.RANDOM, Parser.CHECK, Parser.EXISTS_IN, Parser.MIN, Parser.MAX, Parser.ABS, Parser.LN, Parser.LOG, Parser.TRUNC, Parser.ROUND, Parser.POWER, Parser.MOD, Parser.LEN, Parser.TRIM, Parser.UCASE, Parser.LCASE, Parser.SUBSTR, Parser.SUM, Parser.AVG, Parser.MEDIAN, Parser.COUNT, Parser.EXP, Parser.CHARSET_MATCH, Parser.NVL, Parser.HIERARCHY, Parser.LTRIM, Parser.RTRIM, Parser.INSTR, Parser.REPLACE, Parser.CEIL, Parser.FLOOR, Parser.SQRT, Parser.SETDIFF, Parser.STDDEV_POP, Parser.STDDEV_SAMP, Parser.VAR_POP, Parser.VAR_SAMP, Parser.FIRST_VALUE, Parser.LAST_VALUE, Parser.LAG, Parser.LEAD, Parser.RATIO_TO_REPORT, Parser.FILL_TIME_SERIES, Parser.FLOW_TO_STOCK, Parser.STOCK_TO_FLOW, Parser.TIMESHIFT, Parser.INNER_JOIN, Parser.LEFT_JOIN, Parser.CROSS_JOIN, Parser.FULL_JOIN, Parser.PERIOD_INDICATOR, Parser.TIME_AGG, Parser.CAST, Parser.CHECK_DATAPOINT, Parser.CHECK_HIERARCHY, Parser.INTEGER_CONSTANT, Parser.NUMBER_CONSTANT, Parser.BOOLEAN_CONSTANT, Parser.STRING_CONSTANT, Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 645
                self.expr(0)
                pass
            elif token in [Parser.OPTIONAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 646
                self.match(Parser.OPTIONAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_stringOperators

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InstrAtomContext(StringOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.StringOperatorsContext
            super().__init__(parser)
            self.pattern = None # ExprContext
            self.startParameter = None # OptionalExprContext
            self.occurrenceParameter = None # OptionalExprContext
            self.copyFrom(ctx)

        def INSTR(self):
            return self.getToken(Parser.INSTR, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def optionalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.OptionalExprContext)
            else:
                return self.getTypedRuleContext(Parser.OptionalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstrAtom" ):
                listener.enterInstrAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstrAtom" ):
                listener.exitInstrAtom(self)


    class UnaryStringFunctionContext(StringOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.StringOperatorsContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def TRIM(self):
            return self.getToken(Parser.TRIM, 0)
        def LTRIM(self):
            return self.getToken(Parser.LTRIM, 0)
        def RTRIM(self):
            return self.getToken(Parser.RTRIM, 0)
        def UCASE(self):
            return self.getToken(Parser.UCASE, 0)
        def LCASE(self):
            return self.getToken(Parser.LCASE, 0)
        def LEN(self):
            return self.getToken(Parser.LEN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryStringFunction" ):
                listener.enterUnaryStringFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryStringFunction" ):
                listener.exitUnaryStringFunction(self)


    class SubstrAtomContext(StringOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.StringOperatorsContext
            super().__init__(parser)
            self.startParameter = None # OptionalExprContext
            self.endParameter = None # OptionalExprContext
            self.copyFrom(ctx)

        def SUBSTR(self):
            return self.getToken(Parser.SUBSTR, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def optionalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.OptionalExprContext)
            else:
                return self.getTypedRuleContext(Parser.OptionalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstrAtom" ):
                listener.enterSubstrAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstrAtom" ):
                listener.exitSubstrAtom(self)


    class ReplaceAtomContext(StringOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.StringOperatorsContext
            super().__init__(parser)
            self.param = None # ExprContext
            self.copyFrom(ctx)

        def REPLACE(self):
            return self.getToken(Parser.REPLACE, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def optionalExpr(self):
            return self.getTypedRuleContext(Parser.OptionalExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceAtom" ):
                listener.enterReplaceAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceAtom" ):
                listener.exitReplaceAtom(self)



    def stringOperators(self):

        localctx = Parser.StringOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_stringOperators)
        self._la = 0 # Token type
        try:
            self.state = 697
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.LEN, Parser.TRIM, Parser.UCASE, Parser.LCASE, Parser.LTRIM, Parser.RTRIM]:
                localctx = Parser.UnaryStringFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 649
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (Parser.LEN - 93)) | (1 << (Parser.TRIM - 93)) | (1 << (Parser.UCASE - 93)) | (1 << (Parser.LCASE - 93)) | (1 << (Parser.LTRIM - 93)) | (1 << (Parser.RTRIM - 93)))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 650
                self.match(Parser.LPAREN)
                self.state = 651
                self.expr(0)
                self.state = 652
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.SUBSTR]:
                localctx = Parser.SubstrAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 654
                self.match(Parser.SUBSTR)
                self.state = 655
                self.match(Parser.LPAREN)
                self.state = 656
                self.expr(0)
                self.state = 667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Parser.COMMA:
                        self.state = 657
                        self.match(Parser.COMMA)
                        self.state = 658
                        localctx.startParameter = self.optionalExpr()

                        self.state = 660
                        self.match(Parser.COMMA)
                        self.state = 661
                        localctx.endParameter = self.optionalExpr()


                    pass

                elif la_ == 2:
                    self.state = 665
                    self.match(Parser.COMMA)
                    self.state = 666
                    localctx.startParameter = self.optionalExpr()
                    pass


                self.state = 669
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.REPLACE]:
                localctx = Parser.ReplaceAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 671
                self.match(Parser.REPLACE)
                self.state = 672
                self.match(Parser.LPAREN)
                self.state = 673
                self.expr(0)
                self.state = 674
                self.match(Parser.COMMA)
                self.state = 675
                localctx.param = self.expr(0)
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 676
                    self.match(Parser.COMMA)
                    self.state = 677
                    self.optionalExpr()


                self.state = 680
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.INSTR]:
                localctx = Parser.InstrAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 682
                self.match(Parser.INSTR)
                self.state = 683
                self.match(Parser.LPAREN)
                self.state = 684
                self.expr(0)
                self.state = 685
                self.match(Parser.COMMA)
                self.state = 686
                localctx.pattern = self.expr(0)
                self.state = 689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 687
                    self.match(Parser.COMMA)
                    self.state = 688
                    localctx.startParameter = self.optionalExpr()


                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 691
                    self.match(Parser.COMMA)
                    self.state = 692
                    localctx.occurrenceParameter = self.optionalExpr()


                self.state = 695
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringOperatorsComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_stringOperatorsComponent

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ReplaceAtomComponentContext(StringOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.StringOperatorsComponentContext
            super().__init__(parser)
            self.param = None # ExprComponentContext
            self.copyFrom(ctx)

        def REPLACE(self):
            return self.getToken(Parser.REPLACE, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def exprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def optionalExprComponent(self):
            return self.getTypedRuleContext(Parser.OptionalExprComponentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceAtomComponent" ):
                listener.enterReplaceAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceAtomComponent" ):
                listener.exitReplaceAtomComponent(self)


    class UnaryStringFunctionComponentContext(StringOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.StringOperatorsComponentContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def TRIM(self):
            return self.getToken(Parser.TRIM, 0)
        def LTRIM(self):
            return self.getToken(Parser.LTRIM, 0)
        def RTRIM(self):
            return self.getToken(Parser.RTRIM, 0)
        def UCASE(self):
            return self.getToken(Parser.UCASE, 0)
        def LCASE(self):
            return self.getToken(Parser.LCASE, 0)
        def LEN(self):
            return self.getToken(Parser.LEN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryStringFunctionComponent" ):
                listener.enterUnaryStringFunctionComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryStringFunctionComponent" ):
                listener.exitUnaryStringFunctionComponent(self)


    class SubstrAtomComponentContext(StringOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.StringOperatorsComponentContext
            super().__init__(parser)
            self.startParameter = None # OptionalExprComponentContext
            self.endParameter = None # OptionalExprComponentContext
            self.copyFrom(ctx)

        def SUBSTR(self):
            return self.getToken(Parser.SUBSTR, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def optionalExprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.OptionalExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.OptionalExprComponentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstrAtomComponent" ):
                listener.enterSubstrAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstrAtomComponent" ):
                listener.exitSubstrAtomComponent(self)


    class InstrAtomComponentContext(StringOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.StringOperatorsComponentContext
            super().__init__(parser)
            self.pattern = None # ExprComponentContext
            self.startParameter = None # OptionalExprComponentContext
            self.occurrenceParameter = None # OptionalExprComponentContext
            self.copyFrom(ctx)

        def INSTR(self):
            return self.getToken(Parser.INSTR, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def exprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def optionalExprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.OptionalExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.OptionalExprComponentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstrAtomComponent" ):
                listener.enterInstrAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstrAtomComponent" ):
                listener.exitInstrAtomComponent(self)



    def stringOperatorsComponent(self):

        localctx = Parser.StringOperatorsComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_stringOperatorsComponent)
        self._la = 0 # Token type
        try:
            self.state = 747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.LEN, Parser.TRIM, Parser.UCASE, Parser.LCASE, Parser.LTRIM, Parser.RTRIM]:
                localctx = Parser.UnaryStringFunctionComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (Parser.LEN - 93)) | (1 << (Parser.TRIM - 93)) | (1 << (Parser.UCASE - 93)) | (1 << (Parser.LCASE - 93)) | (1 << (Parser.LTRIM - 93)) | (1 << (Parser.RTRIM - 93)))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 700
                self.match(Parser.LPAREN)
                self.state = 701
                self.exprComponent(0)
                self.state = 702
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.SUBSTR]:
                localctx = Parser.SubstrAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 704
                self.match(Parser.SUBSTR)
                self.state = 705
                self.match(Parser.LPAREN)
                self.state = 706
                self.exprComponent(0)
                self.state = 717
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Parser.COMMA:
                        self.state = 707
                        self.match(Parser.COMMA)
                        self.state = 708
                        localctx.startParameter = self.optionalExprComponent()

                        self.state = 710
                        self.match(Parser.COMMA)
                        self.state = 711
                        localctx.endParameter = self.optionalExprComponent()


                    pass

                elif la_ == 2:
                    self.state = 715
                    self.match(Parser.COMMA)
                    self.state = 716
                    localctx.startParameter = self.optionalExprComponent()
                    pass


                self.state = 719
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.REPLACE]:
                localctx = Parser.ReplaceAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 721
                self.match(Parser.REPLACE)
                self.state = 722
                self.match(Parser.LPAREN)
                self.state = 723
                self.exprComponent(0)
                self.state = 724
                self.match(Parser.COMMA)
                self.state = 725
                localctx.param = self.exprComponent(0)
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 726
                    self.match(Parser.COMMA)
                    self.state = 727
                    self.optionalExprComponent()


                self.state = 730
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.INSTR]:
                localctx = Parser.InstrAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 732
                self.match(Parser.INSTR)
                self.state = 733
                self.match(Parser.LPAREN)
                self.state = 734
                self.exprComponent(0)
                self.state = 735
                self.match(Parser.COMMA)
                self.state = 736
                localctx.pattern = self.exprComponent(0)
                self.state = 739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 737
                    self.match(Parser.COMMA)
                    self.state = 738
                    localctx.startParameter = self.optionalExprComponent()


                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 741
                    self.match(Parser.COMMA)
                    self.state = 742
                    localctx.occurrenceParameter = self.optionalExprComponent()


                self.state = 745
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_numericOperators

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnaryNumericContext(NumericOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.NumericOperatorsContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def CEIL(self):
            return self.getToken(Parser.CEIL, 0)
        def FLOOR(self):
            return self.getToken(Parser.FLOOR, 0)
        def ABS(self):
            return self.getToken(Parser.ABS, 0)
        def EXP(self):
            return self.getToken(Parser.EXP, 0)
        def LN(self):
            return self.getToken(Parser.LN, 0)
        def SQRT(self):
            return self.getToken(Parser.SQRT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryNumeric" ):
                listener.enterUnaryNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryNumeric" ):
                listener.exitUnaryNumeric(self)


    class UnaryWithOptionalNumericContext(NumericOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.NumericOperatorsContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def ROUND(self):
            return self.getToken(Parser.ROUND, 0)
        def TRUNC(self):
            return self.getToken(Parser.TRUNC, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def optionalExpr(self):
            return self.getTypedRuleContext(Parser.OptionalExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryWithOptionalNumeric" ):
                listener.enterUnaryWithOptionalNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryWithOptionalNumeric" ):
                listener.exitUnaryWithOptionalNumeric(self)


    class BinaryNumericContext(NumericOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.NumericOperatorsContext
            super().__init__(parser)
            self.op = None # Token
            self.left = None # ExprContext
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)

        def MOD(self):
            return self.getToken(Parser.MOD, 0)
        def POWER(self):
            return self.getToken(Parser.POWER, 0)
        def LOG(self):
            return self.getToken(Parser.LOG, 0)
        def RANDOM(self):
            return self.getToken(Parser.RANDOM, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryNumeric" ):
                listener.enterBinaryNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryNumeric" ):
                listener.exitBinaryNumeric(self)



    def numericOperators(self):

        localctx = Parser.NumericOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_numericOperators)
        self._la = 0 # Token type
        try:
            self.state = 770
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.ABS, Parser.LN, Parser.EXP, Parser.CEIL, Parser.FLOOR, Parser.SQRT]:
                localctx = Parser.UnaryNumericContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (Parser.ABS - 85)) | (1 << (Parser.LN - 85)) | (1 << (Parser.EXP - 85)) | (1 << (Parser.CEIL - 85)) | (1 << (Parser.FLOOR - 85)) | (1 << (Parser.SQRT - 85)))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 750
                self.match(Parser.LPAREN)
                self.state = 751
                self.expr(0)
                self.state = 752
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.TRUNC, Parser.ROUND]:
                localctx = Parser.UnaryWithOptionalNumericContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 754
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==Parser.TRUNC or _la==Parser.ROUND):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 755
                self.match(Parser.LPAREN)
                self.state = 756
                self.expr(0)
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 757
                    self.match(Parser.COMMA)
                    self.state = 758
                    self.optionalExpr()


                self.state = 761
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.RANDOM, Parser.LOG, Parser.POWER, Parser.MOD]:
                localctx = Parser.BinaryNumericContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 763
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (Parser.RANDOM - 61)) | (1 << (Parser.LOG - 61)) | (1 << (Parser.POWER - 61)) | (1 << (Parser.MOD - 61)))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 764
                self.match(Parser.LPAREN)
                self.state = 765
                localctx.left = self.expr(0)
                self.state = 766
                self.match(Parser.COMMA)
                self.state = 767
                localctx.right = self.expr(0)
                self.state = 768
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericOperatorsComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_numericOperatorsComponent

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnaryNumericComponentContext(NumericOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.NumericOperatorsComponentContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def CEIL(self):
            return self.getToken(Parser.CEIL, 0)
        def FLOOR(self):
            return self.getToken(Parser.FLOOR, 0)
        def ABS(self):
            return self.getToken(Parser.ABS, 0)
        def EXP(self):
            return self.getToken(Parser.EXP, 0)
        def LN(self):
            return self.getToken(Parser.LN, 0)
        def SQRT(self):
            return self.getToken(Parser.SQRT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryNumericComponent" ):
                listener.enterUnaryNumericComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryNumericComponent" ):
                listener.exitUnaryNumericComponent(self)


    class BinaryNumericComponentContext(NumericOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.NumericOperatorsComponentContext
            super().__init__(parser)
            self.op = None # Token
            self.left = None # ExprComponentContext
            self.right = None # ExprComponentContext
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def exprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext,i)

        def MOD(self):
            return self.getToken(Parser.MOD, 0)
        def POWER(self):
            return self.getToken(Parser.POWER, 0)
        def LOG(self):
            return self.getToken(Parser.LOG, 0)
        def RANDOM(self):
            return self.getToken(Parser.RANDOM, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryNumericComponent" ):
                listener.enterBinaryNumericComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryNumericComponent" ):
                listener.exitBinaryNumericComponent(self)


    class UnaryWithOptionalNumericComponentContext(NumericOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.NumericOperatorsComponentContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def ROUND(self):
            return self.getToken(Parser.ROUND, 0)
        def TRUNC(self):
            return self.getToken(Parser.TRUNC, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def optionalExprComponent(self):
            return self.getTypedRuleContext(Parser.OptionalExprComponentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryWithOptionalNumericComponent" ):
                listener.enterUnaryWithOptionalNumericComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryWithOptionalNumericComponent" ):
                listener.exitUnaryWithOptionalNumericComponent(self)



    def numericOperatorsComponent(self):

        localctx = Parser.NumericOperatorsComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_numericOperatorsComponent)
        self._la = 0 # Token type
        try:
            self.state = 793
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.ABS, Parser.LN, Parser.EXP, Parser.CEIL, Parser.FLOOR, Parser.SQRT]:
                localctx = Parser.UnaryNumericComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 772
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (Parser.ABS - 85)) | (1 << (Parser.LN - 85)) | (1 << (Parser.EXP - 85)) | (1 << (Parser.CEIL - 85)) | (1 << (Parser.FLOOR - 85)) | (1 << (Parser.SQRT - 85)))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 773
                self.match(Parser.LPAREN)
                self.state = 774
                self.exprComponent(0)
                self.state = 775
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.TRUNC, Parser.ROUND]:
                localctx = Parser.UnaryWithOptionalNumericComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 777
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==Parser.TRUNC or _la==Parser.ROUND):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 778
                self.match(Parser.LPAREN)
                self.state = 779
                self.exprComponent(0)
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 780
                    self.match(Parser.COMMA)
                    self.state = 781
                    self.optionalExprComponent()


                self.state = 784
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.RANDOM, Parser.LOG, Parser.POWER, Parser.MOD]:
                localctx = Parser.BinaryNumericComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 786
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (Parser.RANDOM - 61)) | (1 << (Parser.LOG - 61)) | (1 << (Parser.POWER - 61)) | (1 << (Parser.MOD - 61)))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 787
                self.match(Parser.LPAREN)
                self.state = 788
                localctx.left = self.exprComponent(0)
                self.state = 789
                self.match(Parser.COMMA)
                self.state = 790
                localctx.right = self.exprComponent(0)
                self.state = 791
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_comparisonOperators

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BetweenAtomContext(ComparisonOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ComparisonOperatorsContext
            super().__init__(parser)
            self.op = None # ExprContext
            self.from_ = None # ExprContext
            self.to_ = None # ExprContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(Parser.BETWEEN, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenAtom" ):
                listener.enterBetweenAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenAtom" ):
                listener.exitBetweenAtom(self)


    class CharsetMatchAtomContext(ComparisonOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ComparisonOperatorsContext
            super().__init__(parser)
            self.op = None # ExprContext
            self.pattern = None # ExprContext
            self.copyFrom(ctx)

        def CHARSET_MATCH(self):
            return self.getToken(Parser.CHARSET_MATCH, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetMatchAtom" ):
                listener.enterCharsetMatchAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetMatchAtom" ):
                listener.exitCharsetMatchAtom(self)


    class IsNullAtomContext(ComparisonOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ComparisonOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISNULL(self):
            return self.getToken(Parser.ISNULL, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullAtom" ):
                listener.enterIsNullAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullAtom" ):
                listener.exitIsNullAtom(self)


    class ExistInAtomContext(ComparisonOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ComparisonOperatorsContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def EXISTS_IN(self):
            return self.getToken(Parser.EXISTS_IN, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)

        def retainType(self):
            return self.getTypedRuleContext(Parser.RetainTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistInAtom" ):
                listener.enterExistInAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistInAtom" ):
                listener.exitExistInAtom(self)



    def comparisonOperators(self):

        localctx = Parser.ComparisonOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_comparisonOperators)
        self._la = 0 # Token type
        try:
            self.state = 827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.BETWEEN]:
                localctx = Parser.BetweenAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 795
                self.match(Parser.BETWEEN)
                self.state = 796
                self.match(Parser.LPAREN)
                self.state = 797
                localctx.op = self.expr(0)
                self.state = 798
                self.match(Parser.COMMA)
                self.state = 799
                localctx.from_ = self.expr(0)
                self.state = 800
                self.match(Parser.COMMA)
                self.state = 801
                localctx.to_ = self.expr(0)
                self.state = 802
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CHARSET_MATCH]:
                localctx = Parser.CharsetMatchAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.match(Parser.CHARSET_MATCH)
                self.state = 805
                self.match(Parser.LPAREN)
                self.state = 806
                localctx.op = self.expr(0)
                self.state = 807
                self.match(Parser.COMMA)
                self.state = 808
                localctx.pattern = self.expr(0)
                self.state = 809
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.ISNULL]:
                localctx = Parser.IsNullAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 811
                self.match(Parser.ISNULL)
                self.state = 812
                self.match(Parser.LPAREN)
                self.state = 813
                self.expr(0)
                self.state = 814
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.EXISTS_IN]:
                localctx = Parser.ExistInAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 816
                self.match(Parser.EXISTS_IN)
                self.state = 817
                self.match(Parser.LPAREN)
                self.state = 818
                localctx.left = self.expr(0)
                self.state = 819
                self.match(Parser.COMMA)
                self.state = 820
                localctx.right = self.expr(0)
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 821
                    self.match(Parser.COMMA)
                    self.state = 822
                    self.retainType()


                self.state = 825
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorsComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_comparisonOperatorsComponent

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IsNullAtomComponentContext(ComparisonOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ComparisonOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISNULL(self):
            return self.getToken(Parser.ISNULL, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullAtomComponent" ):
                listener.enterIsNullAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullAtomComponent" ):
                listener.exitIsNullAtomComponent(self)


    class CharsetMatchAtomComponentContext(ComparisonOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ComparisonOperatorsComponentContext
            super().__init__(parser)
            self.op = None # ExprComponentContext
            self.pattern = None # ExprComponentContext
            self.copyFrom(ctx)

        def CHARSET_MATCH(self):
            return self.getToken(Parser.CHARSET_MATCH, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def exprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetMatchAtomComponent" ):
                listener.enterCharsetMatchAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetMatchAtomComponent" ):
                listener.exitCharsetMatchAtomComponent(self)


    class BetweenAtomComponentContext(ComparisonOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ComparisonOperatorsComponentContext
            super().__init__(parser)
            self.op = None # ExprComponentContext
            self.from_ = None # ExprComponentContext
            self.to_ = None # ExprComponentContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(Parser.BETWEEN, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def exprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenAtomComponent" ):
                listener.enterBetweenAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenAtomComponent" ):
                listener.exitBetweenAtomComponent(self)



    def comparisonOperatorsComponent(self):

        localctx = Parser.ComparisonOperatorsComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_comparisonOperatorsComponent)
        try:
            self.state = 850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.BETWEEN]:
                localctx = Parser.BetweenAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 829
                self.match(Parser.BETWEEN)
                self.state = 830
                self.match(Parser.LPAREN)
                self.state = 831
                localctx.op = self.exprComponent(0)
                self.state = 832
                self.match(Parser.COMMA)
                self.state = 833
                localctx.from_ = self.exprComponent(0)
                self.state = 834
                self.match(Parser.COMMA)
                self.state = 835
                localctx.to_ = self.exprComponent(0)
                self.state = 836
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CHARSET_MATCH]:
                localctx = Parser.CharsetMatchAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 838
                self.match(Parser.CHARSET_MATCH)
                self.state = 839
                self.match(Parser.LPAREN)
                self.state = 840
                localctx.op = self.exprComponent(0)
                self.state = 841
                self.match(Parser.COMMA)
                self.state = 842
                localctx.pattern = self.exprComponent(0)
                self.state = 843
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.ISNULL]:
                localctx = Parser.IsNullAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 845
                self.match(Parser.ISNULL)
                self.state = 846
                self.match(Parser.LPAREN)
                self.state = 847
                self.exprComponent(0)
                self.state = 848
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_timeOperators

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DayToYearAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DAYTOYEAR(self):
            return self.getToken(Parser.DAYTOYEAR, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDayToYearAtom" ):
                listener.enterDayToYearAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDayToYearAtom" ):
                listener.exitDayToYearAtom(self)


    class YearAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def YEAR_OP(self):
            return self.getToken(Parser.YEAR_OP, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYearAtom" ):
                listener.enterYearAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYearAtom" ):
                listener.exitYearAtom(self)


    class YearTodayAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def YEARTODAY(self):
            return self.getToken(Parser.YEARTODAY, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYearTodayAtom" ):
                listener.enterYearTodayAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYearTodayAtom" ):
                listener.exitYearTodayAtom(self)


    class DayToMonthAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DAYTOMONTH(self):
            return self.getToken(Parser.DAYTOMONTH, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDayToMonthAtom" ):
                listener.enterDayToMonthAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDayToMonthAtom" ):
                listener.exitDayToMonthAtom(self)


    class DatOfYearAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DAYOFYEAR(self):
            return self.getToken(Parser.DAYOFYEAR, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatOfYearAtom" ):
                listener.enterDatOfYearAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatOfYearAtom" ):
                listener.exitDatOfYearAtom(self)


    class PeriodAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERIOD_INDICATOR(self):
            return self.getToken(Parser.PERIOD_INDICATOR, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodAtom" ):
                listener.enterPeriodAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodAtom" ):
                listener.exitPeriodAtom(self)


    class MonthTodayAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MONTHTODAY(self):
            return self.getToken(Parser.MONTHTODAY, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMonthTodayAtom" ):
                listener.enterMonthTodayAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMonthTodayAtom" ):
                listener.exitMonthTodayAtom(self)


    class FillTimeAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FILL_TIME_SERIES(self):
            return self.getToken(Parser.FILL_TIME_SERIES, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def SINGLE(self):
            return self.getToken(Parser.SINGLE, 0)
        def ALL(self):
            return self.getToken(Parser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFillTimeAtom" ):
                listener.enterFillTimeAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFillTimeAtom" ):
                listener.exitFillTimeAtom(self)


    class MonthAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MONTH_OP(self):
            return self.getToken(Parser.MONTH_OP, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMonthAtom" ):
                listener.enterMonthAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMonthAtom" ):
                listener.exitMonthAtom(self)


    class FlowAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def FLOW_TO_STOCK(self):
            return self.getToken(Parser.FLOW_TO_STOCK, 0)
        def STOCK_TO_FLOW(self):
            return self.getToken(Parser.STOCK_TO_FLOW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlowAtom" ):
                listener.enterFlowAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlowAtom" ):
                listener.exitFlowAtom(self)


    class TimeShiftAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESHIFT(self):
            return self.getToken(Parser.TIMESHIFT, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def signedInteger(self):
            return self.getTypedRuleContext(Parser.SignedIntegerContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeShiftAtom" ):
                listener.enterTimeShiftAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeShiftAtom" ):
                listener.exitTimeShiftAtom(self)


    class TimeAggAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.periodIndTo = None # Token
            self.periodIndFrom = None # Token
            self.op = None # OptionalExprContext
            self.copyFrom(ctx)

        def TIME_AGG(self):
            return self.getToken(Parser.TIME_AGG, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def STRING_CONSTANT(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.STRING_CONSTANT)
            else:
                return self.getToken(Parser.STRING_CONSTANT, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def optionalExpr(self):
            return self.getTypedRuleContext(Parser.OptionalExprContext,0)

        def FIRST(self):
            return self.getToken(Parser.FIRST, 0)
        def LAST(self):
            return self.getToken(Parser.LAST, 0)
        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeAggAtom" ):
                listener.enterTimeAggAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeAggAtom" ):
                listener.exitTimeAggAtom(self)


    class DateDiffAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.dateFrom = None # ExprContext
            self.dateTo = None # ExprContext
            self.copyFrom(ctx)

        def DATEDIFF(self):
            return self.getToken(Parser.DATEDIFF, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateDiffAtom" ):
                listener.enterDateDiffAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateDiffAtom" ):
                listener.exitDateDiffAtom(self)


    class DateAddAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.op = None # ExprContext
            self.shiftNumber = None # ExprContext
            self.periodInd = None # ExprContext
            self.copyFrom(ctx)

        def DATEADD(self):
            return self.getToken(Parser.DATEADD, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateAddAtom" ):
                listener.enterDateAddAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateAddAtom" ):
                listener.exitDateAddAtom(self)


    class DayOfMonthAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DAYOFMONTH(self):
            return self.getToken(Parser.DAYOFMONTH, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDayOfMonthAtom" ):
                listener.enterDayOfMonthAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDayOfMonthAtom" ):
                listener.exitDayOfMonthAtom(self)


    class CurrentDateAtomContext(TimeOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(Parser.CURRENT_DATE, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentDateAtom" ):
                listener.enterCurrentDateAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentDateAtom" ):
                listener.exitCurrentDateAtom(self)



    def timeOperators(self):

        localctx = Parser.TimeOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_timeOperators)
        self._la = 0 # Token type
        try:
            self.state = 954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.PERIOD_INDICATOR]:
                localctx = Parser.PeriodAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                self.match(Parser.PERIOD_INDICATOR)
                self.state = 853
                self.match(Parser.LPAREN)
                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Parser.LPAREN) | (1 << Parser.PLUS) | (1 << Parser.MINUS) | (1 << Parser.EVAL) | (1 << Parser.IF) | (1 << Parser.CASE) | (1 << Parser.CURRENT_DATE) | (1 << Parser.DATEDIFF) | (1 << Parser.DATEADD) | (1 << Parser.YEAR_OP) | (1 << Parser.MONTH_OP) | (1 << Parser.DAYOFMONTH) | (1 << Parser.DAYOFYEAR) | (1 << Parser.DAYTOYEAR) | (1 << Parser.DAYTOMONTH) | (1 << Parser.YEARTODAY) | (1 << Parser.MONTHTODAY) | (1 << Parser.NOT) | (1 << Parser.BETWEEN) | (1 << Parser.NULL_CONSTANT) | (1 << Parser.ISNULL) | (1 << Parser.UNION) | (1 << Parser.SYMDIFF) | (1 << Parser.INTERSECT) | (1 << Parser.RANDOM))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Parser.CHECK - 66)) | (1 << (Parser.EXISTS_IN - 66)) | (1 << (Parser.MIN - 66)) | (1 << (Parser.MAX - 66)) | (1 << (Parser.ABS - 66)) | (1 << (Parser.LN - 66)) | (1 << (Parser.LOG - 66)) | (1 << (Parser.TRUNC - 66)) | (1 << (Parser.ROUND - 66)) | (1 << (Parser.POWER - 66)) | (1 << (Parser.MOD - 66)) | (1 << (Parser.LEN - 66)) | (1 << (Parser.TRIM - 66)) | (1 << (Parser.UCASE - 66)) | (1 << (Parser.LCASE - 66)) | (1 << (Parser.SUBSTR - 66)) | (1 << (Parser.SUM - 66)) | (1 << (Parser.AVG - 66)) | (1 << (Parser.MEDIAN - 66)) | (1 << (Parser.COUNT - 66)) | (1 << (Parser.EXP - 66)) | (1 << (Parser.CHARSET_MATCH - 66)) | (1 << (Parser.NVL - 66)) | (1 << (Parser.HIERARCHY - 66)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Parser.LTRIM - 131)) | (1 << (Parser.RTRIM - 131)) | (1 << (Parser.INSTR - 131)) | (1 << (Parser.REPLACE - 131)) | (1 << (Parser.CEIL - 131)) | (1 << (Parser.FLOOR - 131)) | (1 << (Parser.SQRT - 131)) | (1 << (Parser.SETDIFF - 131)) | (1 << (Parser.STDDEV_POP - 131)) | (1 << (Parser.STDDEV_SAMP - 131)) | (1 << (Parser.VAR_POP - 131)) | (1 << (Parser.VAR_SAMP - 131)) | (1 << (Parser.FIRST_VALUE - 131)) | (1 << (Parser.LAST_VALUE - 131)) | (1 << (Parser.LAG - 131)) | (1 << (Parser.LEAD - 131)) | (1 << (Parser.RATIO_TO_REPORT - 131)) | (1 << (Parser.FILL_TIME_SERIES - 131)) | (1 << (Parser.FLOW_TO_STOCK - 131)) | (1 << (Parser.STOCK_TO_FLOW - 131)) | (1 << (Parser.TIMESHIFT - 131)) | (1 << (Parser.INNER_JOIN - 131)) | (1 << (Parser.LEFT_JOIN - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Parser.CROSS_JOIN - 195)) | (1 << (Parser.FULL_JOIN - 195)) | (1 << (Parser.PERIOD_INDICATOR - 195)) | (1 << (Parser.TIME_AGG - 195)) | (1 << (Parser.CAST - 195)) | (1 << (Parser.CHECK_DATAPOINT - 195)) | (1 << (Parser.CHECK_HIERARCHY - 195)) | (1 << (Parser.INTEGER_CONSTANT - 195)) | (1 << (Parser.NUMBER_CONSTANT - 195)) | (1 << (Parser.BOOLEAN_CONSTANT - 195)) | (1 << (Parser.STRING_CONSTANT - 195)) | (1 << (Parser.IDENTIFIER - 195)))) != 0):
                    self.state = 854
                    self.expr(0)


                self.state = 857
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.FILL_TIME_SERIES]:
                localctx = Parser.FillTimeAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 858
                self.match(Parser.FILL_TIME_SERIES)
                self.state = 859
                self.match(Parser.LPAREN)
                self.state = 860
                self.expr(0)
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 861
                    self.match(Parser.COMMA)
                    self.state = 862
                    _la = self._input.LA(1)
                    if not(_la==Parser.ALL or _la==Parser.SINGLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 865
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.FLOW_TO_STOCK, Parser.STOCK_TO_FLOW]:
                localctx = Parser.FlowAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 867
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==Parser.FLOW_TO_STOCK or _la==Parser.STOCK_TO_FLOW):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 868
                self.match(Parser.LPAREN)
                self.state = 869
                self.expr(0)
                self.state = 870
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.TIMESHIFT]:
                localctx = Parser.TimeShiftAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 872
                self.match(Parser.TIMESHIFT)
                self.state = 873
                self.match(Parser.LPAREN)
                self.state = 874
                self.expr(0)
                self.state = 875
                self.match(Parser.COMMA)
                self.state = 876
                self.signedInteger()
                self.state = 877
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.TIME_AGG]:
                localctx = Parser.TimeAggAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 879
                self.match(Parser.TIME_AGG)
                self.state = 880
                self.match(Parser.LPAREN)
                self.state = 881
                localctx.periodIndTo = self.match(Parser.STRING_CONSTANT)
                self.state = 884
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 882
                    self.match(Parser.COMMA)
                    self.state = 883
                    localctx.periodIndFrom = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==Parser.OPTIONAL or _la==Parser.STRING_CONSTANT):
                        localctx.periodIndFrom = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 888
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 886
                    self.match(Parser.COMMA)
                    self.state = 887
                    localctx.op = self.optionalExpr()


                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 890
                    self.match(Parser.COMMA)
                    self.state = 891
                    _la = self._input.LA(1)
                    if not(_la==Parser.FIRST or _la==Parser.LAST):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 894
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CURRENT_DATE]:
                localctx = Parser.CurrentDateAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 895
                self.match(Parser.CURRENT_DATE)
                self.state = 896
                self.match(Parser.LPAREN)
                self.state = 897
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.DATEDIFF]:
                localctx = Parser.DateDiffAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 898
                self.match(Parser.DATEDIFF)
                self.state = 899
                self.match(Parser.LPAREN)
                self.state = 900
                localctx.dateFrom = self.expr(0)
                self.state = 901
                self.match(Parser.COMMA)
                self.state = 902
                localctx.dateTo = self.expr(0)
                self.state = 903
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.DATEADD]:
                localctx = Parser.DateAddAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 905
                self.match(Parser.DATEADD)
                self.state = 906
                self.match(Parser.LPAREN)
                self.state = 907
                localctx.op = self.expr(0)
                self.state = 908
                self.match(Parser.COMMA)
                self.state = 909
                localctx.shiftNumber = self.expr(0)
                self.state = 910
                self.match(Parser.COMMA)
                self.state = 911
                localctx.periodInd = self.expr(0)
                self.state = 912
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.YEAR_OP]:
                localctx = Parser.YearAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 914
                self.match(Parser.YEAR_OP)
                self.state = 915
                self.match(Parser.LPAREN)
                self.state = 916
                self.expr(0)
                self.state = 917
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.MONTH_OP]:
                localctx = Parser.MonthAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 919
                self.match(Parser.MONTH_OP)
                self.state = 920
                self.match(Parser.LPAREN)
                self.state = 921
                self.expr(0)
                self.state = 922
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.DAYOFMONTH]:
                localctx = Parser.DayOfMonthAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 924
                self.match(Parser.DAYOFMONTH)
                self.state = 925
                self.match(Parser.LPAREN)
                self.state = 926
                self.expr(0)
                self.state = 927
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.DAYOFYEAR]:
                localctx = Parser.DatOfYearAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 929
                self.match(Parser.DAYOFYEAR)
                self.state = 930
                self.match(Parser.LPAREN)
                self.state = 931
                self.expr(0)
                self.state = 932
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.DAYTOYEAR]:
                localctx = Parser.DayToYearAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 934
                self.match(Parser.DAYTOYEAR)
                self.state = 935
                self.match(Parser.LPAREN)
                self.state = 936
                self.expr(0)
                self.state = 937
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.DAYTOMONTH]:
                localctx = Parser.DayToMonthAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 939
                self.match(Parser.DAYTOMONTH)
                self.state = 940
                self.match(Parser.LPAREN)
                self.state = 941
                self.expr(0)
                self.state = 942
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.YEARTODAY]:
                localctx = Parser.YearTodayAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 944
                self.match(Parser.YEARTODAY)
                self.state = 945
                self.match(Parser.LPAREN)
                self.state = 946
                self.expr(0)
                self.state = 947
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.MONTHTODAY]:
                localctx = Parser.MonthTodayAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 949
                self.match(Parser.MONTHTODAY)
                self.state = 950
                self.match(Parser.LPAREN)
                self.state = 951
                self.expr(0)
                self.state = 952
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeOperatorsComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_timeOperatorsComponent

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PeriodAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PERIOD_INDICATOR(self):
            return self.getToken(Parser.PERIOD_INDICATOR, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodAtomComponent" ):
                listener.enterPeriodAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodAtomComponent" ):
                listener.exitPeriodAtomComponent(self)


    class TimeShiftAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESHIFT(self):
            return self.getToken(Parser.TIMESHIFT, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def signedInteger(self):
            return self.getTypedRuleContext(Parser.SignedIntegerContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeShiftAtomComponent" ):
                listener.enterTimeShiftAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeShiftAtomComponent" ):
                listener.exitTimeShiftAtomComponent(self)


    class MonthTodayAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MONTHTODAY(self):
            return self.getToken(Parser.MONTHTODAY, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMonthTodayAtomComponent" ):
                listener.enterMonthTodayAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMonthTodayAtomComponent" ):
                listener.exitMonthTodayAtomComponent(self)


    class TimeAggAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.periodIndTo = None # Token
            self.periodIndFrom = None # Token
            self.op = None # OptionalExprComponentContext
            self.copyFrom(ctx)

        def TIME_AGG(self):
            return self.getToken(Parser.TIME_AGG, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def STRING_CONSTANT(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.STRING_CONSTANT)
            else:
                return self.getToken(Parser.STRING_CONSTANT, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def optionalExprComponent(self):
            return self.getTypedRuleContext(Parser.OptionalExprComponentContext,0)

        def FIRST(self):
            return self.getToken(Parser.FIRST, 0)
        def LAST(self):
            return self.getToken(Parser.LAST, 0)
        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeAggAtomComponent" ):
                listener.enterTimeAggAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeAggAtomComponent" ):
                listener.exitTimeAggAtomComponent(self)


    class DayToMonthAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DAYTOMONTH(self):
            return self.getToken(Parser.DAYTOMONTH, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDayToMonthAtomComponent" ):
                listener.enterDayToMonthAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDayToMonthAtomComponent" ):
                listener.exitDayToMonthAtomComponent(self)


    class DateAddAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.op = None # ExprContext
            self.shiftNumber = None # ExprContext
            self.periodInd = None # ExprContext
            self.copyFrom(ctx)

        def DATEADD(self):
            return self.getToken(Parser.DATEADD, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateAddAtomComponent" ):
                listener.enterDateAddAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateAddAtomComponent" ):
                listener.exitDateAddAtomComponent(self)


    class YearTodayAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def YEARTODAY(self):
            return self.getToken(Parser.YEARTODAY, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYearTodayAtomComponent" ):
                listener.enterYearTodayAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYearTodayAtomComponent" ):
                listener.exitYearTodayAtomComponent(self)


    class DayOfMonthAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DAYOFMONTH(self):
            return self.getToken(Parser.DAYOFMONTH, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDayOfMonthAtomComponent" ):
                listener.enterDayOfMonthAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDayOfMonthAtomComponent" ):
                listener.exitDayOfMonthAtomComponent(self)


    class MonthAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MONTH_OP(self):
            return self.getToken(Parser.MONTH_OP, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMonthAtomComponent" ):
                listener.enterMonthAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMonthAtomComponent" ):
                listener.exitMonthAtomComponent(self)


    class FillTimeAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FILL_TIME_SERIES(self):
            return self.getToken(Parser.FILL_TIME_SERIES, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def SINGLE(self):
            return self.getToken(Parser.SINGLE, 0)
        def ALL(self):
            return self.getToken(Parser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFillTimeAtomComponent" ):
                listener.enterFillTimeAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFillTimeAtomComponent" ):
                listener.exitFillTimeAtomComponent(self)


    class DatOfYearAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DAYOFYEAR(self):
            return self.getToken(Parser.DAYOFYEAR, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatOfYearAtomComponent" ):
                listener.enterDatOfYearAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatOfYearAtomComponent" ):
                listener.exitDatOfYearAtomComponent(self)


    class DayToYearAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DAYTOYEAR(self):
            return self.getToken(Parser.DAYTOYEAR, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDayToYearAtomComponent" ):
                listener.enterDayToYearAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDayToYearAtomComponent" ):
                listener.exitDayToYearAtomComponent(self)


    class CurrentDateAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(Parser.CURRENT_DATE, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentDateAtomComponent" ):
                listener.enterCurrentDateAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentDateAtomComponent" ):
                listener.exitCurrentDateAtomComponent(self)


    class FlowAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def FLOW_TO_STOCK(self):
            return self.getToken(Parser.FLOW_TO_STOCK, 0)
        def STOCK_TO_FLOW(self):
            return self.getToken(Parser.STOCK_TO_FLOW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlowAtomComponent" ):
                listener.enterFlowAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlowAtomComponent" ):
                listener.exitFlowAtomComponent(self)


    class DateDiffAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.dateFrom = None # ExprContext
            self.dateTo = None # ExprContext
            self.copyFrom(ctx)

        def DATEDIFF(self):
            return self.getToken(Parser.DATEDIFF, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateDiffAtomComponent" ):
                listener.enterDateDiffAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateDiffAtomComponent" ):
                listener.exitDateDiffAtomComponent(self)


    class YearAtomComponentContext(TimeOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.TimeOperatorsComponentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def YEAR_OP(self):
            return self.getToken(Parser.YEAR_OP, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYearAtomComponent" ):
                listener.enterYearAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYearAtomComponent" ):
                listener.exitYearAtomComponent(self)



    def timeOperatorsComponent(self):

        localctx = Parser.TimeOperatorsComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_timeOperatorsComponent)
        self._la = 0 # Token type
        try:
            self.state = 1058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.PERIOD_INDICATOR]:
                localctx = Parser.PeriodAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 956
                self.match(Parser.PERIOD_INDICATOR)
                self.state = 957
                self.match(Parser.LPAREN)
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Parser.LPAREN) | (1 << Parser.PLUS) | (1 << Parser.MINUS) | (1 << Parser.EVAL) | (1 << Parser.IF) | (1 << Parser.CURRENT_DATE) | (1 << Parser.DATEDIFF) | (1 << Parser.DATEADD) | (1 << Parser.YEAR_OP) | (1 << Parser.MONTH_OP) | (1 << Parser.DAYOFMONTH) | (1 << Parser.DAYOFYEAR) | (1 << Parser.DAYTOYEAR) | (1 << Parser.DAYTOMONTH) | (1 << Parser.YEARTODAY) | (1 << Parser.MONTHTODAY) | (1 << Parser.NOT) | (1 << Parser.BETWEEN) | (1 << Parser.NULL_CONSTANT) | (1 << Parser.ISNULL) | (1 << Parser.RANDOM))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (Parser.RANK - 77)) | (1 << (Parser.MIN - 77)) | (1 << (Parser.MAX - 77)) | (1 << (Parser.ABS - 77)) | (1 << (Parser.LN - 77)) | (1 << (Parser.LOG - 77)) | (1 << (Parser.TRUNC - 77)) | (1 << (Parser.ROUND - 77)) | (1 << (Parser.POWER - 77)) | (1 << (Parser.MOD - 77)) | (1 << (Parser.LEN - 77)) | (1 << (Parser.TRIM - 77)) | (1 << (Parser.UCASE - 77)) | (1 << (Parser.LCASE - 77)) | (1 << (Parser.SUBSTR - 77)) | (1 << (Parser.SUM - 77)) | (1 << (Parser.AVG - 77)) | (1 << (Parser.MEDIAN - 77)) | (1 << (Parser.COUNT - 77)) | (1 << (Parser.EXP - 77)) | (1 << (Parser.CHARSET_MATCH - 77)) | (1 << (Parser.NVL - 77)) | (1 << (Parser.LTRIM - 77)) | (1 << (Parser.RTRIM - 77)) | (1 << (Parser.INSTR - 77)) | (1 << (Parser.REPLACE - 77)) | (1 << (Parser.CEIL - 77)) | (1 << (Parser.FLOOR - 77)) | (1 << (Parser.SQRT - 77)) | (1 << (Parser.STDDEV_POP - 77)))) != 0) or ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & ((1 << (Parser.STDDEV_SAMP - 141)) | (1 << (Parser.VAR_POP - 141)) | (1 << (Parser.VAR_SAMP - 141)) | (1 << (Parser.FIRST_VALUE - 141)) | (1 << (Parser.LAST_VALUE - 141)) | (1 << (Parser.LAG - 141)) | (1 << (Parser.LEAD - 141)) | (1 << (Parser.RATIO_TO_REPORT - 141)) | (1 << (Parser.FILL_TIME_SERIES - 141)) | (1 << (Parser.FLOW_TO_STOCK - 141)) | (1 << (Parser.STOCK_TO_FLOW - 141)) | (1 << (Parser.TIMESHIFT - 141)))) != 0) or ((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & ((1 << (Parser.PERIOD_INDICATOR - 208)) | (1 << (Parser.TIME_AGG - 208)) | (1 << (Parser.CAST - 208)) | (1 << (Parser.INTEGER_CONSTANT - 208)) | (1 << (Parser.NUMBER_CONSTANT - 208)) | (1 << (Parser.BOOLEAN_CONSTANT - 208)) | (1 << (Parser.STRING_CONSTANT - 208)) | (1 << (Parser.IDENTIFIER - 208)))) != 0):
                    self.state = 958
                    self.exprComponent(0)


                self.state = 961
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.FILL_TIME_SERIES]:
                localctx = Parser.FillTimeAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 962
                self.match(Parser.FILL_TIME_SERIES)
                self.state = 963
                self.match(Parser.LPAREN)
                self.state = 964
                self.exprComponent(0)
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 965
                    self.match(Parser.COMMA)
                    self.state = 966
                    _la = self._input.LA(1)
                    if not(_la==Parser.ALL or _la==Parser.SINGLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 969
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.FLOW_TO_STOCK, Parser.STOCK_TO_FLOW]:
                localctx = Parser.FlowAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 971
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==Parser.FLOW_TO_STOCK or _la==Parser.STOCK_TO_FLOW):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 972
                self.match(Parser.LPAREN)
                self.state = 973
                self.exprComponent(0)
                self.state = 974
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.TIMESHIFT]:
                localctx = Parser.TimeShiftAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 976
                self.match(Parser.TIMESHIFT)
                self.state = 977
                self.match(Parser.LPAREN)
                self.state = 978
                self.exprComponent(0)
                self.state = 979
                self.match(Parser.COMMA)
                self.state = 980
                self.signedInteger()
                self.state = 981
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.TIME_AGG]:
                localctx = Parser.TimeAggAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 983
                self.match(Parser.TIME_AGG)
                self.state = 984
                self.match(Parser.LPAREN)
                self.state = 985
                localctx.periodIndTo = self.match(Parser.STRING_CONSTANT)
                self.state = 988
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 986
                    self.match(Parser.COMMA)
                    self.state = 987
                    localctx.periodIndFrom = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==Parser.OPTIONAL or _la==Parser.STRING_CONSTANT):
                        localctx.periodIndFrom = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 992
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 990
                    self.match(Parser.COMMA)
                    self.state = 991
                    localctx.op = self.optionalExprComponent()


                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 994
                    self.match(Parser.COMMA)
                    self.state = 995
                    _la = self._input.LA(1)
                    if not(_la==Parser.FIRST or _la==Parser.LAST):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 998
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CURRENT_DATE]:
                localctx = Parser.CurrentDateAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 999
                self.match(Parser.CURRENT_DATE)
                self.state = 1000
                self.match(Parser.LPAREN)
                self.state = 1001
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.DATEDIFF]:
                localctx = Parser.DateDiffAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1002
                self.match(Parser.DATEDIFF)
                self.state = 1003
                self.match(Parser.LPAREN)
                self.state = 1004
                localctx.dateFrom = self.expr(0)
                self.state = 1005
                self.match(Parser.COMMA)
                self.state = 1006
                localctx.dateTo = self.expr(0)
                self.state = 1007
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.DATEADD]:
                localctx = Parser.DateAddAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1009
                self.match(Parser.DATEADD)
                self.state = 1010
                self.match(Parser.LPAREN)
                self.state = 1011
                localctx.op = self.expr(0)
                self.state = 1012
                self.match(Parser.COMMA)
                self.state = 1013
                localctx.shiftNumber = self.expr(0)
                self.state = 1014
                self.match(Parser.COMMA)
                self.state = 1015
                localctx.periodInd = self.expr(0)
                self.state = 1016
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.YEAR_OP]:
                localctx = Parser.YearAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1018
                self.match(Parser.YEAR_OP)
                self.state = 1019
                self.match(Parser.LPAREN)
                self.state = 1020
                self.expr(0)
                self.state = 1021
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.MONTH_OP]:
                localctx = Parser.MonthAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1023
                self.match(Parser.MONTH_OP)
                self.state = 1024
                self.match(Parser.LPAREN)
                self.state = 1025
                self.expr(0)
                self.state = 1026
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.DAYOFMONTH]:
                localctx = Parser.DayOfMonthAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1028
                self.match(Parser.DAYOFMONTH)
                self.state = 1029
                self.match(Parser.LPAREN)
                self.state = 1030
                self.expr(0)
                self.state = 1031
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.DAYOFYEAR]:
                localctx = Parser.DatOfYearAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1033
                self.match(Parser.DAYOFYEAR)
                self.state = 1034
                self.match(Parser.LPAREN)
                self.state = 1035
                self.expr(0)
                self.state = 1036
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.DAYTOYEAR]:
                localctx = Parser.DayToYearAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1038
                self.match(Parser.DAYTOYEAR)
                self.state = 1039
                self.match(Parser.LPAREN)
                self.state = 1040
                self.expr(0)
                self.state = 1041
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.DAYTOMONTH]:
                localctx = Parser.DayToMonthAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1043
                self.match(Parser.DAYTOMONTH)
                self.state = 1044
                self.match(Parser.LPAREN)
                self.state = 1045
                self.expr(0)
                self.state = 1046
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.YEARTODAY]:
                localctx = Parser.YearTodayAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1048
                self.match(Parser.YEARTODAY)
                self.state = 1049
                self.match(Parser.LPAREN)
                self.state = 1050
                self.expr(0)
                self.state = 1051
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.MONTHTODAY]:
                localctx = Parser.MonthTodayAtomComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1053
                self.match(Parser.MONTHTODAY)
                self.state = 1054
                self.match(Parser.LPAREN)
                self.state = 1055
                self.expr(0)
                self.state = 1056
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_setOperators

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SetOrSYmDiffAtomContext(SetOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.SetOperatorsContext
            super().__init__(parser)
            self.op = None # Token
            self.left = None # ExprContext
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)

        def SETDIFF(self):
            return self.getToken(Parser.SETDIFF, 0)
        def SYMDIFF(self):
            return self.getToken(Parser.SYMDIFF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOrSYmDiffAtom" ):
                listener.enterSetOrSYmDiffAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOrSYmDiffAtom" ):
                listener.exitSetOrSYmDiffAtom(self)


    class IntersectAtomContext(SetOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.SetOperatorsContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.copyFrom(ctx)

        def INTERSECT(self):
            return self.getToken(Parser.INTERSECT, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntersectAtom" ):
                listener.enterIntersectAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntersectAtom" ):
                listener.exitIntersectAtom(self)


    class UnionAtomContext(SetOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.SetOperatorsContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.copyFrom(ctx)

        def UNION(self):
            return self.getToken(Parser.UNION, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionAtom" ):
                listener.enterUnionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionAtom" ):
                listener.exitUnionAtom(self)



    def setOperators(self):

        localctx = Parser.SetOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_setOperators)
        self._la = 0 # Token type
        try:
            self.state = 1089
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.UNION]:
                localctx = Parser.UnionAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1060
                self.match(Parser.UNION)
                self.state = 1061
                self.match(Parser.LPAREN)
                self.state = 1062
                localctx.left = self.expr(0)
                self.state = 1065 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1063
                    self.match(Parser.COMMA)
                    self.state = 1064
                    self.expr(0)
                    self.state = 1067 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Parser.COMMA):
                        break

                self.state = 1069
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.INTERSECT]:
                localctx = Parser.IntersectAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1071
                self.match(Parser.INTERSECT)
                self.state = 1072
                self.match(Parser.LPAREN)
                self.state = 1073
                localctx.left = self.expr(0)
                self.state = 1076 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1074
                    self.match(Parser.COMMA)
                    self.state = 1075
                    self.expr(0)
                    self.state = 1078 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Parser.COMMA):
                        break

                self.state = 1080
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.SYMDIFF, Parser.SETDIFF]:
                localctx = Parser.SetOrSYmDiffAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1082
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==Parser.SYMDIFF or _la==Parser.SETDIFF):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1083
                self.match(Parser.LPAREN)
                self.state = 1084
                localctx.left = self.expr(0)
                self.state = 1085
                self.match(Parser.COMMA)
                self.state = 1086
                localctx.right = self.expr(0)
                self.state = 1087
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HierarchyOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # ExprContext
            self.hrName = None # Token
            self.ruleComponent = None # ComponentIDContext

        def HIERARCHY(self):
            return self.getToken(Parser.HIERARCHY, 0)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)

        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)


        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def conditionClause(self):
            return self.getTypedRuleContext(Parser.ConditionClauseContext,0)


        def RULE(self):
            return self.getToken(Parser.RULE, 0)

        def validationMode(self):
            return self.getTypedRuleContext(Parser.ValidationModeContext,0)


        def inputModeHierarchy(self):
            return self.getTypedRuleContext(Parser.InputModeHierarchyContext,0)


        def outputModeHierarchy(self):
            return self.getTypedRuleContext(Parser.OutputModeHierarchyContext,0)


        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext,0)


        def getRuleIndex(self):
            return Parser.RULE_hierarchyOperators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHierarchyOperators" ):
                listener.enterHierarchyOperators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHierarchyOperators" ):
                listener.exitHierarchyOperators(self)




    def hierarchyOperators(self):

        localctx = Parser.HierarchyOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_hierarchyOperators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(Parser.HIERARCHY)
            self.state = 1092
            self.match(Parser.LPAREN)
            self.state = 1093
            localctx.op = self.expr(0)
            self.state = 1094
            self.match(Parser.COMMA)
            self.state = 1095
            localctx.hrName = self.match(Parser.IDENTIFIER)
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.CONDITION:
                self.state = 1096
                self.conditionClause()


            self.state = 1101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 1099
                self.match(Parser.RULE)
                self.state = 1100
                localctx.ruleComponent = self.componentID()


            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (Parser.NON_NULL - 225)) | (1 << (Parser.NON_ZERO - 225)) | (1 << (Parser.PARTIAL_NULL - 225)) | (1 << (Parser.PARTIAL_ZERO - 225)) | (1 << (Parser.ALWAYS_NULL - 225)) | (1 << (Parser.ALWAYS_ZERO - 225)))) != 0):
                self.state = 1103
                self.validationMode()


            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.DATASET or _la==Parser.RULE or _la==Parser.RULE_PRIORITY:
                self.state = 1106
                self.inputModeHierarchy()


            self.state = 1110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.ALL or _la==Parser.COMPUTED:
                self.state = 1109
                self.outputModeHierarchy()


            self.state = 1112
            self.match(Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValidationOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_validationOperators

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ValidateHRrulesetContext(ValidationOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ValidationOperatorsContext
            super().__init__(parser)
            self.op = None # ExprContext
            self.hrName = None # Token
            self.copyFrom(ctx)

        def CHECK_HIERARCHY(self):
            return self.getToken(Parser.CHECK_HIERARCHY, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)
        def conditionClause(self):
            return self.getTypedRuleContext(Parser.ConditionClauseContext,0)

        def RULE(self):
            return self.getToken(Parser.RULE, 0)
        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext,0)

        def validationMode(self):
            return self.getTypedRuleContext(Parser.ValidationModeContext,0)

        def inputMode(self):
            return self.getTypedRuleContext(Parser.InputModeContext,0)

        def validationOutput(self):
            return self.getTypedRuleContext(Parser.ValidationOutputContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValidateHRruleset" ):
                listener.enterValidateHRruleset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValidateHRruleset" ):
                listener.exitValidateHRruleset(self)


    class ValidateDPrulesetContext(ValidationOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ValidationOperatorsContext
            super().__init__(parser)
            self.op = None # ExprContext
            self.dpName = None # Token
            self.copyFrom(ctx)

        def CHECK_DATAPOINT(self):
            return self.getToken(Parser.CHECK_DATAPOINT, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)
        def COMPONENTS(self):
            return self.getToken(Parser.COMPONENTS, 0)
        def componentID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext,i)

        def validationOutput(self):
            return self.getTypedRuleContext(Parser.ValidationOutputContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValidateDPruleset" ):
                listener.enterValidateDPruleset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValidateDPruleset" ):
                listener.exitValidateDPruleset(self)


    class ValidationSimpleContext(ValidationOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ValidationOperatorsContext
            super().__init__(parser)
            self.op = None # ExprContext
            self.codeErr = None # ErCodeContext
            self.levelCode = None # ErLevelContext
            self.output = None # Token
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(Parser.CHECK, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def imbalanceExpr(self):
            return self.getTypedRuleContext(Parser.ImbalanceExprContext,0)

        def erCode(self):
            return self.getTypedRuleContext(Parser.ErCodeContext,0)

        def erLevel(self):
            return self.getTypedRuleContext(Parser.ErLevelContext,0)

        def INVALID(self):
            return self.getToken(Parser.INVALID, 0)
        def ALL(self):
            return self.getToken(Parser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValidationSimple" ):
                listener.enterValidationSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValidationSimple" ):
                listener.exitValidationSimple(self)



    def validationOperators(self):

        localctx = Parser.ValidationOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_validationOperators)
        self._la = 0 # Token type
        try:
            self.state = 1175
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.CHECK_DATAPOINT]:
                localctx = Parser.ValidateDPrulesetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1114
                self.match(Parser.CHECK_DATAPOINT)
                self.state = 1115
                self.match(Parser.LPAREN)
                self.state = 1116
                localctx.op = self.expr(0)
                self.state = 1117
                self.match(Parser.COMMA)
                self.state = 1118
                localctx.dpName = self.match(Parser.IDENTIFIER)
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMPONENTS:
                    self.state = 1119
                    self.match(Parser.COMPONENTS)
                    self.state = 1120
                    self.componentID()
                    self.state = 1125
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==Parser.COMMA:
                        self.state = 1121
                        self.match(Parser.COMMA)
                        self.state = 1122
                        self.componentID()
                        self.state = 1127
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.ALL or _la==Parser.INVALID or _la==Parser.ALL_MEASURES:
                    self.state = 1130
                    self.validationOutput()


                self.state = 1133
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CHECK_HIERARCHY]:
                localctx = Parser.ValidateHRrulesetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1135
                self.match(Parser.CHECK_HIERARCHY)
                self.state = 1136
                self.match(Parser.LPAREN)
                self.state = 1137
                localctx.op = self.expr(0)
                self.state = 1138
                self.match(Parser.COMMA)
                self.state = 1139
                localctx.hrName = self.match(Parser.IDENTIFIER)
                self.state = 1141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.CONDITION:
                    self.state = 1140
                    self.conditionClause()


                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.RULE:
                    self.state = 1143
                    self.match(Parser.RULE)
                    self.state = 1144
                    self.componentID()


                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (Parser.NON_NULL - 225)) | (1 << (Parser.NON_ZERO - 225)) | (1 << (Parser.PARTIAL_NULL - 225)) | (1 << (Parser.PARTIAL_ZERO - 225)) | (1 << (Parser.ALWAYS_NULL - 225)) | (1 << (Parser.ALWAYS_ZERO - 225)))) != 0):
                    self.state = 1147
                    self.validationMode()


                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.DATASET or _la==Parser.DATASET_PRIORITY:
                    self.state = 1150
                    self.inputMode()


                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.ALL or _la==Parser.INVALID or _la==Parser.ALL_MEASURES:
                    self.state = 1153
                    self.validationOutput()


                self.state = 1156
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.CHECK]:
                localctx = Parser.ValidationSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1158
                self.match(Parser.CHECK)
                self.state = 1159
                self.match(Parser.LPAREN)
                self.state = 1160
                localctx.op = self.expr(0)
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.ERRORCODE:
                    self.state = 1161
                    localctx.codeErr = self.erCode()


                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.ERRORLEVEL:
                    self.state = 1164
                    localctx.levelCode = self.erLevel()


                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.IMBALANCE:
                    self.state = 1167
                    self.imbalanceExpr()


                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.ALL or _la==Parser.INVALID:
                    self.state = 1170
                    localctx.output = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==Parser.ALL or _la==Parser.INVALID):
                        localctx.output = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1173
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_conditionalOperators

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NvlAtomContext(ConditionalOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ConditionalOperatorsContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def NVL(self):
            return self.getToken(Parser.NVL, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Parser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNvlAtom" ):
                listener.enterNvlAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNvlAtom" ):
                listener.exitNvlAtom(self)



    def conditionalOperators(self):

        localctx = Parser.ConditionalOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_conditionalOperators)
        try:
            localctx = Parser.NvlAtomContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.match(Parser.NVL)
            self.state = 1178
            self.match(Parser.LPAREN)
            self.state = 1179
            localctx.left = self.expr(0)
            self.state = 1180
            self.match(Parser.COMMA)
            self.state = 1181
            localctx.right = self.expr(0)
            self.state = 1182
            self.match(Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalOperatorsComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_conditionalOperatorsComponent

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NvlAtomComponentContext(ConditionalOperatorsComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ConditionalOperatorsComponentContext
            super().__init__(parser)
            self.left = None # ExprComponentContext
            self.right = None # ExprComponentContext
            self.copyFrom(ctx)

        def NVL(self):
            return self.getToken(Parser.NVL, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def exprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNvlAtomComponent" ):
                listener.enterNvlAtomComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNvlAtomComponent" ):
                listener.exitNvlAtomComponent(self)



    def conditionalOperatorsComponent(self):

        localctx = Parser.ConditionalOperatorsComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_conditionalOperatorsComponent)
        try:
            localctx = Parser.NvlAtomComponentContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(Parser.NVL)
            self.state = 1185
            self.match(Parser.LPAREN)
            self.state = 1186
            localctx.left = self.exprComponent(0)
            self.state = 1187
            self.match(Parser.COMMA)
            self.state = 1188
            localctx.right = self.exprComponent(0)
            self.state = 1189
            self.match(Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggrOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_aggrOperators

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AggrCompContext(AggrOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.AggrOperatorsContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def SUM(self):
            return self.getToken(Parser.SUM, 0)
        def AVG(self):
            return self.getToken(Parser.AVG, 0)
        def COUNT(self):
            return self.getToken(Parser.COUNT, 0)
        def MEDIAN(self):
            return self.getToken(Parser.MEDIAN, 0)
        def MIN(self):
            return self.getToken(Parser.MIN, 0)
        def MAX(self):
            return self.getToken(Parser.MAX, 0)
        def STDDEV_POP(self):
            return self.getToken(Parser.STDDEV_POP, 0)
        def STDDEV_SAMP(self):
            return self.getToken(Parser.STDDEV_SAMP, 0)
        def VAR_POP(self):
            return self.getToken(Parser.VAR_POP, 0)
        def VAR_SAMP(self):
            return self.getToken(Parser.VAR_SAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggrComp" ):
                listener.enterAggrComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggrComp" ):
                listener.exitAggrComp(self)


    class CountAggrCompContext(AggrOperatorsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.AggrOperatorsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(Parser.COUNT, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountAggrComp" ):
                listener.enterCountAggrComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountAggrComp" ):
                listener.exitCountAggrComp(self)



    def aggrOperators(self):

        localctx = Parser.AggrOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_aggrOperators)
        self._la = 0 # Token type
        try:
            self.state = 1199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                localctx = Parser.AggrCompContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1191
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (Parser.MIN - 80)) | (1 << (Parser.MAX - 80)) | (1 << (Parser.SUM - 80)) | (1 << (Parser.AVG - 80)) | (1 << (Parser.MEDIAN - 80)) | (1 << (Parser.COUNT - 80)) | (1 << (Parser.STDDEV_POP - 80)) | (1 << (Parser.STDDEV_SAMP - 80)) | (1 << (Parser.VAR_POP - 80)) | (1 << (Parser.VAR_SAMP - 80)))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1192
                self.match(Parser.LPAREN)
                self.state = 1193
                self.exprComponent(0)
                self.state = 1194
                self.match(Parser.RPAREN)
                pass

            elif la_ == 2:
                localctx = Parser.CountAggrCompContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1196
                self.match(Parser.COUNT)
                self.state = 1197
                self.match(Parser.LPAREN)
                self.state = 1198
                self.match(Parser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggrOperatorsGroupingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_aggrOperatorsGrouping

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AggrDatasetContext(AggrOperatorsGroupingContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.AggrOperatorsGroupingContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def SUM(self):
            return self.getToken(Parser.SUM, 0)
        def AVG(self):
            return self.getToken(Parser.AVG, 0)
        def COUNT(self):
            return self.getToken(Parser.COUNT, 0)
        def MEDIAN(self):
            return self.getToken(Parser.MEDIAN, 0)
        def MIN(self):
            return self.getToken(Parser.MIN, 0)
        def MAX(self):
            return self.getToken(Parser.MAX, 0)
        def STDDEV_POP(self):
            return self.getToken(Parser.STDDEV_POP, 0)
        def STDDEV_SAMP(self):
            return self.getToken(Parser.STDDEV_SAMP, 0)
        def VAR_POP(self):
            return self.getToken(Parser.VAR_POP, 0)
        def VAR_SAMP(self):
            return self.getToken(Parser.VAR_SAMP, 0)
        def groupingClause(self):
            return self.getTypedRuleContext(Parser.GroupingClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(Parser.HavingClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggrDataset" ):
                listener.enterAggrDataset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggrDataset" ):
                listener.exitAggrDataset(self)



    def aggrOperatorsGrouping(self):

        localctx = Parser.AggrOperatorsGroupingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_aggrOperatorsGrouping)
        self._la = 0 # Token type
        try:
            localctx = Parser.AggrDatasetContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (Parser.MIN - 80)) | (1 << (Parser.MAX - 80)) | (1 << (Parser.SUM - 80)) | (1 << (Parser.AVG - 80)) | (1 << (Parser.MEDIAN - 80)) | (1 << (Parser.COUNT - 80)) | (1 << (Parser.STDDEV_POP - 80)) | (1 << (Parser.STDDEV_SAMP - 80)) | (1 << (Parser.VAR_POP - 80)) | (1 << (Parser.VAR_SAMP - 80)))) != 0)):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1202
            self.match(Parser.LPAREN)
            self.state = 1203
            self.expr(0)
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.GROUP:
                self.state = 1204
                self.groupingClause()
                self.state = 1206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.HAVING:
                    self.state = 1205
                    self.havingClause()




            self.state = 1210
            self.match(Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_anFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LagOrLeadAnContext(AnFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.AnFunctionContext
            super().__init__(parser)
            self.op = None # Token
            self.offset = None # SignedIntegerContext
            self.defaultValue = None # ScalarItemContext
            self.partition = None # PartitionByClauseContext
            self.orderBy = None # OrderByClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def OVER(self):
            return self.getToken(Parser.OVER, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)
        def LAG(self):
            return self.getToken(Parser.LAG, 0)
        def LEAD(self):
            return self.getToken(Parser.LEAD, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def orderByClause(self):
            return self.getTypedRuleContext(Parser.OrderByClauseContext,0)

        def signedInteger(self):
            return self.getTypedRuleContext(Parser.SignedIntegerContext,0)

        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext,0)

        def scalarItem(self):
            return self.getTypedRuleContext(Parser.ScalarItemContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLagOrLeadAn" ):
                listener.enterLagOrLeadAn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLagOrLeadAn" ):
                listener.exitLagOrLeadAn(self)


    class RatioToReportAnContext(AnFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.AnFunctionContext
            super().__init__(parser)
            self.op = None # Token
            self.partition = None # PartitionByClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def OVER(self):
            return self.getToken(Parser.OVER, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)
        def RATIO_TO_REPORT(self):
            return self.getToken(Parser.RATIO_TO_REPORT, 0)
        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRatioToReportAn" ):
                listener.enterRatioToReportAn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRatioToReportAn" ):
                listener.exitRatioToReportAn(self)


    class AnSimpleFunctionContext(AnFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.AnFunctionContext
            super().__init__(parser)
            self.op = None # Token
            self.partition = None # PartitionByClauseContext
            self.orderBy = None # OrderByClauseContext
            self.windowing = None # WindowingClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)
        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)

        def OVER(self):
            return self.getToken(Parser.OVER, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)
        def SUM(self):
            return self.getToken(Parser.SUM, 0)
        def AVG(self):
            return self.getToken(Parser.AVG, 0)
        def COUNT(self):
            return self.getToken(Parser.COUNT, 0)
        def MEDIAN(self):
            return self.getToken(Parser.MEDIAN, 0)
        def MIN(self):
            return self.getToken(Parser.MIN, 0)
        def MAX(self):
            return self.getToken(Parser.MAX, 0)
        def STDDEV_POP(self):
            return self.getToken(Parser.STDDEV_POP, 0)
        def STDDEV_SAMP(self):
            return self.getToken(Parser.STDDEV_SAMP, 0)
        def VAR_POP(self):
            return self.getToken(Parser.VAR_POP, 0)
        def VAR_SAMP(self):
            return self.getToken(Parser.VAR_SAMP, 0)
        def FIRST_VALUE(self):
            return self.getToken(Parser.FIRST_VALUE, 0)
        def LAST_VALUE(self):
            return self.getToken(Parser.LAST_VALUE, 0)
        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext,0)

        def orderByClause(self):
            return self.getTypedRuleContext(Parser.OrderByClauseContext,0)

        def windowingClause(self):
            return self.getTypedRuleContext(Parser.WindowingClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnSimpleFunction" ):
                listener.enterAnSimpleFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnSimpleFunction" ):
                listener.exitAnSimpleFunction(self)



    def anFunction(self):

        localctx = Parser.AnFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_anFunction)
        self._la = 0 # Token type
        try:
            self.state = 1259
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.MIN, Parser.MAX, Parser.SUM, Parser.AVG, Parser.MEDIAN, Parser.COUNT, Parser.STDDEV_POP, Parser.STDDEV_SAMP, Parser.VAR_POP, Parser.VAR_SAMP, Parser.FIRST_VALUE, Parser.LAST_VALUE]:
                localctx = Parser.AnSimpleFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1212
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (Parser.MIN - 80)) | (1 << (Parser.MAX - 80)) | (1 << (Parser.SUM - 80)) | (1 << (Parser.AVG - 80)) | (1 << (Parser.MEDIAN - 80)) | (1 << (Parser.COUNT - 80)) | (1 << (Parser.STDDEV_POP - 80)) | (1 << (Parser.STDDEV_SAMP - 80)) | (1 << (Parser.VAR_POP - 80)) | (1 << (Parser.VAR_SAMP - 80)))) != 0) or _la==Parser.FIRST_VALUE or _la==Parser.LAST_VALUE):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1213
                self.match(Parser.LPAREN)
                self.state = 1214
                self.expr(0)
                self.state = 1215
                self.match(Parser.OVER)
                self.state = 1216
                self.match(Parser.LPAREN)

                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.PARTITION:
                    self.state = 1217
                    localctx.partition = self.partitionByClause()


                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.ORDER:
                    self.state = 1220
                    localctx.orderBy = self.orderByClause()


                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.DATA or _la==Parser.RANGE:
                    self.state = 1223
                    localctx.windowing = self.windowingClause()


                self.state = 1226
                self.match(Parser.RPAREN)
                self.state = 1227
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.LAG, Parser.LEAD]:
                localctx = Parser.LagOrLeadAnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1229
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==Parser.LAG or _la==Parser.LEAD):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1230
                self.match(Parser.LPAREN)
                self.state = 1231
                self.expr(0)
                self.state = 1238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 1232
                    self.match(Parser.COMMA)
                    self.state = 1233
                    localctx.offset = self.signedInteger()
                    self.state = 1236
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Parser.COMMA:
                        self.state = 1234
                        self.match(Parser.COMMA)
                        self.state = 1235
                        localctx.defaultValue = self.scalarItem()




                self.state = 1240
                self.match(Parser.OVER)
                self.state = 1241
                self.match(Parser.LPAREN)

                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.PARTITION:
                    self.state = 1242
                    localctx.partition = self.partitionByClause()


                self.state = 1245
                localctx.orderBy = self.orderByClause()
                self.state = 1247
                self.match(Parser.RPAREN)
                self.state = 1248
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.RATIO_TO_REPORT]:
                localctx = Parser.RatioToReportAnContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1250
                localctx.op = self.match(Parser.RATIO_TO_REPORT)
                self.state = 1251
                self.match(Parser.LPAREN)
                self.state = 1252
                self.expr(0)
                self.state = 1253
                self.match(Parser.OVER)
                self.state = 1254
                self.match(Parser.LPAREN)

                self.state = 1255
                localctx.partition = self.partitionByClause()
                self.state = 1256
                self.match(Parser.RPAREN)
                self.state = 1257
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnFunctionComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_anFunctionComponent

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AnSimpleFunctionComponentContext(AnFunctionComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.AnFunctionComponentContext
            super().__init__(parser)
            self.op = None # Token
            self.partition = None # PartitionByClauseContext
            self.orderBy = None # OrderByClauseContext
            self.windowing = None # WindowingClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def OVER(self):
            return self.getToken(Parser.OVER, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)
        def SUM(self):
            return self.getToken(Parser.SUM, 0)
        def AVG(self):
            return self.getToken(Parser.AVG, 0)
        def COUNT(self):
            return self.getToken(Parser.COUNT, 0)
        def MEDIAN(self):
            return self.getToken(Parser.MEDIAN, 0)
        def MIN(self):
            return self.getToken(Parser.MIN, 0)
        def MAX(self):
            return self.getToken(Parser.MAX, 0)
        def STDDEV_POP(self):
            return self.getToken(Parser.STDDEV_POP, 0)
        def STDDEV_SAMP(self):
            return self.getToken(Parser.STDDEV_SAMP, 0)
        def VAR_POP(self):
            return self.getToken(Parser.VAR_POP, 0)
        def VAR_SAMP(self):
            return self.getToken(Parser.VAR_SAMP, 0)
        def FIRST_VALUE(self):
            return self.getToken(Parser.FIRST_VALUE, 0)
        def LAST_VALUE(self):
            return self.getToken(Parser.LAST_VALUE, 0)
        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext,0)

        def orderByClause(self):
            return self.getTypedRuleContext(Parser.OrderByClauseContext,0)

        def windowingClause(self):
            return self.getTypedRuleContext(Parser.WindowingClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnSimpleFunctionComponent" ):
                listener.enterAnSimpleFunctionComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnSimpleFunctionComponent" ):
                listener.exitAnSimpleFunctionComponent(self)


    class LagOrLeadAnComponentContext(AnFunctionComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.AnFunctionComponentContext
            super().__init__(parser)
            self.op = None # Token
            self.offet = None # SignedIntegerContext
            self.defaultValue = None # ScalarItemContext
            self.partition = None # PartitionByClauseContext
            self.orderBy = None # OrderByClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def OVER(self):
            return self.getToken(Parser.OVER, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)
        def LAG(self):
            return self.getToken(Parser.LAG, 0)
        def LEAD(self):
            return self.getToken(Parser.LEAD, 0)
        def COMMA(self):
            return self.getToken(Parser.COMMA, 0)
        def orderByClause(self):
            return self.getTypedRuleContext(Parser.OrderByClauseContext,0)

        def signedInteger(self):
            return self.getTypedRuleContext(Parser.SignedIntegerContext,0)

        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext,0)

        def scalarItem(self):
            return self.getTypedRuleContext(Parser.ScalarItemContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLagOrLeadAnComponent" ):
                listener.enterLagOrLeadAnComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLagOrLeadAnComponent" ):
                listener.exitLagOrLeadAnComponent(self)


    class RankAnComponentContext(AnFunctionComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.AnFunctionComponentContext
            super().__init__(parser)
            self.op = None # Token
            self.partition = None # PartitionByClauseContext
            self.orderBy = None # OrderByClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)
        def OVER(self):
            return self.getToken(Parser.OVER, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)
        def RANK(self):
            return self.getToken(Parser.RANK, 0)
        def orderByClause(self):
            return self.getTypedRuleContext(Parser.OrderByClauseContext,0)

        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRankAnComponent" ):
                listener.enterRankAnComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRankAnComponent" ):
                listener.exitRankAnComponent(self)


    class RatioToReportAnComponentContext(AnFunctionComponentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.AnFunctionComponentContext
            super().__init__(parser)
            self.op = None # Token
            self.partition = None # PartitionByClauseContext
            self.copyFrom(ctx)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.LPAREN)
            else:
                return self.getToken(Parser.LPAREN, i)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def OVER(self):
            return self.getToken(Parser.OVER, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.RPAREN)
            else:
                return self.getToken(Parser.RPAREN, i)
        def RATIO_TO_REPORT(self):
            return self.getToken(Parser.RATIO_TO_REPORT, 0)
        def partitionByClause(self):
            return self.getTypedRuleContext(Parser.PartitionByClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRatioToReportAnComponent" ):
                listener.enterRatioToReportAnComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRatioToReportAnComponent" ):
                listener.exitRatioToReportAnComponent(self)



    def anFunctionComponent(self):

        localctx = Parser.AnFunctionComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_anFunctionComponent)
        self._la = 0 # Token type
        try:
            self.state = 1319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.MIN, Parser.MAX, Parser.SUM, Parser.AVG, Parser.MEDIAN, Parser.COUNT, Parser.STDDEV_POP, Parser.STDDEV_SAMP, Parser.VAR_POP, Parser.VAR_SAMP, Parser.FIRST_VALUE, Parser.LAST_VALUE]:
                localctx = Parser.AnSimpleFunctionComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1261
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (Parser.MIN - 80)) | (1 << (Parser.MAX - 80)) | (1 << (Parser.SUM - 80)) | (1 << (Parser.AVG - 80)) | (1 << (Parser.MEDIAN - 80)) | (1 << (Parser.COUNT - 80)) | (1 << (Parser.STDDEV_POP - 80)) | (1 << (Parser.STDDEV_SAMP - 80)) | (1 << (Parser.VAR_POP - 80)) | (1 << (Parser.VAR_SAMP - 80)))) != 0) or _la==Parser.FIRST_VALUE or _la==Parser.LAST_VALUE):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1262
                self.match(Parser.LPAREN)
                self.state = 1263
                self.exprComponent(0)
                self.state = 1264
                self.match(Parser.OVER)
                self.state = 1265
                self.match(Parser.LPAREN)

                self.state = 1267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.PARTITION:
                    self.state = 1266
                    localctx.partition = self.partitionByClause()


                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.ORDER:
                    self.state = 1269
                    localctx.orderBy = self.orderByClause()


                self.state = 1273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.DATA or _la==Parser.RANGE:
                    self.state = 1272
                    localctx.windowing = self.windowingClause()


                self.state = 1275
                self.match(Parser.RPAREN)
                self.state = 1276
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.LAG, Parser.LEAD]:
                localctx = Parser.LagOrLeadAnComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1278
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==Parser.LAG or _la==Parser.LEAD):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1279
                self.match(Parser.LPAREN)
                self.state = 1280
                self.exprComponent(0)
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 1281
                    self.match(Parser.COMMA)
                    self.state = 1282
                    localctx.offet = self.signedInteger()
                    self.state = 1284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Parser.NULL_CONSTANT or ((((_la - 218)) & ~0x3f) == 0 and ((1 << (_la - 218)) & ((1 << (Parser.CAST - 218)) | (1 << (Parser.INTEGER_CONSTANT - 218)) | (1 << (Parser.NUMBER_CONSTANT - 218)) | (1 << (Parser.BOOLEAN_CONSTANT - 218)) | (1 << (Parser.STRING_CONSTANT - 218)))) != 0):
                        self.state = 1283
                        localctx.defaultValue = self.scalarItem()




                self.state = 1288
                self.match(Parser.OVER)
                self.state = 1289
                self.match(Parser.LPAREN)

                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.PARTITION:
                    self.state = 1290
                    localctx.partition = self.partitionByClause()


                self.state = 1293
                localctx.orderBy = self.orderByClause()
                self.state = 1295
                self.match(Parser.RPAREN)
                self.state = 1296
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.RANK]:
                localctx = Parser.RankAnComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1298
                localctx.op = self.match(Parser.RANK)
                self.state = 1299
                self.match(Parser.LPAREN)
                self.state = 1300
                self.match(Parser.OVER)
                self.state = 1301
                self.match(Parser.LPAREN)

                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.PARTITION:
                    self.state = 1302
                    localctx.partition = self.partitionByClause()


                self.state = 1305
                localctx.orderBy = self.orderByClause()
                self.state = 1307
                self.match(Parser.RPAREN)
                self.state = 1308
                self.match(Parser.RPAREN)
                pass
            elif token in [Parser.RATIO_TO_REPORT]:
                localctx = Parser.RatioToReportAnComponentContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1310
                localctx.op = self.match(Parser.RATIO_TO_REPORT)
                self.state = 1311
                self.match(Parser.LPAREN)
                self.state = 1312
                self.exprComponent(0)
                self.state = 1313
                self.match(Parser.OVER)
                self.state = 1314
                self.match(Parser.LPAREN)

                self.state = 1315
                localctx.partition = self.partitionByClause()
                self.state = 1316
                self.match(Parser.RPAREN)
                self.state = 1317
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RenameClauseItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromName = None # ComponentIDContext
            self.toName = None # ComponentIDContext

        def TO(self):
            return self.getToken(Parser.TO, 0)

        def componentID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext,i)


        def getRuleIndex(self):
            return Parser.RULE_renameClauseItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameClauseItem" ):
                listener.enterRenameClauseItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameClauseItem" ):
                listener.exitRenameClauseItem(self)




    def renameClauseItem(self):

        localctx = Parser.RenameClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_renameClauseItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            localctx.fromName = self.componentID()
            self.state = 1322
            self.match(Parser.TO)
            self.state = 1323
            localctx.toName = self.componentID()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggregateClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggrFunctionClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.AggrFunctionClauseContext)
            else:
                return self.getTypedRuleContext(Parser.AggrFunctionClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_aggregateClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateClause" ):
                listener.enterAggregateClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateClause" ):
                listener.exitAggregateClause(self)




    def aggregateClause(self):

        localctx = Parser.AggregateClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_aggregateClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self.aggrFunctionClause()
            self.state = 1330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 1326
                self.match(Parser.COMMA)
                self.state = 1327
                self.aggrFunctionClause()
                self.state = 1332
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggrFunctionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext,0)


        def ASSIGN(self):
            return self.getToken(Parser.ASSIGN, 0)

        def aggrOperators(self):
            return self.getTypedRuleContext(Parser.AggrOperatorsContext,0)


        def componentRole(self):
            return self.getTypedRuleContext(Parser.ComponentRoleContext,0)


        def getRuleIndex(self):
            return Parser.RULE_aggrFunctionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggrFunctionClause" ):
                listener.enterAggrFunctionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggrFunctionClause" ):
                listener.exitAggrFunctionClause(self)




    def aggrFunctionClause(self):

        localctx = Parser.AggrFunctionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_aggrFunctionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (Parser.DIMENSION - 103)) | (1 << (Parser.MEASURE - 103)) | (1 << (Parser.ATTRIBUTE - 103)) | (1 << (Parser.VIRAL - 103)))) != 0) or _la==Parser.COMPONENT:
                self.state = 1333
                self.componentRole()


            self.state = 1336
            self.componentID()
            self.state = 1337
            self.match(Parser.ASSIGN)
            self.state = 1338
            self.aggrOperators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalcClauseItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext,0)


        def ASSIGN(self):
            return self.getToken(Parser.ASSIGN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)


        def componentRole(self):
            return self.getTypedRuleContext(Parser.ComponentRoleContext,0)


        def getRuleIndex(self):
            return Parser.RULE_calcClauseItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalcClauseItem" ):
                listener.enterCalcClauseItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalcClauseItem" ):
                listener.exitCalcClauseItem(self)




    def calcClauseItem(self):

        localctx = Parser.CalcClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_calcClauseItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (Parser.DIMENSION - 103)) | (1 << (Parser.MEASURE - 103)) | (1 << (Parser.ATTRIBUTE - 103)) | (1 << (Parser.VIRAL - 103)))) != 0) or _la==Parser.COMPONENT:
                self.state = 1340
                self.componentRole()


            self.state = 1343
            self.componentID()
            self.state = 1344
            self.match(Parser.ASSIGN)
            self.state = 1345
            self.exprComponent(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubspaceClauseItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext,0)


        def EQ(self):
            return self.getToken(Parser.EQ, 0)

        def scalarItem(self):
            return self.getTypedRuleContext(Parser.ScalarItemContext,0)


        def getRuleIndex(self):
            return Parser.RULE_subspaceClauseItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubspaceClauseItem" ):
                listener.enterSubspaceClauseItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubspaceClauseItem" ):
                listener.exitSubspaceClauseItem(self)




    def subspaceClauseItem(self):

        localctx = Parser.SubspaceClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_subspaceClauseItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            self.componentID()
            self.state = 1348
            self.match(Parser.EQ)
            self.state = 1349
            self.scalarItem()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScalarItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_scalarItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ScalarWithCastContext(ScalarItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ScalarItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(Parser.CAST, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def constant(self):
            return self.getTypedRuleContext(Parser.ConstantContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def basicScalarType(self):
            return self.getTypedRuleContext(Parser.BasicScalarTypeContext,0)

        def STRING_CONSTANT(self):
            return self.getToken(Parser.STRING_CONSTANT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarWithCast" ):
                listener.enterScalarWithCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarWithCast" ):
                listener.exitScalarWithCast(self)


    class SimpleScalarContext(ScalarItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ScalarItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(Parser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleScalar" ):
                listener.enterSimpleScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleScalar" ):
                listener.exitSimpleScalar(self)



    def scalarItem(self):

        localctx = Parser.ScalarItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_scalarItem)
        self._la = 0 # Token type
        try:
            self.state = 1363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.NULL_CONSTANT, Parser.INTEGER_CONSTANT, Parser.NUMBER_CONSTANT, Parser.BOOLEAN_CONSTANT, Parser.STRING_CONSTANT]:
                localctx = Parser.SimpleScalarContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1351
                self.constant()
                pass
            elif token in [Parser.CAST]:
                localctx = Parser.ScalarWithCastContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1352
                self.match(Parser.CAST)
                self.state = 1353
                self.match(Parser.LPAREN)
                self.state = 1354
                self.constant()
                self.state = 1355
                self.match(Parser.COMMA)

                self.state = 1356
                self.basicScalarType()
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.COMMA:
                    self.state = 1357
                    self.match(Parser.COMMA)
                    self.state = 1358
                    self.match(Parser.STRING_CONSTANT)


                self.state = 1361
                self.match(Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinClauseWithoutUsingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def joinClauseItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.JoinClauseItemContext)
            else:
                return self.getTypedRuleContext(Parser.JoinClauseItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_joinClauseWithoutUsing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinClauseWithoutUsing" ):
                listener.enterJoinClauseWithoutUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinClauseWithoutUsing" ):
                listener.exitJoinClauseWithoutUsing(self)




    def joinClauseWithoutUsing(self):

        localctx = Parser.JoinClauseWithoutUsingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_joinClauseWithoutUsing)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self.joinClauseItem()
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 1366
                self.match(Parser.COMMA)
                self.state = 1367
                self.joinClauseItem()
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def joinClauseItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.JoinClauseItemContext)
            else:
                return self.getTypedRuleContext(Parser.JoinClauseItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def USING(self):
            return self.getToken(Parser.USING, 0)

        def componentID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext,i)


        def getRuleIndex(self):
            return Parser.RULE_joinClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinClause" ):
                listener.enterJoinClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinClause" ):
                listener.exitJoinClause(self)




    def joinClause(self):

        localctx = Parser.JoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_joinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1373
            self.joinClauseItem()
            self.state = 1378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 1374
                self.match(Parser.COMMA)
                self.state = 1375
                self.joinClauseItem()
                self.state = 1380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.USING:
                self.state = 1381
                self.match(Parser.USING)
                self.state = 1382
                self.componentID()
                self.state = 1387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Parser.COMMA:
                    self.state = 1383
                    self.match(Parser.COMMA)
                    self.state = 1384
                    self.componentID()
                    self.state = 1389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinClauseItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)


        def AS(self):
            return self.getToken(Parser.AS, 0)

        def alias(self):
            return self.getTypedRuleContext(Parser.AliasContext,0)


        def getRuleIndex(self):
            return Parser.RULE_joinClauseItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinClauseItem" ):
                listener.enterJoinClauseItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinClauseItem" ):
                listener.exitJoinClauseItem(self)




    def joinClauseItem(self):

        localctx = Parser.JoinClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_joinClauseItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            self.expr(0)
            self.state = 1395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.AS:
                self.state = 1393
                self.match(Parser.AS)
                self.state = 1394
                self.alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def filterClause(self):
            return self.getTypedRuleContext(Parser.FilterClauseContext,0)


        def calcClause(self):
            return self.getTypedRuleContext(Parser.CalcClauseContext,0)


        def joinApplyClause(self):
            return self.getTypedRuleContext(Parser.JoinApplyClauseContext,0)


        def aggrClause(self):
            return self.getTypedRuleContext(Parser.AggrClauseContext,0)


        def keepOrDropClause(self):
            return self.getTypedRuleContext(Parser.KeepOrDropClauseContext,0)


        def renameClause(self):
            return self.getTypedRuleContext(Parser.RenameClauseContext,0)


        def getRuleIndex(self):
            return Parser.RULE_joinBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinBody" ):
                listener.enterJoinBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinBody" ):
                listener.exitJoinBody(self)




    def joinBody(self):

        localctx = Parser.JoinBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_joinBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.FILTER:
                self.state = 1397
                self.filterClause()


            self.state = 1403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.CALC]:
                self.state = 1400
                self.calcClause()
                pass
            elif token in [Parser.APPLY]:
                self.state = 1401
                self.joinApplyClause()
                pass
            elif token in [Parser.AGGREGATE]:
                self.state = 1402
                self.aggrClause()
                pass
            elif token in [Parser.RPAREN, Parser.DROP, Parser.KEEP, Parser.RENAME]:
                pass
            else:
                pass
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.DROP or _la==Parser.KEEP:
                self.state = 1405
                self.keepOrDropClause()


            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.RENAME:
                self.state = 1408
                self.renameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinApplyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APPLY(self):
            return self.getToken(Parser.APPLY, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)


        def getRuleIndex(self):
            return Parser.RULE_joinApplyClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinApplyClause" ):
                listener.enterJoinApplyClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinApplyClause" ):
                listener.exitJoinApplyClause(self)




    def joinApplyClause(self):

        localctx = Parser.JoinApplyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_joinApplyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self.match(Parser.APPLY)
            self.state = 1412
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(Parser.PARTITION, 0)

        def BY(self):
            return self.getToken(Parser.BY, 0)

        def componentID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_partitionByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionByClause" ):
                listener.enterPartitionByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionByClause" ):
                listener.exitPartitionByClause(self)




    def partitionByClause(self):

        localctx = Parser.PartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_partitionByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.match(Parser.PARTITION)
            self.state = 1415
            self.match(Parser.BY)
            self.state = 1416
            self.componentID()
            self.state = 1421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 1417
                self.match(Parser.COMMA)
                self.state = 1418
                self.componentID()
                self.state = 1423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(Parser.ORDER, 0)

        def BY(self):
            return self.getToken(Parser.BY, 0)

        def orderByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.OrderByItemContext)
            else:
                return self.getTypedRuleContext(Parser.OrderByItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = Parser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.match(Parser.ORDER)
            self.state = 1425
            self.match(Parser.BY)
            self.state = 1426
            self.orderByItem()
            self.state = 1431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 1427
                self.match(Parser.COMMA)
                self.state = 1428
                self.orderByItem()
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext,0)


        def ASC(self):
            return self.getToken(Parser.ASC, 0)

        def DESC(self):
            return self.getToken(Parser.DESC, 0)

        def getRuleIndex(self):
            return Parser.RULE_orderByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByItem" ):
                listener.enterOrderByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByItem" ):
                listener.exitOrderByItem(self)




    def orderByItem(self):

        localctx = Parser.OrderByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_orderByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.componentID()
            self.state = 1436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.ASC or _la==Parser.DESC:
                self.state = 1435
                _la = self._input.LA(1)
                if not(_la==Parser.ASC or _la==Parser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WindowingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.from_ = None # LimitClauseItemContext
            self.to_ = None # LimitClauseItemContext

        def BETWEEN(self):
            return self.getToken(Parser.BETWEEN, 0)

        def AND(self):
            return self.getToken(Parser.AND, 0)

        def limitClauseItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.LimitClauseItemContext)
            else:
                return self.getTypedRuleContext(Parser.LimitClauseItemContext,i)


        def RANGE(self):
            return self.getToken(Parser.RANGE, 0)

        def DATA(self):
            return self.getToken(Parser.DATA, 0)

        def POINTS(self):
            return self.getToken(Parser.POINTS, 0)

        def getRuleIndex(self):
            return Parser.RULE_windowingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowingClause" ):
                listener.enterWindowingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowingClause" ):
                listener.exitWindowingClause(self)




    def windowingClause(self):

        localctx = Parser.WindowingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_windowingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.DATA]:
                self.state = 1438
                self.match(Parser.DATA)
                self.state = 1439
                self.match(Parser.POINTS)
                pass
            elif token in [Parser.RANGE]:
                self.state = 1440
                self.match(Parser.RANGE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1443
            self.match(Parser.BETWEEN)
            self.state = 1444
            localctx.from_ = self.limitClauseItem()
            self.state = 1445
            self.match(Parser.AND)
            self.state = 1446
            localctx.to_ = self.limitClauseItem()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignedIntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_CONSTANT(self):
            return self.getToken(Parser.INTEGER_CONSTANT, 0)

        def getRuleIndex(self):
            return Parser.RULE_signedInteger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedInteger" ):
                listener.enterSignedInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedInteger" ):
                listener.exitSignedInteger(self)




    def signedInteger(self):

        localctx = Parser.SignedIntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_signedInteger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1448
            self.match(Parser.INTEGER_CONSTANT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitClauseItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_CONSTANT(self):
            return self.getToken(Parser.INTEGER_CONSTANT, 0)

        def PRECEDING(self):
            return self.getToken(Parser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(Parser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(Parser.CURRENT, 0)

        def DATA(self):
            return self.getToken(Parser.DATA, 0)

        def POINT(self):
            return self.getToken(Parser.POINT, 0)

        def UNBOUNDED(self):
            return self.getToken(Parser.UNBOUNDED, 0)

        def getRuleIndex(self):
            return Parser.RULE_limitClauseItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClauseItem" ):
                listener.enterLimitClauseItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClauseItem" ):
                listener.exitLimitClauseItem(self)




    def limitClauseItem(self):

        localctx = Parser.LimitClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_limitClauseItem)
        try:
            self.state = 1461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1450
                self.match(Parser.INTEGER_CONSTANT)
                self.state = 1451
                self.match(Parser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1452
                self.match(Parser.INTEGER_CONSTANT)
                self.state = 1453
                self.match(Parser.FOLLOWING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1454
                self.match(Parser.CURRENT)
                self.state = 1455
                self.match(Parser.DATA)
                self.state = 1456
                self.match(Parser.POINT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1457
                self.match(Parser.UNBOUNDED)
                self.state = 1458
                self.match(Parser.PRECEDING)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1459
                self.match(Parser.UNBOUNDED)
                self.state = 1460
                self.match(Parser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_groupingClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GroupAllContext(GroupingClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.GroupingClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUP(self):
            return self.getToken(Parser.GROUP, 0)
        def ALL(self):
            return self.getToken(Parser.ALL, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupAll" ):
                listener.enterGroupAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupAll" ):
                listener.exitGroupAll(self)


    class GroupByOrExceptContext(GroupingClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.GroupingClauseContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def GROUP(self):
            return self.getToken(Parser.GROUP, 0)
        def componentID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext,i)

        def BY(self):
            return self.getToken(Parser.BY, 0)
        def EXCEPT(self):
            return self.getToken(Parser.EXCEPT, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByOrExcept" ):
                listener.enterGroupByOrExcept(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByOrExcept" ):
                listener.exitGroupByOrExcept(self)



    def groupingClause(self):

        localctx = Parser.GroupingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_groupingClause)
        self._la = 0 # Token type
        try:
            self.state = 1476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                localctx = Parser.GroupByOrExceptContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1463
                self.match(Parser.GROUP)
                self.state = 1464
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==Parser.BY or _la==Parser.EXCEPT):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1465
                self.componentID()
                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Parser.COMMA:
                    self.state = 1466
                    self.match(Parser.COMMA)
                    self.state = 1467
                    self.componentID()
                    self.state = 1472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = Parser.GroupAllContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1473
                self.match(Parser.GROUP)
                self.state = 1474
                self.match(Parser.ALL)
                self.state = 1475
                self.exprComponent(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(Parser.HAVING, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)


        def getRuleIndex(self):
            return Parser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = Parser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self.match(Parser.HAVING)
            self.state = 1479
            self.exprComponent(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varID(self):
            return self.getTypedRuleContext(Parser.VarIDContext,0)


        def inputParameterType(self):
            return self.getTypedRuleContext(Parser.InputParameterTypeContext,0)


        def DEFAULT(self):
            return self.getToken(Parser.DEFAULT, 0)

        def scalarItem(self):
            return self.getTypedRuleContext(Parser.ScalarItemContext,0)


        def getRuleIndex(self):
            return Parser.RULE_parameterItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterItem" ):
                listener.enterParameterItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterItem" ):
                listener.exitParameterItem(self)




    def parameterItem(self):

        localctx = Parser.ParameterItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_parameterItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self.varID()
            self.state = 1482
            self.inputParameterType()
            self.state = 1485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.DEFAULT:
                self.state = 1483
                self.match(Parser.DEFAULT)
                self.state = 1484
                self.scalarItem()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OutputParameterTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(Parser.ScalarTypeContext,0)


        def datasetType(self):
            return self.getTypedRuleContext(Parser.DatasetTypeContext,0)


        def componentType(self):
            return self.getTypedRuleContext(Parser.ComponentTypeContext,0)


        def getRuleIndex(self):
            return Parser.RULE_outputParameterType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputParameterType" ):
                listener.enterOutputParameterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputParameterType" ):
                listener.exitOutputParameterType(self)




    def outputParameterType(self):

        localctx = Parser.OutputParameterTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_outputParameterType)
        try:
            self.state = 1490
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.BOOLEAN, Parser.DATE, Parser.TIME_PERIOD, Parser.NUMBER, Parser.STRING, Parser.TIME, Parser.INTEGER, Parser.DURATION, Parser.SCALAR, Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1487
                self.scalarType()
                pass
            elif token in [Parser.DATASET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1488
                self.datasetType()
                pass
            elif token in [Parser.DIMENSION, Parser.MEASURE, Parser.ATTRIBUTE, Parser.VIRAL, Parser.COMPONENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1489
                self.componentType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OutputParameterTypeComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentType(self):
            return self.getTypedRuleContext(Parser.ComponentTypeContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(Parser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return Parser.RULE_outputParameterTypeComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputParameterTypeComponent" ):
                listener.enterOutputParameterTypeComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputParameterTypeComponent" ):
                listener.exitOutputParameterTypeComponent(self)




    def outputParameterTypeComponent(self):

        localctx = Parser.OutputParameterTypeComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_outputParameterTypeComponent)
        try:
            self.state = 1494
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.DIMENSION, Parser.MEASURE, Parser.ATTRIBUTE, Parser.VIRAL, Parser.COMPONENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1492
                self.componentType()
                pass
            elif token in [Parser.BOOLEAN, Parser.DATE, Parser.TIME_PERIOD, Parser.NUMBER, Parser.STRING, Parser.TIME, Parser.INTEGER, Parser.DURATION, Parser.SCALAR, Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1493
                self.scalarType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InputParameterTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(Parser.ScalarTypeContext,0)


        def datasetType(self):
            return self.getTypedRuleContext(Parser.DatasetTypeContext,0)


        def scalarSetType(self):
            return self.getTypedRuleContext(Parser.ScalarSetTypeContext,0)


        def rulesetType(self):
            return self.getTypedRuleContext(Parser.RulesetTypeContext,0)


        def componentType(self):
            return self.getTypedRuleContext(Parser.ComponentTypeContext,0)


        def getRuleIndex(self):
            return Parser.RULE_inputParameterType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputParameterType" ):
                listener.enterInputParameterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputParameterType" ):
                listener.exitInputParameterType(self)




    def inputParameterType(self):

        localctx = Parser.InputParameterTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_inputParameterType)
        try:
            self.state = 1501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.BOOLEAN, Parser.DATE, Parser.TIME_PERIOD, Parser.NUMBER, Parser.STRING, Parser.TIME, Parser.INTEGER, Parser.DURATION, Parser.SCALAR, Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1496
                self.scalarType()
                pass
            elif token in [Parser.DATASET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1497
                self.datasetType()
                pass
            elif token in [Parser.SET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1498
                self.scalarSetType()
                pass
            elif token in [Parser.DATAPOINT, Parser.HIERARCHICAL, Parser.RULESET, Parser.DATAPOINT_ON_VD, Parser.DATAPOINT_ON_VAR, Parser.HIERARCHICAL_ON_VD, Parser.HIERARCHICAL_ON_VAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1499
                self.rulesetType()
                pass
            elif token in [Parser.DIMENSION, Parser.MEASURE, Parser.ATTRIBUTE, Parser.VIRAL, Parser.COMPONENT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1500
                self.componentType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RulesetTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULESET(self):
            return self.getToken(Parser.RULESET, 0)

        def dpRuleset(self):
            return self.getTypedRuleContext(Parser.DpRulesetContext,0)


        def hrRuleset(self):
            return self.getTypedRuleContext(Parser.HrRulesetContext,0)


        def getRuleIndex(self):
            return Parser.RULE_rulesetType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulesetType" ):
                listener.enterRulesetType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulesetType" ):
                listener.exitRulesetType(self)




    def rulesetType(self):

        localctx = Parser.RulesetTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_rulesetType)
        try:
            self.state = 1506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.RULESET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1503
                self.match(Parser.RULESET)
                pass
            elif token in [Parser.DATAPOINT, Parser.DATAPOINT_ON_VD, Parser.DATAPOINT_ON_VAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1504
                self.dpRuleset()
                pass
            elif token in [Parser.HIERARCHICAL, Parser.HIERARCHICAL_ON_VD, Parser.HIERARCHICAL_ON_VAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1505
                self.hrRuleset()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScalarTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicScalarType(self):
            return self.getTypedRuleContext(Parser.BasicScalarTypeContext,0)


        def valueDomainName(self):
            return self.getTypedRuleContext(Parser.ValueDomainNameContext,0)


        def scalarTypeConstraint(self):
            return self.getTypedRuleContext(Parser.ScalarTypeConstraintContext,0)


        def NULL_CONSTANT(self):
            return self.getToken(Parser.NULL_CONSTANT, 0)

        def NOT(self):
            return self.getToken(Parser.NOT, 0)

        def getRuleIndex(self):
            return Parser.RULE_scalarType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarType" ):
                listener.enterScalarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarType" ):
                listener.exitScalarType(self)




    def scalarType(self):

        localctx = Parser.ScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_scalarType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.BOOLEAN, Parser.DATE, Parser.TIME_PERIOD, Parser.NUMBER, Parser.STRING, Parser.TIME, Parser.INTEGER, Parser.DURATION, Parser.SCALAR]:
                self.state = 1508
                self.basicScalarType()
                pass
            elif token in [Parser.IDENTIFIER]:
                self.state = 1509
                self.valueDomainName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.QLPAREN or _la==Parser.GLPAREN:
                self.state = 1512
                self.scalarTypeConstraint()


            self.state = 1519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.NOT or _la==Parser.NULL_CONSTANT:
                self.state = 1516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.NOT:
                    self.state = 1515
                    self.match(Parser.NOT)


                self.state = 1518
                self.match(Parser.NULL_CONSTANT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComponentTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentRole(self):
            return self.getTypedRuleContext(Parser.ComponentRoleContext,0)


        def LT(self):
            return self.getToken(Parser.LT, 0)

        def scalarType(self):
            return self.getTypedRuleContext(Parser.ScalarTypeContext,0)


        def MT(self):
            return self.getToken(Parser.MT, 0)

        def getRuleIndex(self):
            return Parser.RULE_componentType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponentType" ):
                listener.enterComponentType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponentType" ):
                listener.exitComponentType(self)




    def componentType(self):

        localctx = Parser.ComponentTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_componentType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self.componentRole()
            self.state = 1526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.LT:
                self.state = 1522
                self.match(Parser.LT)
                self.state = 1523
                self.scalarType()
                self.state = 1524
                self.match(Parser.MT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatasetTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATASET(self):
            return self.getToken(Parser.DATASET, 0)

        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)

        def compConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.CompConstraintContext)
            else:
                return self.getTypedRuleContext(Parser.CompConstraintContext,i)


        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_datasetType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatasetType" ):
                listener.enterDatasetType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatasetType" ):
                listener.exitDatasetType(self)




    def datasetType(self):

        localctx = Parser.DatasetTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_datasetType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1528
            self.match(Parser.DATASET)
            self.state = 1540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.GLPAREN:
                self.state = 1529
                self.match(Parser.GLPAREN)
                self.state = 1530
                self.compConstraint()
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Parser.COMMA:
                    self.state = 1531
                    self.match(Parser.COMMA)
                    self.state = 1532
                    self.compConstraint()
                    self.state = 1537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1538
                self.match(Parser.GRPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvalDatasetTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datasetType(self):
            return self.getTypedRuleContext(Parser.DatasetTypeContext,0)


        def scalarType(self):
            return self.getTypedRuleContext(Parser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return Parser.RULE_evalDatasetType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvalDatasetType" ):
                listener.enterEvalDatasetType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvalDatasetType" ):
                listener.exitEvalDatasetType(self)




    def evalDatasetType(self):

        localctx = Parser.EvalDatasetTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_evalDatasetType)
        try:
            self.state = 1544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.DATASET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1542
                self.datasetType()
                pass
            elif token in [Parser.BOOLEAN, Parser.DATE, Parser.TIME_PERIOD, Parser.NUMBER, Parser.STRING, Parser.TIME, Parser.INTEGER, Parser.DURATION, Parser.SCALAR, Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1543
                self.scalarType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScalarSetTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(Parser.SET, 0)

        def LT(self):
            return self.getToken(Parser.LT, 0)

        def scalarType(self):
            return self.getTypedRuleContext(Parser.ScalarTypeContext,0)


        def MT(self):
            return self.getToken(Parser.MT, 0)

        def getRuleIndex(self):
            return Parser.RULE_scalarSetType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarSetType" ):
                listener.enterScalarSetType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarSetType" ):
                listener.exitScalarSetType(self)




    def scalarSetType(self):

        localctx = Parser.ScalarSetTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_scalarSetType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.match(Parser.SET)
            self.state = 1551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.LT:
                self.state = 1547
                self.match(Parser.LT)
                self.state = 1548
                self.scalarType()
                self.state = 1549
                self.match(Parser.MT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DpRulesetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_dpRuleset

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DataPointVdContext(DpRulesetContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.DpRulesetContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATAPOINT_ON_VD(self):
            return self.getToken(Parser.DATAPOINT_ON_VD, 0)
        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)
        def valueDomainName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ValueDomainNameContext)
            else:
                return self.getTypedRuleContext(Parser.ValueDomainNameContext,i)

        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)
        def MUL(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.MUL)
            else:
                return self.getToken(Parser.MUL, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataPointVd" ):
                listener.enterDataPointVd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataPointVd" ):
                listener.exitDataPointVd(self)


    class DataPointVarContext(DpRulesetContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.DpRulesetContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATAPOINT_ON_VAR(self):
            return self.getToken(Parser.DATAPOINT_ON_VAR, 0)
        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)
        def varID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.VarIDContext)
            else:
                return self.getTypedRuleContext(Parser.VarIDContext,i)

        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)
        def MUL(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.MUL)
            else:
                return self.getToken(Parser.MUL, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataPointVar" ):
                listener.enterDataPointVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataPointVar" ):
                listener.exitDataPointVar(self)


    class DataPointContext(DpRulesetContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.DpRulesetContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATAPOINT(self):
            return self.getToken(Parser.DATAPOINT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataPoint" ):
                listener.enterDataPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataPoint" ):
                listener.exitDataPoint(self)



    def dpRuleset(self):

        localctx = Parser.DpRulesetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dpRuleset)
        self._la = 0 # Token type
        try:
            self.state = 1582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.DATAPOINT]:
                localctx = Parser.DataPointContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1553
                self.match(Parser.DATAPOINT)
                pass
            elif token in [Parser.DATAPOINT_ON_VD]:
                localctx = Parser.DataPointVdContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1554
                self.match(Parser.DATAPOINT_ON_VD)
                self.state = 1566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.GLPAREN:
                    self.state = 1555
                    self.match(Parser.GLPAREN)
                    self.state = 1556
                    self.valueDomainName()
                    self.state = 1561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==Parser.MUL:
                        self.state = 1557
                        self.match(Parser.MUL)
                        self.state = 1558
                        self.valueDomainName()
                        self.state = 1563
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1564
                    self.match(Parser.GRPAREN)


                pass
            elif token in [Parser.DATAPOINT_ON_VAR]:
                localctx = Parser.DataPointVarContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1568
                self.match(Parser.DATAPOINT_ON_VAR)
                self.state = 1580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.GLPAREN:
                    self.state = 1569
                    self.match(Parser.GLPAREN)
                    self.state = 1570
                    self.varID()
                    self.state = 1575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==Parser.MUL:
                        self.state = 1571
                        self.match(Parser.MUL)
                        self.state = 1572
                        self.varID()
                        self.state = 1577
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1578
                    self.match(Parser.GRPAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HrRulesetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_hrRuleset

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HrRulesetVdTypeContext(HrRulesetContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.HrRulesetContext
            super().__init__(parser)
            self.vdName = None # Token
            self.copyFrom(ctx)

        def HIERARCHICAL_ON_VD(self):
            return self.getToken(Parser.HIERARCHICAL_ON_VD, 0)
        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)
        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)
        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)
        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def valueDomainName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ValueDomainNameContext)
            else:
                return self.getTypedRuleContext(Parser.ValueDomainNameContext,i)

        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def MUL(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.MUL)
            else:
                return self.getToken(Parser.MUL, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHrRulesetVdType" ):
                listener.enterHrRulesetVdType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHrRulesetVdType" ):
                listener.exitHrRulesetVdType(self)


    class HrRulesetVarTypeContext(HrRulesetContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.HrRulesetContext
            super().__init__(parser)
            self.varName = None # VarIDContext
            self.copyFrom(ctx)

        def HIERARCHICAL_ON_VAR(self):
            return self.getToken(Parser.HIERARCHICAL_ON_VAR, 0)
        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)
        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)
        def varID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.VarIDContext)
            else:
                return self.getTypedRuleContext(Parser.VarIDContext,i)

        def LPAREN(self):
            return self.getToken(Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(Parser.RPAREN, 0)
        def MUL(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.MUL)
            else:
                return self.getToken(Parser.MUL, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHrRulesetVarType" ):
                listener.enterHrRulesetVarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHrRulesetVarType" ):
                listener.exitHrRulesetVarType(self)


    class HrRulesetTypeContext(HrRulesetContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.HrRulesetContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HIERARCHICAL(self):
            return self.getToken(Parser.HIERARCHICAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHrRulesetType" ):
                listener.enterHrRulesetType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHrRulesetType" ):
                listener.exitHrRulesetType(self)



    def hrRuleset(self):

        localctx = Parser.HrRulesetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_hrRuleset)
        self._la = 0 # Token type
        try:
            self.state = 1624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.HIERARCHICAL]:
                localctx = Parser.HrRulesetTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1584
                self.match(Parser.HIERARCHICAL)
                pass
            elif token in [Parser.HIERARCHICAL_ON_VD]:
                localctx = Parser.HrRulesetVdTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1585
                self.match(Parser.HIERARCHICAL_ON_VD)
                self.state = 1602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.GLPAREN:
                    self.state = 1586
                    self.match(Parser.GLPAREN)
                    self.state = 1587
                    localctx.vdName = self.match(Parser.IDENTIFIER)
                    self.state = 1599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Parser.LPAREN:
                        self.state = 1588
                        self.match(Parser.LPAREN)
                        self.state = 1589
                        self.valueDomainName()
                        self.state = 1594
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==Parser.MUL:
                            self.state = 1590
                            self.match(Parser.MUL)
                            self.state = 1591
                            self.valueDomainName()
                            self.state = 1596
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1597
                        self.match(Parser.RPAREN)


                    self.state = 1601
                    self.match(Parser.GRPAREN)


                pass
            elif token in [Parser.HIERARCHICAL_ON_VAR]:
                localctx = Parser.HrRulesetVarTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1604
                self.match(Parser.HIERARCHICAL_ON_VAR)
                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Parser.GLPAREN:
                    self.state = 1605
                    self.match(Parser.GLPAREN)
                    self.state = 1606
                    localctx.varName = self.varID()
                    self.state = 1618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Parser.LPAREN:
                        self.state = 1607
                        self.match(Parser.LPAREN)
                        self.state = 1608
                        self.varID()
                        self.state = 1613
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==Parser.MUL:
                            self.state = 1609
                            self.match(Parser.MUL)
                            self.state = 1610
                            self.varID()
                            self.state = 1615
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1616
                        self.match(Parser.RPAREN)


                    self.state = 1620
                    self.match(Parser.GRPAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueDomainNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_valueDomainName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueDomainName" ):
                listener.enterValueDomainName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueDomainName" ):
                listener.exitValueDomainName(self)




    def valueDomainName(self):

        localctx = Parser.ValueDomainNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_valueDomainName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1626
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RulesetIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_rulesetID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulesetID" ):
                listener.enterRulesetID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulesetID" ):
                listener.exitRulesetID(self)




    def rulesetID(self):

        localctx = Parser.RulesetIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_rulesetID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RulesetSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signature(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.SignatureContext)
            else:
                return self.getTypedRuleContext(Parser.SignatureContext,i)


        def VALUE_DOMAIN(self):
            return self.getToken(Parser.VALUE_DOMAIN, 0)

        def VARIABLE(self):
            return self.getToken(Parser.VARIABLE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_rulesetSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRulesetSignature" ):
                listener.enterRulesetSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRulesetSignature" ):
                listener.exitRulesetSignature(self)




    def rulesetSignature(self):

        localctx = Parser.RulesetSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_rulesetSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1630
            _la = self._input.LA(1)
            if not(_la==Parser.VALUE_DOMAIN or _la==Parser.VARIABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1631
            self.signature()
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 1632
                self.match(Parser.COMMA)
                self.state = 1633
                self.signature()
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varID(self):
            return self.getTypedRuleContext(Parser.VarIDContext,0)


        def AS(self):
            return self.getToken(Parser.AS, 0)

        def alias(self):
            return self.getTypedRuleContext(Parser.AliasContext,0)


        def getRuleIndex(self):
            return Parser.RULE_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignature" ):
                listener.enterSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignature" ):
                listener.exitSignature(self)




    def signature(self):

        localctx = Parser.SignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_signature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self.varID()
            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.AS:
                self.state = 1640
                self.match(Parser.AS)
                self.state = 1641
                self.alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleClauseDatapointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleItemDatapoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.RuleItemDatapointContext)
            else:
                return self.getTypedRuleContext(Parser.RuleItemDatapointContext,i)


        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.EOL)
            else:
                return self.getToken(Parser.EOL, i)

        def getRuleIndex(self):
            return Parser.RULE_ruleClauseDatapoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleClauseDatapoint" ):
                listener.enterRuleClauseDatapoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleClauseDatapoint" ):
                listener.exitRuleClauseDatapoint(self)




    def ruleClauseDatapoint(self):

        localctx = Parser.RuleClauseDatapointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_ruleClauseDatapoint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.ruleItemDatapoint()
            self.state = 1649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.EOL:
                self.state = 1645
                self.match(Parser.EOL)
                self.state = 1646
                self.ruleItemDatapoint()
                self.state = 1651
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleItemDatapointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ruleName = None # Token
            self.antecedentContiditon = None # ExprComponentContext
            self.consequentCondition = None # ExprComponentContext

        def exprComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ExprComponentContext)
            else:
                return self.getTypedRuleContext(Parser.ExprComponentContext,i)


        def COLON(self):
            return self.getToken(Parser.COLON, 0)

        def WHEN(self):
            return self.getToken(Parser.WHEN, 0)

        def THEN(self):
            return self.getToken(Parser.THEN, 0)

        def erCode(self):
            return self.getTypedRuleContext(Parser.ErCodeContext,0)


        def erLevel(self):
            return self.getTypedRuleContext(Parser.ErLevelContext,0)


        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_ruleItemDatapoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleItemDatapoint" ):
                listener.enterRuleItemDatapoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleItemDatapoint" ):
                listener.exitRuleItemDatapoint(self)




    def ruleItemDatapoint(self):

        localctx = Parser.RuleItemDatapointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_ruleItemDatapoint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1652
                localctx.ruleName = self.match(Parser.IDENTIFIER)
                self.state = 1653
                self.match(Parser.COLON)


            self.state = 1660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.WHEN:
                self.state = 1656
                self.match(Parser.WHEN)
                self.state = 1657
                localctx.antecedentContiditon = self.exprComponent(0)
                self.state = 1658
                self.match(Parser.THEN)


            self.state = 1662
            localctx.consequentCondition = self.exprComponent(0)
            self.state = 1664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.ERRORCODE:
                self.state = 1663
                self.erCode()


            self.state = 1667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.ERRORLEVEL:
                self.state = 1666
                self.erLevel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleClauseHierarchicalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ruleItemHierarchical(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.RuleItemHierarchicalContext)
            else:
                return self.getTypedRuleContext(Parser.RuleItemHierarchicalContext,i)


        def EOL(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.EOL)
            else:
                return self.getToken(Parser.EOL, i)

        def getRuleIndex(self):
            return Parser.RULE_ruleClauseHierarchical

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleClauseHierarchical" ):
                listener.enterRuleClauseHierarchical(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleClauseHierarchical" ):
                listener.exitRuleClauseHierarchical(self)




    def ruleClauseHierarchical(self):

        localctx = Parser.RuleClauseHierarchicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_ruleClauseHierarchical)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            self.ruleItemHierarchical()
            self.state = 1674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.EOL:
                self.state = 1670
                self.match(Parser.EOL)
                self.state = 1671
                self.ruleItemHierarchical()
                self.state = 1676
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RuleItemHierarchicalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ruleName = None # Token

        def codeItemRelation(self):
            return self.getTypedRuleContext(Parser.CodeItemRelationContext,0)


        def COLON(self):
            return self.getToken(Parser.COLON, 0)

        def erCode(self):
            return self.getTypedRuleContext(Parser.ErCodeContext,0)


        def erLevel(self):
            return self.getTypedRuleContext(Parser.ErLevelContext,0)


        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_ruleItemHierarchical

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuleItemHierarchical" ):
                listener.enterRuleItemHierarchical(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuleItemHierarchical" ):
                listener.exitRuleItemHierarchical(self)




    def ruleItemHierarchical(self):

        localctx = Parser.RuleItemHierarchicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ruleItemHierarchical)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1677
                localctx.ruleName = self.match(Parser.IDENTIFIER)
                self.state = 1678
                self.match(Parser.COLON)


            self.state = 1681
            self.codeItemRelation()
            self.state = 1683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.ERRORCODE:
                self.state = 1682
                self.erCode()


            self.state = 1686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.ERRORLEVEL:
                self.state = 1685
                self.erLevel()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HierRuleSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE(self):
            return self.getToken(Parser.RULE, 0)

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def VALUE_DOMAIN(self):
            return self.getToken(Parser.VALUE_DOMAIN, 0)

        def VARIABLE(self):
            return self.getToken(Parser.VARIABLE, 0)

        def CONDITION(self):
            return self.getToken(Parser.CONDITION, 0)

        def valueDomainSignature(self):
            return self.getTypedRuleContext(Parser.ValueDomainSignatureContext,0)


        def getRuleIndex(self):
            return Parser.RULE_hierRuleSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHierRuleSignature" ):
                listener.enterHierRuleSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHierRuleSignature" ):
                listener.exitHierRuleSignature(self)




    def hierRuleSignature(self):

        localctx = Parser.HierRuleSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_hierRuleSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            _la = self._input.LA(1)
            if not(_la==Parser.VALUE_DOMAIN or _la==Parser.VARIABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.CONDITION:
                self.state = 1689
                self.match(Parser.CONDITION)
                self.state = 1690
                self.valueDomainSignature()


            self.state = 1693
            self.match(Parser.RULE)
            self.state = 1694
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueDomainSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signature(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.SignatureContext)
            else:
                return self.getTypedRuleContext(Parser.SignatureContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_valueDomainSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueDomainSignature" ):
                listener.enterValueDomainSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueDomainSignature" ):
                listener.exitValueDomainSignature(self)




    def valueDomainSignature(self):

        localctx = Parser.ValueDomainSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_valueDomainSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.signature()
            self.state = 1701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 1697
                self.match(Parser.COMMA)
                self.state = 1698
                self.signature()
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodeItemRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.codetemRef = None # ValueDomainValueContext

        def codeItemRelationClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.CodeItemRelationClauseContext)
            else:
                return self.getTypedRuleContext(Parser.CodeItemRelationClauseContext,i)


        def valueDomainValue(self):
            return self.getTypedRuleContext(Parser.ValueDomainValueContext,0)


        def WHEN(self):
            return self.getToken(Parser.WHEN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)


        def THEN(self):
            return self.getToken(Parser.THEN, 0)

        def comparisonOperand(self):
            return self.getTypedRuleContext(Parser.ComparisonOperandContext,0)


        def getRuleIndex(self):
            return Parser.RULE_codeItemRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeItemRelation" ):
                listener.enterCodeItemRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeItemRelation" ):
                listener.exitCodeItemRelation(self)




    def codeItemRelation(self):

        localctx = Parser.CodeItemRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_codeItemRelation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.WHEN:
                self.state = 1704
                self.match(Parser.WHEN)
                self.state = 1705
                self.exprComponent(0)
                self.state = 1706
                self.match(Parser.THEN)


            self.state = 1710
            localctx.codetemRef = self.valueDomainValue()
            self.state = 1712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Parser.EQ) | (1 << Parser.LT) | (1 << Parser.MT) | (1 << Parser.ME) | (1 << Parser.NEQ) | (1 << Parser.LE))) != 0):
                self.state = 1711
                self.comparisonOperand()


            self.state = 1714
            self.codeItemRelationClause()
            self.state = 1718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.PLUS or _la==Parser.MINUS or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & ((1 << (Parser.INTEGER_CONSTANT - 241)) | (1 << (Parser.NUMBER_CONSTANT - 241)) | (1 << (Parser.IDENTIFIER - 241)))) != 0):
                self.state = 1715
                self.codeItemRelationClause()
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodeItemRelationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.opAdd = None # Token
            self.rightCodeItem = None # ValueDomainValueContext
            self.rightCondition = None # ExprComponentContext

        def valueDomainValue(self):
            return self.getTypedRuleContext(Parser.ValueDomainValueContext,0)


        def QLPAREN(self):
            return self.getToken(Parser.QLPAREN, 0)

        def QRPAREN(self):
            return self.getToken(Parser.QRPAREN, 0)

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)


        def PLUS(self):
            return self.getToken(Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(Parser.MINUS, 0)

        def getRuleIndex(self):
            return Parser.RULE_codeItemRelationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeItemRelationClause" ):
                listener.enterCodeItemRelationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeItemRelationClause" ):
                listener.exitCodeItemRelationClause(self)




    def codeItemRelationClause(self):

        localctx = Parser.CodeItemRelationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_codeItemRelationClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.PLUS or _la==Parser.MINUS:
                self.state = 1721
                localctx.opAdd = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==Parser.PLUS or _la==Parser.MINUS):
                    localctx.opAdd = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1724
            localctx.rightCodeItem = self.valueDomainValue()
            self.state = 1729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.QLPAREN:
                self.state = 1725
                self.match(Parser.QLPAREN)
                self.state = 1726
                localctx.rightCondition = self.exprComponent(0)
                self.state = 1727
                self.match(Parser.QRPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueDomainValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def INTEGER_CONSTANT(self):
            return self.getToken(Parser.INTEGER_CONSTANT, 0)

        def NUMBER_CONSTANT(self):
            return self.getToken(Parser.NUMBER_CONSTANT, 0)

        def getRuleIndex(self):
            return Parser.RULE_valueDomainValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueDomainValue" ):
                listener.enterValueDomainValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueDomainValue" ):
                listener.exitValueDomainValue(self)




    def valueDomainValue(self):

        localctx = Parser.ValueDomainValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_valueDomainValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            _la = self._input.LA(1)
            if not(((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & ((1 << (Parser.INTEGER_CONSTANT - 241)) | (1 << (Parser.NUMBER_CONSTANT - 241)) | (1 << (Parser.IDENTIFIER - 241)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScalarTypeConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Parser.RULE_scalarTypeConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RangeConstraintContext(ScalarTypeConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ScalarTypeConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)
        def scalarItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ScalarItemContext)
            else:
                return self.getTypedRuleContext(Parser.ScalarItemContext,i)

        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeConstraint" ):
                listener.enterRangeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeConstraint" ):
                listener.exitRangeConstraint(self)


    class ConditionConstraintContext(ScalarTypeConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a Parser.ScalarTypeConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QLPAREN(self):
            return self.getToken(Parser.QLPAREN, 0)
        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)

        def QRPAREN(self):
            return self.getToken(Parser.QRPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionConstraint" ):
                listener.enterConditionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionConstraint" ):
                listener.exitConditionConstraint(self)



    def scalarTypeConstraint(self):

        localctx = Parser.ScalarTypeConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_scalarTypeConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.QLPAREN]:
                localctx = Parser.ConditionConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1733
                self.match(Parser.QLPAREN)
                self.state = 1734
                self.exprComponent(0)
                self.state = 1735
                self.match(Parser.QRPAREN)
                pass
            elif token in [Parser.GLPAREN]:
                localctx = Parser.RangeConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1737
                self.match(Parser.GLPAREN)
                self.state = 1738
                self.scalarItem()
                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Parser.COMMA:
                    self.state = 1739
                    self.match(Parser.COMMA)
                    self.state = 1740
                    self.scalarItem()
                    self.state = 1745
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1746
                self.match(Parser.GRPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def componentType(self):
            return self.getTypedRuleContext(Parser.ComponentTypeContext,0)


        def componentID(self):
            return self.getTypedRuleContext(Parser.ComponentIDContext,0)


        def multModifier(self):
            return self.getTypedRuleContext(Parser.MultModifierContext,0)


        def getRuleIndex(self):
            return Parser.RULE_compConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompConstraint" ):
                listener.enterCompConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompConstraint" ):
                listener.exitCompConstraint(self)




    def compConstraint(self):

        localctx = Parser.CompConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_compConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1750
            self.componentType()
            self.state = 1753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.IDENTIFIER]:
                self.state = 1751
                self.componentID()
                pass
            elif token in [Parser.OPTIONAL]:
                self.state = 1752
                self.multModifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def PLUS(self):
            return self.getToken(Parser.PLUS, 0)

        def MUL(self):
            return self.getToken(Parser.MUL, 0)

        def getRuleIndex(self):
            return Parser.RULE_multModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultModifier" ):
                listener.enterMultModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultModifier" ):
                listener.exitMultModifier(self)




    def multModifier(self):

        localctx = Parser.MultModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_multModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.match(Parser.OPTIONAL)
            self.state = 1757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Parser.PLUS or _la==Parser.MUL:
                self.state = 1756
                _la = self._input.LA(1)
                if not(_la==Parser.PLUS or _la==Parser.MUL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValidationOutputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVALID(self):
            return self.getToken(Parser.INVALID, 0)

        def ALL_MEASURES(self):
            return self.getToken(Parser.ALL_MEASURES, 0)

        def ALL(self):
            return self.getToken(Parser.ALL, 0)

        def getRuleIndex(self):
            return Parser.RULE_validationOutput

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValidationOutput" ):
                listener.enterValidationOutput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValidationOutput" ):
                listener.exitValidationOutput(self)




    def validationOutput(self):

        localctx = Parser.ValidationOutputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_validationOutput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1759
            _la = self._input.LA(1)
            if not(_la==Parser.ALL or _la==Parser.INVALID or _la==Parser.ALL_MEASURES):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValidationModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_NULL(self):
            return self.getToken(Parser.NON_NULL, 0)

        def NON_ZERO(self):
            return self.getToken(Parser.NON_ZERO, 0)

        def PARTIAL_NULL(self):
            return self.getToken(Parser.PARTIAL_NULL, 0)

        def PARTIAL_ZERO(self):
            return self.getToken(Parser.PARTIAL_ZERO, 0)

        def ALWAYS_NULL(self):
            return self.getToken(Parser.ALWAYS_NULL, 0)

        def ALWAYS_ZERO(self):
            return self.getToken(Parser.ALWAYS_ZERO, 0)

        def getRuleIndex(self):
            return Parser.RULE_validationMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValidationMode" ):
                listener.enterValidationMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValidationMode" ):
                listener.exitValidationMode(self)




    def validationMode(self):

        localctx = Parser.ValidationModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_validationMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1761
            _la = self._input.LA(1)
            if not(((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (Parser.NON_NULL - 225)) | (1 << (Parser.NON_ZERO - 225)) | (1 << (Parser.PARTIAL_NULL - 225)) | (1 << (Parser.PARTIAL_ZERO - 225)) | (1 << (Parser.ALWAYS_NULL - 225)) | (1 << (Parser.ALWAYS_ZERO - 225)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONDITION(self):
            return self.getToken(Parser.CONDITION, 0)

        def componentID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ComponentIDContext)
            else:
                return self.getTypedRuleContext(Parser.ComponentIDContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_conditionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionClause" ):
                listener.enterConditionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionClause" ):
                listener.exitConditionClause(self)




    def conditionClause(self):

        localctx = Parser.ConditionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_conditionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1763
            self.match(Parser.CONDITION)
            self.state = 1764
            self.componentID()
            self.state = 1769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 1765
                self.match(Parser.COMMA)
                self.state = 1766
                self.componentID()
                self.state = 1771
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InputModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATASET(self):
            return self.getToken(Parser.DATASET, 0)

        def DATASET_PRIORITY(self):
            return self.getToken(Parser.DATASET_PRIORITY, 0)

        def getRuleIndex(self):
            return Parser.RULE_inputMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputMode" ):
                listener.enterInputMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputMode" ):
                listener.exitInputMode(self)




    def inputMode(self):

        localctx = Parser.InputModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_inputMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1772
            _la = self._input.LA(1)
            if not(_la==Parser.DATASET or _la==Parser.DATASET_PRIORITY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImbalanceExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMBALANCE(self):
            return self.getToken(Parser.IMBALANCE, 0)

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)


        def getRuleIndex(self):
            return Parser.RULE_imbalanceExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImbalanceExpr" ):
                listener.enterImbalanceExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImbalanceExpr" ):
                listener.exitImbalanceExpr(self)




    def imbalanceExpr(self):

        localctx = Parser.ImbalanceExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_imbalanceExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1774
            self.match(Parser.IMBALANCE)
            self.state = 1775
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InputModeHierarchyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE(self):
            return self.getToken(Parser.RULE, 0)

        def DATASET(self):
            return self.getToken(Parser.DATASET, 0)

        def RULE_PRIORITY(self):
            return self.getToken(Parser.RULE_PRIORITY, 0)

        def getRuleIndex(self):
            return Parser.RULE_inputModeHierarchy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputModeHierarchy" ):
                listener.enterInputModeHierarchy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputModeHierarchy" ):
                listener.exitInputModeHierarchy(self)




    def inputModeHierarchy(self):

        localctx = Parser.InputModeHierarchyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_inputModeHierarchy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            _la = self._input.LA(1)
            if not(_la==Parser.DATASET or _la==Parser.RULE or _la==Parser.RULE_PRIORITY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OutputModeHierarchyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPUTED(self):
            return self.getToken(Parser.COMPUTED, 0)

        def ALL(self):
            return self.getToken(Parser.ALL, 0)

        def getRuleIndex(self):
            return Parser.RULE_outputModeHierarchy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputModeHierarchy" ):
                listener.enterOutputModeHierarchy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputModeHierarchy" ):
                listener.exitOutputModeHierarchy(self)




    def outputModeHierarchy(self):

        localctx = Parser.OutputModeHierarchyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_outputModeHierarchy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            _la = self._input.LA(1)
            if not(_la==Parser.ALL or _la==Parser.COMPUTED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = Parser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1781
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_varID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarID" ):
                listener.enterVarID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarID" ):
                listener.exitVarID(self)




    def varID(self):

        localctx = Parser.VarIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_varID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleComponentIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_simpleComponentId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleComponentId" ):
                listener.enterSimpleComponentId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleComponentId" ):
                listener.exitSimpleComponentId(self)




    def simpleComponentId(self):

        localctx = Parser.SimpleComponentIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_simpleComponentId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1785
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComponentIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.IDENTIFIER)
            else:
                return self.getToken(Parser.IDENTIFIER, i)

        def MEMBERSHIP(self):
            return self.getToken(Parser.MEMBERSHIP, 0)

        def getRuleIndex(self):
            return Parser.RULE_componentID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponentID" ):
                listener.enterComponentID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponentID" ):
                listener.exitComponentID(self)




    def componentID(self):

        localctx = Parser.ComponentIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_componentID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1787
            self.match(Parser.IDENTIFIER)
            self.state = 1790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1788
                self.match(Parser.MEMBERSHIP)
                self.state = 1789
                self.match(Parser.IDENTIFIER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLPAREN(self):
            return self.getToken(Parser.GLPAREN, 0)

        def scalarItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Parser.ScalarItemContext)
            else:
                return self.getTypedRuleContext(Parser.ScalarItemContext,i)


        def GRPAREN(self):
            return self.getToken(Parser.GRPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Parser.COMMA)
            else:
                return self.getToken(Parser.COMMA, i)

        def getRuleIndex(self):
            return Parser.RULE_lists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLists" ):
                listener.enterLists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLists" ):
                listener.exitLists(self)




    def lists(self):

        localctx = Parser.ListsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_lists)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1792
            self.match(Parser.GLPAREN)
            self.state = 1793
            self.scalarItem()
            self.state = 1798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Parser.COMMA:
                self.state = 1794
                self.match(Parser.COMMA)
                self.state = 1795
                self.scalarItem()
                self.state = 1800
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1801
            self.match(Parser.GRPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ErCodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERRORCODE(self):
            return self.getToken(Parser.ERRORCODE, 0)

        def constant(self):
            return self.getTypedRuleContext(Parser.ConstantContext,0)


        def getRuleIndex(self):
            return Parser.RULE_erCode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErCode" ):
                listener.enterErCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErCode" ):
                listener.exitErCode(self)




    def erCode(self):

        localctx = Parser.ErCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_erCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.match(Parser.ERRORCODE)
            self.state = 1804
            self.constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ErLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERRORLEVEL(self):
            return self.getToken(Parser.ERRORLEVEL, 0)

        def constant(self):
            return self.getTypedRuleContext(Parser.ConstantContext,0)


        def getRuleIndex(self):
            return Parser.RULE_erLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErLevel" ):
                listener.enterErLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErLevel" ):
                listener.exitErLevel(self)




    def erLevel(self):

        localctx = Parser.ErLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_erLevel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1806
            self.match(Parser.ERRORLEVEL)
            self.state = 1807
            self.constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MT(self):
            return self.getToken(Parser.MT, 0)

        def ME(self):
            return self.getToken(Parser.ME, 0)

        def LE(self):
            return self.getToken(Parser.LE, 0)

        def LT(self):
            return self.getToken(Parser.LT, 0)

        def EQ(self):
            return self.getToken(Parser.EQ, 0)

        def NEQ(self):
            return self.getToken(Parser.NEQ, 0)

        def getRuleIndex(self):
            return Parser.RULE_comparisonOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperand" ):
                listener.enterComparisonOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperand" ):
                listener.exitComparisonOperand(self)




    def comparisonOperand(self):

        localctx = Parser.ComparisonOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_comparisonOperand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1809
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Parser.EQ) | (1 << Parser.LT) | (1 << Parser.MT) | (1 << Parser.ME) | (1 << Parser.NEQ) | (1 << Parser.LE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionalExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(Parser.ExprContext,0)


        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def getRuleIndex(self):
            return Parser.RULE_optionalExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalExpr" ):
                listener.enterOptionalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalExpr" ):
                listener.exitOptionalExpr(self)




    def optionalExpr(self):

        localctx = Parser.OptionalExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_optionalExpr)
        try:
            self.state = 1813
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.LPAREN, Parser.PLUS, Parser.MINUS, Parser.EVAL, Parser.IF, Parser.CASE, Parser.CURRENT_DATE, Parser.DATEDIFF, Parser.DATEADD, Parser.YEAR_OP, Parser.MONTH_OP, Parser.DAYOFMONTH, Parser.DAYOFYEAR, Parser.DAYTOYEAR, Parser.DAYTOMONTH, Parser.YEARTODAY, Parser.MONTHTODAY, Parser.NOT, Parser.BETWEEN, Parser.NULL_CONSTANT, Parser.ISNULL, Parser.UNION, Parser.SYMDIFF, Parser.INTERSECT, Parser.RANDOM, Parser.CHECK, Parser.EXISTS_IN, Parser.MIN, Parser.MAX, Parser.ABS, Parser.LN, Parser.LOG, Parser.TRUNC, Parser.ROUND, Parser.POWER, Parser.MOD, Parser.LEN, Parser.TRIM, Parser.UCASE, Parser.LCASE, Parser.SUBSTR, Parser.SUM, Parser.AVG, Parser.MEDIAN, Parser.COUNT, Parser.EXP, Parser.CHARSET_MATCH, Parser.NVL, Parser.HIERARCHY, Parser.LTRIM, Parser.RTRIM, Parser.INSTR, Parser.REPLACE, Parser.CEIL, Parser.FLOOR, Parser.SQRT, Parser.SETDIFF, Parser.STDDEV_POP, Parser.STDDEV_SAMP, Parser.VAR_POP, Parser.VAR_SAMP, Parser.FIRST_VALUE, Parser.LAST_VALUE, Parser.LAG, Parser.LEAD, Parser.RATIO_TO_REPORT, Parser.FILL_TIME_SERIES, Parser.FLOW_TO_STOCK, Parser.STOCK_TO_FLOW, Parser.TIMESHIFT, Parser.INNER_JOIN, Parser.LEFT_JOIN, Parser.CROSS_JOIN, Parser.FULL_JOIN, Parser.PERIOD_INDICATOR, Parser.TIME_AGG, Parser.CAST, Parser.CHECK_DATAPOINT, Parser.CHECK_HIERARCHY, Parser.INTEGER_CONSTANT, Parser.NUMBER_CONSTANT, Parser.BOOLEAN_CONSTANT, Parser.STRING_CONSTANT, Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1811
                self.expr(0)
                pass
            elif token in [Parser.OPTIONAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1812
                self.match(Parser.OPTIONAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionalExprComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprComponent(self):
            return self.getTypedRuleContext(Parser.ExprComponentContext,0)


        def OPTIONAL(self):
            return self.getToken(Parser.OPTIONAL, 0)

        def getRuleIndex(self):
            return Parser.RULE_optionalExprComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalExprComponent" ):
                listener.enterOptionalExprComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalExprComponent" ):
                listener.exitOptionalExprComponent(self)




    def optionalExprComponent(self):

        localctx = Parser.OptionalExprComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_optionalExprComponent)
        try:
            self.state = 1817
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.LPAREN, Parser.PLUS, Parser.MINUS, Parser.EVAL, Parser.IF, Parser.CURRENT_DATE, Parser.DATEDIFF, Parser.DATEADD, Parser.YEAR_OP, Parser.MONTH_OP, Parser.DAYOFMONTH, Parser.DAYOFYEAR, Parser.DAYTOYEAR, Parser.DAYTOMONTH, Parser.YEARTODAY, Parser.MONTHTODAY, Parser.NOT, Parser.BETWEEN, Parser.NULL_CONSTANT, Parser.ISNULL, Parser.RANDOM, Parser.RANK, Parser.MIN, Parser.MAX, Parser.ABS, Parser.LN, Parser.LOG, Parser.TRUNC, Parser.ROUND, Parser.POWER, Parser.MOD, Parser.LEN, Parser.TRIM, Parser.UCASE, Parser.LCASE, Parser.SUBSTR, Parser.SUM, Parser.AVG, Parser.MEDIAN, Parser.COUNT, Parser.EXP, Parser.CHARSET_MATCH, Parser.NVL, Parser.LTRIM, Parser.RTRIM, Parser.INSTR, Parser.REPLACE, Parser.CEIL, Parser.FLOOR, Parser.SQRT, Parser.STDDEV_POP, Parser.STDDEV_SAMP, Parser.VAR_POP, Parser.VAR_SAMP, Parser.FIRST_VALUE, Parser.LAST_VALUE, Parser.LAG, Parser.LEAD, Parser.RATIO_TO_REPORT, Parser.FILL_TIME_SERIES, Parser.FLOW_TO_STOCK, Parser.STOCK_TO_FLOW, Parser.TIMESHIFT, Parser.PERIOD_INDICATOR, Parser.TIME_AGG, Parser.CAST, Parser.INTEGER_CONSTANT, Parser.NUMBER_CONSTANT, Parser.BOOLEAN_CONSTANT, Parser.STRING_CONSTANT, Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1815
                self.exprComponent(0)
                pass
            elif token in [Parser.OPTIONAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1816
                self.match(Parser.OPTIONAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComponentRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEASURE(self):
            return self.getToken(Parser.MEASURE, 0)

        def COMPONENT(self):
            return self.getToken(Parser.COMPONENT, 0)

        def DIMENSION(self):
            return self.getToken(Parser.DIMENSION, 0)

        def ATTRIBUTE(self):
            return self.getToken(Parser.ATTRIBUTE, 0)

        def viralAttribute(self):
            return self.getTypedRuleContext(Parser.ViralAttributeContext,0)


        def getRuleIndex(self):
            return Parser.RULE_componentRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponentRole" ):
                listener.enterComponentRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponentRole" ):
                listener.exitComponentRole(self)




    def componentRole(self):

        localctx = Parser.ComponentRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_componentRole)
        try:
            self.state = 1824
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Parser.MEASURE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1819
                self.match(Parser.MEASURE)
                pass
            elif token in [Parser.COMPONENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1820
                self.match(Parser.COMPONENT)
                pass
            elif token in [Parser.DIMENSION]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1821
                self.match(Parser.DIMENSION)
                pass
            elif token in [Parser.ATTRIBUTE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1822
                self.match(Parser.ATTRIBUTE)
                pass
            elif token in [Parser.VIRAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1823
                self.viralAttribute()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ViralAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VIRAL(self):
            return self.getToken(Parser.VIRAL, 0)

        def ATTRIBUTE(self):
            return self.getToken(Parser.ATTRIBUTE, 0)

        def getRuleIndex(self):
            return Parser.RULE_viralAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViralAttribute" ):
                listener.enterViralAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViralAttribute" ):
                listener.exitViralAttribute(self)




    def viralAttribute(self):

        localctx = Parser.ViralAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_viralAttribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.match(Parser.VIRAL)
            self.state = 1827
            self.match(Parser.ATTRIBUTE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueDomainIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_valueDomainID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueDomainID" ):
                listener.enterValueDomainID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueDomainID" ):
                listener.exitValueDomainID(self)




    def valueDomainID(self):

        localctx = Parser.ValueDomainIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_valueDomainID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperatorIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_operatorID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorID" ):
                listener.enterOperatorID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorID" ):
                listener.exitOperatorID(self)




    def operatorID(self):

        localctx = Parser.OperatorIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_operatorID)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1831
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoutineNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Parser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Parser.RULE_routineName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineName" ):
                listener.enterRoutineName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineName" ):
                listener.exitRoutineName(self)




    def routineName(self):

        localctx = Parser.RoutineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_routineName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            self.match(Parser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_CONSTANT(self):
            return self.getToken(Parser.INTEGER_CONSTANT, 0)

        def NUMBER_CONSTANT(self):
            return self.getToken(Parser.NUMBER_CONSTANT, 0)

        def BOOLEAN_CONSTANT(self):
            return self.getToken(Parser.BOOLEAN_CONSTANT, 0)

        def STRING_CONSTANT(self):
            return self.getToken(Parser.STRING_CONSTANT, 0)

        def NULL_CONSTANT(self):
            return self.getToken(Parser.NULL_CONSTANT, 0)

        def getRuleIndex(self):
            return Parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = Parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1835
            _la = self._input.LA(1)
            if not(_la==Parser.NULL_CONSTANT or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & ((1 << (Parser.INTEGER_CONSTANT - 241)) | (1 << (Parser.NUMBER_CONSTANT - 241)) | (1 << (Parser.BOOLEAN_CONSTANT - 241)) | (1 << (Parser.STRING_CONSTANT - 241)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasicScalarTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(Parser.STRING, 0)

        def INTEGER(self):
            return self.getToken(Parser.INTEGER, 0)

        def NUMBER(self):
            return self.getToken(Parser.NUMBER, 0)

        def BOOLEAN(self):
            return self.getToken(Parser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(Parser.DATE, 0)

        def TIME(self):
            return self.getToken(Parser.TIME, 0)

        def TIME_PERIOD(self):
            return self.getToken(Parser.TIME_PERIOD, 0)

        def DURATION(self):
            return self.getToken(Parser.DURATION, 0)

        def SCALAR(self):
            return self.getToken(Parser.SCALAR, 0)

        def getRuleIndex(self):
            return Parser.RULE_basicScalarType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicScalarType" ):
                listener.enterBasicScalarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicScalarType" ):
                listener.exitBasicScalarType(self)




    def basicScalarType(self):

        localctx = Parser.BasicScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_basicScalarType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            _la = self._input.LA(1)
            if not(((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & ((1 << (Parser.BOOLEAN - 168)) | (1 << (Parser.DATE - 168)) | (1 << (Parser.TIME_PERIOD - 168)) | (1 << (Parser.NUMBER - 168)) | (1 << (Parser.STRING - 168)) | (1 << (Parser.TIME - 168)) | (1 << (Parser.INTEGER - 168)) | (1 << (Parser.DURATION - 168)))) != 0) or _la==Parser.SCALAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RetainTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN_CONSTANT(self):
            return self.getToken(Parser.BOOLEAN_CONSTANT, 0)

        def ALL(self):
            return self.getToken(Parser.ALL, 0)

        def getRuleIndex(self):
            return Parser.RULE_retainType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetainType" ):
                listener.enterRetainType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetainType" ):
                listener.exitRetainType(self)




    def retainType(self):

        localctx = Parser.RetainTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_retainType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            _la = self._input.LA(1)
            if not(_la==Parser.ALL or _la==Parser.BOOLEAN_CONSTANT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.expr_sempred
        self._predicates[3] = self.exprComponent_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 7)
         

    def exprComponent_sempred(self, localctx:ExprComponentContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 6)
         




